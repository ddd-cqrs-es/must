<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nohros</name>
    </assembly>
    <members>
        <member name="M:Nohros.Listeners.SafeInvoke``1(System.MulticastDelegate,Nohros.Listeners.ListenerInvoker{``0})">
            <summary>
            A method that guarantess that every delegate contained in the
            give <see cref="T:System.MulticastDelegate"/> delegate will be executed.
            </summary>
            <param name="multi_cast_delegate">
            A <see cref="T:System.MulticastDelegate"/> containing the delegates to be
            invoked.
            </param>
            <param name="invoker">
            A <see cref="T:Nohros.Listeners.ListenerInvoker`1"/> that is invoked for each delegate
            contained in the <see cref="T:System.MulticastDelegate"/>.
            </param>
            <remarks>
            In many cases, a notification source can simply call "delegate()" to
            execute all the target handler methods associated with a
            <see lang="MulticastDelegate"/> delegate object. However, the
            <see lang="MulticastDelegate"/> error handling makes awereness of the
            sequential notification critical. If one subscriber throws an exception
            then later subscribers in the chain is not executed.
            <para>
            To avoid this problem, so that all subscribers execute
            regardless of the behavior of the earlier subscribers, you must
            manually enumerate through the list of subscribers and call them
            individually. This method may be used to avoid doing it manually.
            </para>
            <para>
            We just log the exceptions that are throwed by the subscribers. The
            <see cref="T:Nohros.Logging.MustLogger"/> is used to log the exceptions, by default this
            logger logs to nothing, clients should configure the logger that they
            want to use.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.Collections.VisitorCallback`1">
            <summary>
            Represents a callback method to be executed by a visitor
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">
            The visited object.
            </param>
            <param name="state">
            An object containing information to be used
            by the callback method.
            </param>
        </member>
        <member name="T:Nohros.Collections.VisitorCallback`2">
            <summary>
            Represents a callback method to be executed by a visitor
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj1">
            The visited object.
            </param>
            <param name="obj2">
            The visited object.
            </param>
            <param name="state">
            An object containing information to be used
            by the callback method.
            </param>
        </member>
        <member name="T:Nohros.Data.AppStateExtensions">
            <summary>
            Extensions method for <see cref="T:Nohros.Data.IAppState"/> interface.
            </summary>
        </member>
        <member name="M:Nohros.Data.AppStateExtensions.SetIfGreaterThan``1(Nohros.Data.IAppState,System.String,``0,``0)">
            <summary>
            Sets, in an atomic operation, the values of the state associated
            with the key <paramref name="name"/> if the current value is greater
            the given state or if the key is not found.
            </summary>
            <param name="states">
            A <see cref="T:Nohros.Data.IAppState"/> to extend.
            </param>
            <param name="name">
            The name of the state to set.
            </param>
            <param name="state">
            The value of the state to set.
            </param>
            <param name="comparand">
            The value that is compared to the current state.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="!:T"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.AppStateExtensions.SetIfLessThan``1(Nohros.Data.IAppState,System.String,``0,``0)">
            <summary>
            Sets, in an atomic operation, the values of the state associated
            with the key <paramref name="name"/> if the current value is less
            the given state or if the key is not found.
            </summary>
            <param name="states">
            A <see cref="T:Nohros.Data.IAppState"/> to extend.
            </param>
            <param name="name">
            The name of the state to set.
            </param>
            <param name="state">
            The value of the state to set.
            </param>
            <param name="comparand">
            The value that is compared to the current state.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="!:T"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.AppStateExtensions.SetIfEqualsTo``1(Nohros.Data.IAppState,System.String,``0,``0)">
            <summary>
            Sets, in an atomic operation, the values of the state associated
            with the key <paramref name="name"/> if the current value is less
            the given state or if the key is not found.
            </summary>
            <param name="states">
            A <see cref="T:Nohros.Data.IAppState"/> to extend.
            </param>
            <param name="name">
            The name of the state to set.
            </param>
            <param name="state">
            The value of the state to set.
            </param>
            <param name="comparand">
            The value that is compared to the current state.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="!:T"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.AppStateExtensions.Increment(Nohros.Data.IAppState,System.String)">
            <summary>
            Increments (increases by one) the value of the state associated with
            the given <paramref name="name"/> as an atomic operation or associates
            the the specified <paramref name="name"/> with the value one.
            </summary>
            <param name="states">
            A <see cref="T:Nohros.Data.IAppState"/> to extend.
            </param>
            <param name="name">
            The name of the state to be increased.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="T:System.Int32"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.AppStateExtensions.Increment(Nohros.Data.IAppState,System.String,System.Int32)">
            <summary>
            Increments (increases by n) the value of the state associated with
            the given <paramref name="name"/> as an atomic operation or associates
            the the specified <paramref name="name"/> with the value <paramref name="n"/>.
            </summary>
            <param name="states">
            A <see cref="T:Nohros.Data.IAppState"/> to extend.
            </param>
            <param name="name">
            The name of the state to be increased.
            </param>
            <param name="n">
            The number to increment.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="T:System.Int32"/>
            </exception>
        </member>
        <member name="T:Nohros.Data.IAppState">
            <summary>
            Represents an application state repository which is an object that
            contains a collection of key/value pairs representing application states.
            </summary>
        </member>
        <member name="M:Nohros.Data.IAppState.Contains``1(System.String)">
            <summary>
            Determines whether the state's collection contains a specific state.
            </summary>
            <param name="name">
            The name of the state to locate in the <see cref="T:Nohros.Data.IAppState"/>.
            </param>
            <returns>
            <c>true</c> if the <paramref name="name"/> is found; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.Get``1(System.String)">
            <summary>
            Gets the state associated with the key <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <returns>
            The value of the state associated with the key <paramref name="name"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The type <typeparamref name="T"/> is not supported by the local
            database.
            <typeparamref name="T"/>.
            <exception cref="T:Nohros.NoResultException">
            There is no state associated with the key <paramref name="name"/>.
            </exception>
            </exception>
        </member>
        <member name="M:Nohros.Data.IAppState.GetForPrefix``1(System.String)">
            <summary>
            Get all the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </summary>
            <typeparam name="T">
            The type of the states to get.
            </typeparam>
            <param name="prefix">
            A string that a key should starts with in order to be returned.
            </param>
            <returns>
            All the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.GetForPrefix``1(System.String,System.Int32)">
            <summary>
            Get all the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </summary>
            <typeparam name="T">
            The type of the states to get.
            </typeparam>
            <param name="prefix">
            A string that a key should starts with in order to be returned.
            </param>
            <param name="limit">
            The maximum number of states to return.
            </param>
            <returns>
            All the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.GetForPrefix``1(System.String,System.Boolean)">
            <summary>
            Get all the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </summary>
            <typeparam name="T">
            The type of the states to get.
            </typeparam>
            <param name="prefix">
            A string that a key should starts with in order to be returned.
            </param>
            <param name="remove">
            A value that indicates if the returned states should be automatically
            removed.
            </param>
            <returns>
            All the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.GetForPrefix``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get all the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </summary>
            <typeparam name="T">
            The type of the states to get.
            </typeparam>
            <param name="prefix">
            A string that a key should starts with in order to be returned.
            </param>
            <param name="limit">
            The maximum number of states to return.
            </param>
            <param name="remove">
            A value that indicates if the returned states should be automatically
            removed.
            </param>
            <returns>
            All the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.Get``1(System.String,``0)">
            <summary>
            Returns the state associated with the key <paramref name="name"/> or
            the given <paramref name="def"/> if a <paramref name="name"/> state is
            not found.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="def">
            The value to be returned if <paramref name="name"/> state is not found.
            </param>
            <returns>
            The value of the state associated with the key <paramref name="name"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The type <typeparamref name="T"/> is not supported by the local
            database.
            <typeparamref name="T"/>.
            <exception cref="T:Nohros.NoResultException">
            There is no state associated with the key <paramref name="name"/>.
            </exception>
            </exception>
        </member>
        <member name="M:Nohros.Data.IAppState.Get``1(System.String,``0@)">
            <summary>
            Gets the state associated with the key <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            The value of the state associated with the key <paramref name="name"/>.
            </param>
            <returns>
            <c>true</c> if there is a state associated with the key
            <paramref name="name"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The type <typeparamref name="T"/> is not supported by the local
            database.
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IAppState.Set``1(System.String,``0)">
            <summary>
            Sets the values of the state associated with the key
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to set.
            </param>
            <param name="state">
            The value of the state to set.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IAppState.SetIf``1(Nohros.ComparisonOperator,System.String,``0,``0)">
            <summary>
            Set, in an atomic operation, the value of the state associated
            with the key <paramref name="name"/> if the operation described by
            the <paramref name="op"/> when applied over the current
            state's value and using the given <paramref name="comparand"/> is
            <c>true</c> or if the key is not found.
            </summary>
            <param name="name">
            The name of the state to set.
            </param>
            <param name="state">
            The value that replaces the current state if the compariso results in
            equality.
            </param>
            <param name="comparand">
            The value that is compared to the current state.
            </param>
            <param name="op">
            The operation to be applied over the current state's value using the
            given <paramref name="comparand"/>.
            </param>
            <returns>
            <c>true</c> if the state was set; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="T:System.String"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.IAppState.Remove``1(System.String)">
            <summary>
            Removes the state associated with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to be removed.
            </param>
            <returns>
            <c>true</c> if a key was found and removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.RemoveForPrefix``1(System.String)">
            <summary>
            Removes all the states that is associated with a key that starts with
            the given <paramref name="prefix"/>.
            </summary>
            <param name="prefix">
            A string that a key should starts with in order to be returned.
            </param>
            <returns>
            The number of states that was removed.
            </returns>
        </member>
        <member name="M:Nohros.Data.IAppState.Merge``1(System.String,``0)">
            <summary>
            Merges, in an atomic operation, the current state's value with the
            given <paramref name="state"/> or associates the given
            <paramref name="state"/> with the specified <paramref name="name"/>
            if <paramref name="name"/> if not found.
            </summary>
            <typeparam name="T">
            The state's data type.
            </typeparam>
            <param name="name">
            The name of the state to be merged.
            </param>
            <param name="state">
            The value to be merged with the current state.
            </param>
            <exception cref="T:System.NotSupportedException">
            The local database does not support the type <see cref="T:System.String"/>
            </exception>
        </member>
        <member name="T:Nohros.Data.StringTypeMap">
            <summary>
            Maps a class property to a value of a column from a
            <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="T:Nohros.Data.TypeMap">
            <summary>
            Provides a base implementation for the interface <see cref="T:Nohros.Data.ITypeMap"/>
            to reduce the effort required to implemente that interface.
            </summary>
        </member>
        <member name="P:Nohros.Data.ITypeMap.Value">
            <summary>
            Gets the value that is used on the map operation.
            </summary>
        </member>
        <member name="M:Nohros.Data.StringTypeMap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.StringTypeMap"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The name of the column to use as data source for the map operation.
            </param>
        </member>
        <member name="M:Nohros.Data.StringTypeMap.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.StringTypeMap"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The name of the column to use as data source for the map operation.
            </param>
        </member>
        <member name="M:Nohros.Data.StringTypeMap.op_Implicit(System.String)~Nohros.Data.StringTypeMap">
            <summary>
            Implicit converts a string to a <see cref="T:Nohros.Data.StringTypeMap"/>.
            </summary>
            <param name="str">
            The string to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.StringTypeMap"/> object representing the string
            <paramref name="str"/>.
            </returns>
        </member>
        <member name="P:Nohros.Data.StringTypeMap.RawType">
            <summary>
            Gets or sets the type of the underlying column data.
            </summary>
        </member>
        <member name="P:Nohros.Data.StringTypeMap.Conversor">
            <summary>
            Gets or sets a expression that should be used to convert the value
            returned from the database to another type.
            </summary>
        </member>
        <member name="T:Nohros.Data.IHiLoGeneratorFactory">
            <summary>
            Defines a factory for the <see cref="T:Nohros.Data.IHiLoGenerator"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.IHiLoGeneratorFactory.CreateHiLoGenerator(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.Data.IHiLoGenerator"/> class using
            the given user defined configuration options.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the user defined
            configuration options.
            </param>
            <returns>
            The newly crated <see cref="T:Nohros.Data.IHiLoGenerator"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.IHiLoGenerator">
            <summary>
            A class that is used to generate integer identity values using the Hi/Lo
            algorithm.
            </summary>
        </member>
        <member name="M:Nohros.Data.IHiLoGenerator.Generate">
            <summary>
            Generate the next global available identity.
            </summary>
            <returns>
            The next available global identity value.
            </returns>
            <remarks>
            A global identity value is the identity that is associated with a
            <see cref="F:System.String.Empty"/> key.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IHiLoGenerator.Generate(System.String)">
            <summary>
            Generate the next available identity.
            </summary>
            <param name="key">
            A string that identifies the object to get the next high value(ex. The
            name of a table in a RDBMS).
            </param>
            <returns>
            The next available identity value.
            </returns>
        </member>
        <member name="T:Nohros.Data.ICommand">
            <summary>
            Provides functionality to execute queries that retunrs no value against
            a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand.Execute">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
        </member>
        <member name="T:Nohros.Data.ICommand`1">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            one parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`1.Execute(`0)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`2">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            two parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`2.Execute(`0,`1)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`3">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            three parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`3.Execute(`0,`1,`2)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`4">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            four parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`4.Execute(`0,`1,`2,`3)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`5">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            five parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`5.Execute(`0,`1,`2,`3,`4)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`6">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            six parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`6.Execute(`0,`1,`2,`3,`4,`5)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`7">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            seven parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`7.Execute(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`8">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            eight parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`8.Execute(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
            <param name="arg8">
            The type of the eighth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`9">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            nine parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`9.Execute(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
            <param name="arg8">
            The type of the eighth parameter of the query.
            </param>
            <param name="arg9">
            The type of the ninth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.ICommand`10">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            ten parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICommand`10.Execute(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.ICommand`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
            <param name="arg8">
            The type of the eighth parameter of the query.
            </param>
            <param name="arg9">
            The type of the ninth parameter of the query.
            </param>
            <param name="arg10">
            The type of the tenth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.CommandLine">
            <summary>
            This class works with command lines: building and parsing.
            </summary>
            <remarks>
            The command line string is segmented in space-delimited tokens and
            contains the program name and its arguments.
            <para>The first token represents the command name even if it is
            prefixed with a argument switch.</para>
            <para>If a token contains a space, it must be quoted to indicate where
            the token end and the next token begin.</para>
            <para>
            A switch prefix is one of the following signs "-", "--".
            </para>
            <para>
            Switches can optionally have a value attached using an equals sign or a
            colon sign as in "-switch=value, -switch:value". Arguments that aren't
            prefixed with a switch prefix are considered  as "loose parameters". An
            argument of "--"  will terminate switch parsing , causing everything
            after to be considered as "loose parameters". Note that the first token
            is always considered the command name and that rules does apply to it.
            </para>
            <para>
            Switch names are case-insensitive.
            </para>
            <para>
            There is a singleton read-only CommandLine that represents the command
            line that the current process was started with.
            </para>
            <para>
            Loose parameters is useful for subprocess creation, when a subprocess
            needs to receive only a subset of the parent command line.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.CommandLine.#cctor">
            <summary>
            Singleton constructor.
            </summary>
        </member>
        <member name="M:Nohros.CommandLine.#ctor">
            <summary>
            Constructs a new, empty command line and initializes it.
            Used internally.
            </summary>
        </member>
        <member name="M:Nohros.CommandLine.#ctor(System.String)">
            <summary>
            Constructs a new empty CommandLine object.
            <param name="program">The name of the program to run.(aka argv[0])
            </param>
            </summary>
        </member>
        <member name="M:Nohros.CommandLine.FromString(System.String)">
            <summary>
            Initializes a new instance of the CommandLine class by parsing the
            specified command line string.
            </summary>
            <returns>An instance of the CommandLine class.</returns>
            <remarks>The program name is assumed to be the item in the
            string.</remarks>
        </member>
        <member name="M:Nohros.CommandLine.QuoteIfNeed(System.String)">
            <summary>
            Encloses a string in quotes if has spaces within it.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nohros.CommandLine.RemoveQuotes(System.String)">
            <summary>
            Removes the quotes that encloses a string.
            </summary>
            <param name="quoted_value"></param>
            <returns></returns>
        </member>
        <member name="M:Nohros.CommandLine.GetSwitchPrefix(System.String)">
            <summary>
            Gets a valid switch prefix based on the specified switch.
            </summary>
            <param name="switch_prefix">An switch to validate.</param>
            <returns>The specified switch prefix or "-" if the specified switch
            prefix is not valid.</returns>
            <remarks>
            Valid switch prefixes are: "-", "--", "/".
            </remarks>
        </member>
        <member name="M:Nohros.CommandLine.AppendSwitch(System.String,System.String)">
            <summary>
            Appends the given switch string (preceded by a space and a switch
            prefix) to the given string.
            </summary>
            <param name="switch_string">The switch string to append.</param>
            <param name="switch_prefix">The switch prefix to append.</param>
        </member>
        <member name="M:Nohros.CommandLine.AppendSwitchWithValue(System.String,System.String,System.String,System.Char)">
            <summary>
            Appends the given switch string(preceded by a space and a switch
            prefix) to the given string, with the given value attached.
            </summary>
        </member>
        <member name="M:Nohros.CommandLine.AppendLooseValue(System.String)">
            <summary>
            Append a loose value to the command line.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nohros.CommandLine.AppendSwitchParsingStopPrefix">
            <summary>
            Appends a switch parsing stop prefix to the command line.
            </summary>
            <remarks>
            The "--" sign followed by a space causes the parsing to stop its
            processing and to consider any strings that comes after that as
            "loose parameters".
            </remarks>
        </member>
        <member name="M:Nohros.CommandLine.Reset">
            <summary>
            Resets the command line.
            </summary>
        </member>
        <member name="M:Nohros.CommandLine.ParseFromString(System.String)">
            <summary>
            Creates a parsed version of the given command-line string. The program
            name is assumed to be the first item in the string.
            </summary>
            <param name="command_line">The command line to parse.</param>
        </member>
        <member name="M:Nohros.CommandLine.ParseStringToken">
            <summary>
            Parses a sequence of characters into a
            <see cref="F:Nohros.CommandLine.Token.TokenType.STRING"/>.
            </summary>
            <remarks>A string token parsing ends when a space character is
            found.</remarks>
            <returns>A Token of the type <see cref="F:Nohros.CommandLine.Token.TokenType.STRING"/>
            containing the parsed sequence of characters.</returns>
        </member>
        <member name="M:Nohros.CommandLine.ParseToken">
            <summary>
            Grabs the next token in the command line stream. This does not
            decrements the stream so it can be used to look ahead at the next
            token.
            </summary>
            <returns>A token class containing information about the next token
            in the command line stream</returns>
        </member>
        <member name="M:Nohros.CommandLine.HasSwitch(System.String)">
            <summary>
            Gets a value indicating if this command line has the specified switch.
            </summary>
            <param name="switch_string">The switch to verify.</param>
            <returns>true if this command line contains the given switch.</returns>
            <remarks>Switch names are case-insensitive.</remarks>
        </member>
        <member name="M:Nohros.CommandLine.GetSwitchValue(System.String)">
            <summary>
            Gets the value associated with the specified switch.
            </summary>
            <param name="name">
            The switch to get the value from.
            </param>
            <returns>
            The value associated with the specified switch or an empty string if
            the switch has no value or isn't present.
            </returns>
        </member>
        <member name="M:Nohros.CommandLine.GetSwitchValue(System.String,System.String)">
            <summary>
            Gets the value associated with the specified switch.
            </summary>
            <param name="name">
            The switch to get the value from.
            </param>
            <param name="def">
            The value that should be returned if the switch is not found.
            </param>
            <returns>
            The value associated with the specified switch or <paramref name="def"/>
            if the switch isn't present.
            </returns>
        </member>
        <member name="M:Nohros.CommandLine.TryGetSwitchValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified switch.
            </summary>
            <param name="name">
            The switch to get the value from.
            </param>
            <param name="value">
            When this method returns contains the value associated with the switch
            <param name="name">, or <c>null</c> if the
            switch does not exists.
            </param>
            </param>
            <returns>
            <c>true</c> if the value associated with the specified switch is found;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.CommandLine.TryGetSwitchValueAsInt(System.String,System.Int32@)">
            <summary>
            Gets the value associated with the speified switch and try to convert
            parse it in a signed 32-bit integer.
            </summary>
            <param name="name">
            The name of the switch to get the value.
            </param>
            <param name="value">
            When this method returns, the value of the switch converted to a signed
            32-bit integer, or 0 if the switch does not exists or cannot be
            conveted to an 32-bit signed integer.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.CommandLine.GetSwitchValueAsInt(System.String)">
            <summary>
            Gets the value associated with the speified switch and try to convert
            parse it in a signed 32-bit integer.
            </summary>
            <param name="name">
            The name of the switch to get the value.
            </param>
            <returns>
            The value of the switch converted to a signed 32-bit integer.
            </returns>
        </member>
        <member name="M:Nohros.CommandLine.GetSwitchValueAsInt(System.String,System.Int32)">
            <summary>
            Gets the value associated with the speified switch and try to convert
            parse it in a signed 32-bit integer.
            </summary>
            <param name="name">
            The name of the switch to get the value.
            </param>
            <returns>
            The value of the switch converted to a signed 32-bit integer, or
            <paramref name="def"/> if the switch does not exists or cannot be
            conveted to an 32-bit signed integer.
            </returns>
        </member>
        <member name="M:Nohros.CommandLine.CopySwitchesFrom(Nohros.CommandLine,System.String[])">
            <summary>
            Copies a set of switches (and any values) from another command line
            </summary>
            <param name="source">A <see cref="T:Nohros.CommandLine"/> object, which
            the switches will be copied from.</param>
            <param name="switches">A list of switches that should be copied
            from the <paramref name="source"/> command line.</param>
            <remarks>
            This method is commonly used when launching a subprocess.
            <para>
            If a specified switche does not exists in the source, nothing will be
            copied and no exception will be throwed.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.CommandLine.CopySwitchesFrom(Nohros.CommandLine)">
            <summary>
            Copies all the of switches (and any values) from another command line.
            </summary>
            <param name="source">A <see cref="T:Nohros.CommandLine"/> object, which the
            switches will be copied from.</param>
        </member>
        <member name="P:Nohros.CommandLine.Program">
            <summary>
            Gets the program part of the command line string (the first item).
            </summary>
        </member>
        <member name="P:Nohros.CommandLine.ForCurrentProcess">
            <summary>
            Gets the singleton CommandLine representing the current process's
            command line.
            </summary>
        </member>
        <member name="P:Nohros.CommandLine.SwitchCount">
            <summary>
            Gets the number of switches in this process.
            </summary>
        </member>
        <member name="P:Nohros.CommandLine.Switches">
            <summary>
            Get a copy of all switches, along with their values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nohros.CommandLine.LooseValues">
            <summary>
            Gets the "loose parameters" that is the command line arguments
            that aren't prefixed with a switch prefix.
            </summary>
            <returns>An IList&lt;string&gt; containing all the
            "loose parameters".</returns>
        </member>
        <member name="P:Nohros.CommandLine.CommandLineString">
            <summary>
            Gets the original command line string.
            </summary>
        </member>
        <member name="F:Nohros.CommandLine.Token.begin">
            <summary>
            A index into CommandLine.command_line_string_ that's the beginning of
            this token.
            </summary>
        </member>
        <member name="F:Nohros.CommandLine.Token.length">
            <summary>
            The length of this token.
            </summary>
        </member>
        <member name="F:Nohros.CommandLine.Token.type">
            <summary>
            The token type.
            </summary>
        </member>
        <member name="M:Nohros.CommandLine.Token.#ctor(Nohros.CommandLine.Token.TokenType,System.Int32,System.Int32)">
            <summary>
            Initializes a new TOken by using the specified token begin, type and
            end.
            </summary>
            <param name="begin">The begin of the token within the current command
            line</param>
            <param name="end">The end of the token within the current command
            line.</param>
            <param name="type">The type of teh token.</param>
        </member>
        <member name="T:Nohros.Configuration.XmlElementsNode">
            <summary>
            Provides a default implementation of the <see cref="T:Nohros.Configuration.IXmlElementsNode"/>
            interface.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.AbstractHierarchicalConfigurationNode">
            <summary>
            A implementation of the <see cref="T:Nohros.Configuration.IConfigurationNode"/> interface that
            can contains child nodes.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.AbstractConfigurationNode">
            <summary>
            Provides a skeletal implementation of the
            <see cref="T:Nohros.Configuration.IConfigurationNode"/> interface to reduce the effort required
            to implement this interface.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IConfigurationNode">
            <summary>
            Represents a single node in the nohros configuration file.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationNode.Name">
            <summary>
            Gets the name of the node.
            </summary>
        </member>
        <member name="F:Nohros.Configuration.AbstractConfigurationNode.name">
            <summary>
            The name of the configuration node.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Configuration.AbstractConfigurationNode"/>
            </summary>
            <param name="name">The name of the node.</param>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.GetAttributeValue(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of an attribute from the given xml node.
            </summary>
            <param name="node">
            The node that contains the attribute to get.
            </param>
            <param name="name">
            The name attribute of the attribute to get.
            </param>
            <returns>
            The value of the attribute named <paramref name="name"/>.
            </returns>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            A attribute named <paramref name="name"/> is not found within
            <paramref name="node"/>.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.GetLocation(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the "location" attribute from the
            <paramref name="element"/> and resolves it using the
            <paramref name="base_directory"/> as the base directory.
            </summary>
            <param name="element">
            A <see cref="T:System.Xml.XmlElement"/> that contains an attribute whose name is
            "location"
            </param>
            <param name="base_directory">
            The path of the directory to use as the location base directory.
            </param>
            <returns>
            A string representing the absolute path of the value that was set in
            the "location" attribute of the <paramref name="element"/>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.CheckPreconditions(System.Xml.XmlElement,System.String)">
            <summary>
            Checks the parser preconditions that is, <paramref name="element"/> and
            <paramref name="base_directory"/> are both not <c>null</c> and
            <paramref name="base_directory"/> is an absolute path(rooted).
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.GetAttributeValue(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Gets the value of an attribute from the given xml node.
            </summary>
            <param name="node">
            The node that contains the attribute to get.
            </param>
            <param name="name">
            The name attribute of the attribute to get.
            </param>
            <param name="default_value">
            The value that will be returned if an attribute with name
            <paramref name="name"/> is not found.
            </param>
            <returns>
            The value of the attribute whose name is <paramref name="name"/> or
            <paramref name="default_value"/> if an attribute with
            name <paramref name="name"/> is not found.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.GetAttributeValue(System.Xml.XmlElement,System.String,System.String@)">
            <summary>
            Gets the value of an attribute from the given xml node.
            </summary>
            <param name="element">
            The node that contains the attribute.
            </param>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="value">
            When this method returns contains the value of the attribute or
            an empty string if the attribute is not found.
            </param>
            <returns>
            <c>true</c> if the atribbute retrieval operation is successful;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationNode.GetAttributeValue(System.Xml.XmlElement,System.String,System.String,System.String@)">
            <summary>
            Gets the value of an attribute from the given xml node.
            </summary>
            <param name="element">
            The node that contains the attribute.
            </param>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="value">
            When this method returns contains the value of the attribute or
            <paramref name="default_value"/> if the attribute is not found.
            </param>
            <param name="default_value">
            The value that will be returned if an attribute with name
            <paramref name="name"/> is not found.
            </param>
            <returns>
            <c>true</c> if the atribbute retrieval operation is successful;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.AbstractConfigurationNode.Name">
            <summary>
            Gets the name of the node.
            </summary>
        </member>
        <member name="F:Nohros.Configuration.AbstractHierarchicalConfigurationNode.child_nodes_">
            <summary>
            A dictionary containing the child nodes.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractHierarchicalConfigurationNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Configuration.AbstractHierarchicalConfigurationNode"/> class that use a
            <see cref="T:System.Collections.Generic.Dictionary`2"/> to store the child nodes and could
            be identified by using the string <paramref name="name"/>.
            </summary>
            <param name="name">
            A string that uniquely identifies the node, within a single
            configuration object.
            </param>
        </member>
        <member name="M:Nohros.Configuration.AbstractHierarchicalConfigurationNode.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Nohros.Configuration.IConfigurationNode})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Configuration.AbstractHierarchicalConfigurationNode"/> class that use a
            specified <see cref="T:System.Collections.Generic.Dictionary`2"/> to store the child
            nodes and could be identified through the string
            <paramref name="name"/>.
            </summary>
            <param name="name">
            A string that uniquely identifies the node, within a single
            configuration object.
            </param>
            <param name="child_nodes_container">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> that is used to store the
            child nodes.
            </param>
        </member>
        <member name="M:Nohros.Configuration.AbstractHierarchicalConfigurationNode.AddChildNode(Nohros.Configuration.IConfigurationNode)">
            <summary>
            Adds the specified node to the internal collection of
            <see cref="T:Nohros.Configuration.AbstractHierarchicalConfigurationNode"/>.
            </summary>
            <param name="node">
            The <see cref="T:Nohros.Configuration.IConfigurationNode"/> element to be added.
            </param>
            <remarks>
            The name of the node will be used as a key that is a unique string that
            uniquelly identifies the node.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractHierarchicalConfigurationNode.AddChildNode(System.String,Nohros.Configuration.IConfigurationNode)">
            <summary>
            Adds the specified node to the internal collection of
            <see cref="T:Nohros.Configuration.AbstractHierarchicalConfigurationNode"/>.
            </summary>
            <param name="node">
            An <see cref="T:Nohros.Configuration.IConfigurationNode"/> to be added to
            the child nodes collection.
            </param>
            <param name="node_key">
            An string that uniquelly identifies the given configuration node.
            </param>
        </member>
        <member name="M:Nohros.Configuration.AbstractHierarchicalConfigurationNode.GetChildNode``1(System.String,``0@)">
            <summary>
            Gets a node with the specified name that is a child of the current node.
            </summary>
            <param name="child_node_name">
            A string specifying the name of the child node.
            </param>
            <param name="node">
            When this method returns contains a node with the specified name or
            <c>null</c> if the node name was not found within the child nodes.
            </param>
            <returns>
            <c>true</c> if the a node with the specified name was found; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.AbstractHierarchicalConfigurationNode.GetChildNode``1(System.String)">
            <summary>
            Gets a child node whose name is <paramref name="child_node_name"/>.
            </summary>
            <typeparam name="T">
            The node's type.
            </typeparam>
            <param name="child_node_name">
            The name of the node to get.
            </param>
            <returns>
            A node whose type is <typeparamref name="T"/> and name is
            <paramref name="child_node_name"/>.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.AbstractHierarchicalConfigurationNode.ChildNodes">
            <summary>
            Gets a list of all child nodes of the node.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.AbstractHierarchicalConfigurationNode.Item(System.String)">
            <summary>
            Gets a node with the specified name that is a child of the current node.
            </summary>
            <param name="name">
            A string specifying the name  of the node. The name is case-insensitive.
            </param>
            <returns>
            A child node with the specified name or <c>null</c> if the node is not
            found.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.AbstractHierarchicalConfigurationNode.Count">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Configuration.IXmlElementsNode">
            <summary>
            A <see cref="T:Nohros.Configuration.IXmlElementsNode"/> is a container for xml elements. This is
            typically used to configure third party libraries that con be configured
            using a Xml file - such as log4net loggin library.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.IXmlElementsNode.GetXmlElement(System.String)">
            <summary>
            Gets a <see cref="T:System.Xml.XmlElement"/> node whose name is
            <paramref name="xml_element_name"/>.
            </summary>
            <param name="xml_element_name">
            The name of the xml element.
            </param>
            <returns>
            A <see cref="T:System.Xml.XmlElement"/> object whose name is
            <paramref name="xml_element_name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A <see cref="T:System.Xml.XmlElement"/> object whose name is
            <param name="xml_element_name"> was not found.
            </param>
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IXmlElementsNode.GetXmlElement(System.String,System.Xml.XmlElement@)">
            <summary>
            Gets a <see cref="T:System.Xml.XmlElement"/> node whose name is
            <paramref name="xml_element_name"/>.
            </summary>
            <param name="xml_element_name">
            The name of the provider.
            </param>
            <param name="xml_element">
            When this method returns contains a <see cref="T:System.Xml.XmlElement"/>
            object whose name is <paramref name="xml_element_name"/>.
            </param>
            <returns>
            <c>true</c> when a provider whose name is
            <paramref name="xml_element_name"/> is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.IXmlElementsNode.Item(System.String)">
            <summary>
            Gets a <see cref="T:System.Xml.XmlElement"/> node whose name is
            <paramref name="xml_element_name"/>.
            </summary>
            <param name="xml_element_name">
            The name of the xml element.
            </param>
            <returns>
            A <see cref="T:System.Xml.XmlElement"/> object whose name is
            <paramref name="xml_element_name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A <see cref="T:System.Xml.XmlElement"/> object whose name is
            <param name="xml_element_name"> was not found.
            </param>
            </exception>
            <remarks>
            This method is a shortcut for the <see cref="M:Nohros.Configuration.IXmlElementsNode.GetXmlElement(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.XmlElementsNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.XmlElementsNode"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.XmlElementsNode.GetXmlElement(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.XmlElementsNode.GetXmlElement(System.String,System.Xml.XmlElement@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.XmlElementsNode.Parse(System.Xml.XmlElement)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlElement"/> element into a
            <see cref="T:Nohros.Configuration.XmlElementsNode"/> object.
            </summary>
            <param name="element">
            A Xml element that contains the xml elements configuration data.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.XmlElementsNode"/> containing the configured xml elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            The <paramref name="element"/> contains invalid configuration data.
            </exception>
        </member>
        <member name="P:Nohros.Configuration.XmlElementsNode.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Configuration.ProvidersNode">
            <summary>
            A <see cref="T:Nohros.Configuration.ProvidersNode"/> is a collection of
            <see cref="T:Nohros.Configuration.ProviderNode"/> objects.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IProvidersNode">
            <summary>
            A <see cref="T:Nohros.Configuration.IProvidersNode"/> is a collection of
            <see cref="T:Nohros.Configuration.IProvidersNode"/> objects.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNode.GetProvidersNodeGroup(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> node whose name is
            <paramref name="name"/> and is associated with the
            default group.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.IProviderNode"/> object whose name is
            <paramref name="name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A simple provider whose name is <param name="name"> was
            not found.
            </param>
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNode.GetProvidersNodeGroup(System.String,Nohros.Configuration.IProvidersNodeGroup@)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> whose name is
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <param name="node">
            When this method returns contains a <see cref="T:Nohros.Configuration.IProviderNode"/>
            object whose name is <paramref name="name"/>.
            </param>
            <returns>
            <c>true</c> when a provider whose name is
            <paramref name="name"/> is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNode.Add(Nohros.Configuration.IProvidersNodeGroup)">
            <summary>
            Adds an <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/> element to the
            <see cref="T:Nohros.Configuration.IProvidersNode"/> collection.
            </summary>
            <param name="node">
            The <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/> to add.
            </param>
            <remarks>
            The name of the node will be used as a node key and it should be
            the node's uniquely identifier.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IProvidersNode.Item(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> node whose name is
            <paramref name="name"/> and is associated with the
            default group.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.IProviderNode"/> object whose name is
            <paramref name="name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A simple provider whose name is <param name="name"> was
            not found.
            </param>
            </exception>
            <remarks>
            This method is a shortcut of the
            <see cref="M:Nohros.Configuration.IProvidersNode.GetProvidersNodeGroup(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IProvidersNode.Count">
            <summary>
            Gets the number of elements that the <see cref="T:Nohros.Configuration.IProvidersNode"/>
            contain.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.Parse(System.Xml.XmlElement,System.String)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlElement"/> element into a
            <see cref="T:Nohros.Configuration.ProvidersNode"/> object.
            </summary>
            <param name="element">
            A Xml element that contains the providers configuration data.
            </param>
            <param name="base_directory">
            The base directory to use when resolving the providers's location.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.ProvidersNode"/> containing the configured providers.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            The <paramref name="element"/> contains invalid configuration data.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProvidersNode"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.Add(Nohros.Configuration.IProvidersNodeGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.GetProvidersNodeGroup(System.String,Nohros.Configuration.IProvidersNodeGroup@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.GetProvidersNodeGroup(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.GetProviderNode(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> object whose name is
            <paramref name="name"/> and is not associated with any group.
            </summary>
            <param name="name">
            The name of the <see cref="T:Nohros.Configuration.IProviderNode"/> to retrieve.
            </param>
            <remarks>
            This methos is a shortcut of
            the most common variation of the
            <see cref="M:Nohros.Configuration.IProvidersNodeGroup.GetProviderNode(System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNode.GetProviderNode(System.String,Nohros.Configuration.IProviderNode@)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> object whose name is
            <paramref name="name"/> and is not associated with any group.
            </summary>
            <param name="name">
            The name of the <see cref="T:Nohros.Configuration.IProviderNode"/> to retrieve.
            </param>
            <remarks>
            This methos is a shortcut of
            the most common variation of the
            <see cref="M:Nohros.Configuration.IProvidersNodeGroup.GetProviderNode(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.ProvidersNode.Nohros#Configuration#IProvidersNode#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="F:Nohros.Caching.StrengthType.Strong">
            <summary>
            Strong references.
            </summary>
        </member>
        <member name="F:Nohros.Caching.StrengthType.Soft">
            <summary>
            Soft references.
            </summary>
        </member>
        <member name="F:Nohros.Caching.StrengthType.Weak">
            <summary>
            Weak references.
            </summary>
        </member>
        <member name="T:Nohros.Security.NSecurity">
            <summary>
            Generic static security class.
            </summary>
            <remarks>
            This class resides on the Nohros namespace for legacy compatibility.
            </remarks>
        </member>
        <member name="M:Nohros.Security.NSecurity.BasicCryptoString(System.String)">
            <summary>
            Provides a very basic mechanism to encrypt strings.
            </summary>
            <param name="dec">The decrypted string to encrypt</param>
            <returns>The encrypted form of the <paramref name="dec"/> string.</returns>
            <remarks>
            Strings encrypted with the <see cref="M:Nohros.Security.NSecurity.BasicCryptoString(System.String)"/> are not really secure. Its is
            used only to provide a very basic security mechanism. Anyone with with basic knowledge of programing
            could decrypt strings encrypted with this method. Do not use them to protect sensitive data.
            </remarks>
        </member>
        <member name="M:Nohros.Security.NSecurity.BasicDeCryptoString(System.String)">
            <summary>
            Decrypts a string encrypted with the <see cref="M:Nohros.Security.NSecurity.BasicCryptoString(System.String)"/> method.
            </summary>
            <param name="enc">A string encrypted with the to <see cref="M:Nohros.Security.NSecurity.BasicCryptoString(System.String)"/> method.</param>
            <returns>The encrypted form of the <paramref name="enc"/>string.</returns>
            <remarks>
            Strings encrypted with the <see cref="M:Nohros.Security.NSecurity.BasicCryptoString(System.String)"/> are not really secure. Its is
            used only to provide a very basic security mechanism. Anyone with with basic knowledge of programing
            could decrypt strings encrypted with this method. Do not use them to protect sensitive data.
            </remarks>
            <seealso cref="M:Nohros.Security.NSecurity.BasicDeCryptoString(System.String)"/>
        </member>
        <member name="M:Nohros.Security.NSecurity.RotateLeft(System.UInt32,System.Byte)">
            <summary>
            Implements the left circular shift.
            </summary>
            <param name="x">The value to be shifted</param>
            <param name="n">The number of bits to rotate</param>
        </member>
        <member name="M:Nohros.Security.NSecurity.RotateRight(System.UInt32,System.Byte)">
            <summary>
            Implements teh right circular shift
            </summary>
            <param name="x">The value to be shifted</param>
            <param name="n">The number of bits to rotate</param>
        </member>
        <member name="T:Nohros.MessageQueue.IOperationData">
            <summary>
            Defines a class that constains the data to be used when performing a
            queue opration
            </summary>
        </member>
        <member name="T:Nohros.ValueType">
            <summary>
            The real type of the object that derivates from the <see cref="T:Nohros.Value"/>
            class.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.NullValue">
            <summary>
            A null reference.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.Boolean">
            <summary>
            Types used to store boolean values, true and false.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.Integer">
            <summary>
            Types used to store integral types.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.Real">
            <summary>
            Types used to store doubles types.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.String">
            <summary>
            Types used to store strings.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.Dictionary">
            <summary>
            A <see cref="!:DictionaryValue"/> type.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.List">
            <summary>
            A <see cref="!:ListValue.cs"/> type.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.Generic">
            <summary>
            A <see cref="!:GenericValue.cs"/> type.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.Class">
            <summary>
            A custom type that implements the <see cref="T:Nohros.IValue"/> interface.
            </summary>
        </member>
        <member name="F:Nohros.ValueType.GenericDictionary">
            <summary>
            A <see cref="!:DictionaryValue&lt;&gt;"/> type.
            </summary>
        </member>
        <member name="T:Nohros.ISupplierStream`1">
            <summary>
            A implementation of the <see cref="T:Nohros.ISupplier`1"/> class that supply
            elements of type <typeparamref name="T"/> in a sequence.
            </summary>
            <typeparam name="T">
            The type of objects supplied.
            </typeparam>
        </member>
        <member name="T:Nohros.ISupplier`1">
            <summary>
            A class that can supply objects of a single type. Semantically, this
            could be a factory, generator, builder, or something else entirely. No
            guarantess are implied by this interface.
            </summary>
        </member>
        <member name="M:Nohros.ISupplier`1.Supply">
            <summary>
            Gets an instance of the appropriate type. The returned object may or
            not be a new instance, depending on the implementation.
            </summary>
            <remarks>
            There is no guaranteee that the supplier will always supplies a valid
            object. This is implementation specific.
            </remarks>
        </member>
        <member name="P:Nohros.ISupplierStream`1.Available">
            <summary>
            Gets a value indicating if an item available is available from the
            supplier.
            </summary>
            <value>
            <c>true</c> if an item is available from the supplier(that is, if
            <see cref="M:Nohros.ISupplier`1.Supply"/> method wolud return a value);
            otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:Nohros.Data.Providers.IDataProvider">
            <summary>
            Allows an object to implements a SQLDataProvider, and represents a set of
            methods and properties used to query a data store.
            </summary>
        </member>
        <member name="P:Nohros.Data.Providers.IDataProvider.Name">
            <summary>
            Gets the name of the data provider.
            </summary>
        </member>
        <member name="P:Nohros.Data.Providers.IDataProvider.ConnectionString">
            <summary>
            Gets the string tha can be used to make a connection to the data
            provider.
            </summary>
        </member>
        <member name="T:Nohros.Resources.StringResources">
            <summary>
            A coolection of common string resources.
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_EmptyString">
            <summary>
            Looks up a localized string similar to [The {0} argument could not be
            an empty string].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Switches_MissingSwitch">
            <summary>
            Looks up a localized string similar to [Missing required switch {0}].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_CollectionNoNulls">
            <summary>
            Looks up a localized string similar to [{0} cannot contain null
            elements.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
            Looks up a localized string similar to [Non-negative number required.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_AddingDuplicate">
            <summary>
            Looks up a localized string similar to [An entry with the same key
            already exists].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_AddingDuplicateKey">
            <summary>
            Looks up a localized string similar to [An entry with the same key
            already exists. Key:{0}.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_EmptyStringOrSpaceSequence">
            <summary>
            Looks up a localized string similar to [The {0} argument could not be
            an empty string or a sequence of spaces].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.DataProvider_Connection">
            <summary>
            Looks up a localized string similar to [An IDbConnection instance
            could not be created. Verify if your connection string and data source
            type were correctly specified.]
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.ArgumentOutOfRange_Index">
            <summary>
            Looks up a localized string similar to [Index was out of range. Must
            be non-negative and less than the size of the collection].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_ArrayPlusOffTooSmall">
            <summary>
            Looks up a localized string similar to [Destination array is not long
            enough to copy all the items in the collection. Check array index and
            length].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_Empty">
            <summary>
            Looks up a localized string similar to [{0} is empty].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_KeyNotFound">
            <summary>
            Looks up a localized string similar to [The key {0} was not found].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.ArgumentNull_Any">
            <summary>
            Looks up a localized string similar to [One of the specified arguments
            is a null reference].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Argument_InvalidOfLen">
            <summary>
            Looks up a localized string similar to [Offset and length were out of
            bounds for the array or count is greater than the number of elements
            from index to the end of the source collection].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_IndexOutOfRange">
            <summary>
            Looks up a localized string similar to [Index is outside the range of
            valid indexes for array].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_OutOfRange">
            <summary>
            Looks up a localized string similar to [Not a valid value].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_RangeNotBetween">
            <summary>
            Looks up a localized string similar to [The range of valid values are
            {0} to {1}].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_PathRooted">
            <summary>
            Looks up a localized string similar to [The "{0}" path must be
            relative to the application base directory.]
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_PathNotRooted">
            <summary>
            Looks up a localized string similar to [The "{0}" path is not rooted.]
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Configuration_InvalidFormat">
            <summary>
            Looks up a localized string similar to [The file {0} does not represent
            a valid configuration file.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.InvalidCast_FromTo">
            <summary>
            Looks up a localized string similar to [Invalid cast from {0} to {1}.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Configuration_Missing">
            <summary>
            Looks up a localized string similar to [Missing configuration
            information for {0} at {1}.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Configuration_ArgOutOfRange">
            <summary>
            Looks up a localized string similar to [{0} is not a valid value
            for {1}].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.InvalidOperation_EmptyQueue">
            <summary>
            Looks up a localized string similar to [Queue empty].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.InvalidOperation_FullQueue">
            <summary>
            Looks up a localized string similar to [Queue full].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Collection_AddingDuplicate">
            <summary>
            Looks up a localized string similar to [The element {0} is already
            in collection].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.TypeLoad_CreateInstance">
            <summary>
            Looks up a localized string similar to [Cannot create an instance of
            the type {0}].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Log_ThrowsException">
            <summary>
            Looks up a localized string similar to [{0} throws an exception.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Log_MethodThrowsException">
            <summary>
            Looks up a localized string similar to [The {0} method of {0} throws
            an exception.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Configuration_MissingNode">
            <summary>
            Looks up a localized string similar to [The configuration node {0} is
            not defined.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_ArgumentWrongType">
            <summary>
            Looks up a localized string similar to [Argument should be of type {0}.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_WrongType">
            <summary>
            Looks up a localized string similar to [{0} should be of type {1}.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_ArrayLengthDifferFrom">
            <summary>
            Looks up a localized string similar to [The length of the array {0}
            should be equals to the length of {1}.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.Arg_ArrayLengthsDiffer">
            <summary>
            Looks up a localized string similar to [Array lengths must be the same.].
            </summary>
        </member>
        <member name="P:Nohros.Resources.StringResources.NotSupported_CannotCreateType">
            <summary>
            Looks up a localized string similar to [This class cannot be used to
            create types related to {0}.].
            </summary>
        </member>
        <member name="T:Nohros.Data.Providers.ImmediateTransactionContext">
            <summary>
            A <see cref="T:Nohros.Data.Providers.ITransactionContext"/> that commits commands immediatelly
            upon enlistment.
            </summary>
        </member>
        <member name="T:Nohros.Data.Providers.ITransactionContext">
            <summary>
            Makes a code block transactional.
            </summary>
        </member>
        <member name="M:Nohros.Data.Providers.ITransactionContext.Complete">
            <summary>
            Atomically commits all the related operations against the associated
            data provider.
            </summary>
            <remarks>
            When you are satisfied that all operations within the context are
            ready to be persisted against the associated data provider, you should
            call this method to inform that the state across all resources is
            consistent, and the operations can be persisted.
            <para>
            Failing to call this method aborts the transaction, preventing the
            associated operations to be executed.
            </para>
            <para>
            Calling this method does not guarantee a commit of the operations. It
            is merely a way to inform the context about your status.
            </para>
            <para>
            If one of the operations fails to be executed the operations that was
            already executed should be rolled back.
            </para>
            </remarks>
            <exception cref="T:Nohros.ProviderException">
            A operation fail to be persisted against the associated data provider.
            </exception>
        </member>
        <member name="M:Nohros.Data.Providers.ITransactionContext.Enlist(Nohros.Data.Providers.PrepareCommandDelegate)">
            <summary>
            Enlists a command to participate in a transaction.
            </summary>
            <param name="command">
            A <see cref="T:Nohros.Data.Providers.PrepareCommandDelegate"/> that returns a
            <see cref="T:System.Data.IDbCommand"/> that should be enlisted to participate in a
            transaction.
            </param>
            <remarks>
            The <see cref="T:Nohros.Data.Providers.PrepareCommandDelegate"/> should be called at the time
            the <see cref="M:Nohros.Data.Providers.ITransactionContext.Complete"/> method runs, so a <see cref="T:System.Data.IDbCommand"/>
            can use the result of another <see cref="T:System.Data.IDbCommand"/> as a parameter.
            <para>
            The returned <see cref="T:System.Data.IDbCommand"/> should be attached to a
            transaction at the time the <see cref="M:Nohros.Data.Providers.ITransactionContext.Complete"/> method runs.
            </para>
            <para>
            The returned <see cref="T:System.Data.IDbCommand"/> will be associated with the
            same <see cref="T:System.Data.IDbConnection"/> that was specified at the construction
            time.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Providers.ITransactionContext.Enlist(Nohros.Data.Providers.PrepareCommandDelegate,Nohros.Data.Providers.ExecuteCommandDelegate)">
            <summary>
            Enlists a command that returns a result to participate in a transaction.
            </summary>
            <param name="preparing">
            A <see cref="T:Nohros.Data.Providers.PrepareCommandDelegate"/> that returns the
            <see cref="T:System.Data.IDbCommand"/> that should be enlisted to participate in a
            transaction.
            </param>
            <param name="executor">
            A <see cref="T:Nohros.Data.Providers.ExecuteCommandDelegate"/> that should be called to
            execute the <see cref="T:System.Data.IDbCommand"/>.
            </param>
            <remarks>
            The <paramref name="preparing"/> delegate will be called at the time
            the <see cref="M:Nohros.Data.Providers.ITransactionContext.Complete"/> method runs, so a <see cref="T:System.Data.IDbCommand"/>
            can use the result of another <see cref="T:System.Data.IDbCommand"/> as a parameter.
            <para>
            The returned <see cref="T:System.Data.IDbCommand"/> will be attached to a
            transaction at the time the <see cref="M:Nohros.Data.Providers.ITransactionContext.Complete"/> method runs.
            </para>
            <para>
            The returned <see cref="T:System.Data.IDbCommand"/> will be associated with the
            same <see cref="T:System.Data.IDbConnection"/> that was specified at the construction
            time.
            </para>
            <para>
            The <see cref="!:executor"/> delegate will be called after the command is
            prepared and attached to the transaction associated with the
            <see cref="T:Nohros.Data.Providers.ITransactionContext"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Providers.ITransactionContext.CreateCommand">
            <summary>
            Creates a command that is related with the same connection that is
            associated with the <see cref="T:Nohros.Data.Providers.ITransactionContext"/>.
            </summary>
            <remarks>
            A <see cref="T:System.Data.IDbCommand"/> that associated with the
            <see cref="T:Nohros.Data.Providers.ITransactionContext"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Providers.ImmediateTransactionContext.#ctor(System.Data.IDbConnection)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Data.Providers.ImmediateTransactionContext"/> class using the specified
            <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection">
            A <see cref="T:System.Data.IDbConnection"/> object that can be used to connects to
            the data provider server.
            </param>
        </member>
        <member name="M:Nohros.Data.Providers.ImmediateTransactionContext.Enlist(Nohros.Data.Providers.PrepareCommandDelegate,Nohros.Data.Providers.ExecuteCommandDelegate)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Providers.ImmediateTransactionContext.Enlist(Nohros.Data.Providers.PrepareCommandDelegate)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Providers.ImmediateTransactionContext.Enlist(System.Data.IDbCommand)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Providers.ImmediateTransactionContext.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Providers.ImmediateTransactionContext.CreateCommand">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.Json.JsonObject">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that represents a
            json object token.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.IJsonToken`1">
            <summary>
            Represents an json token.
            </summary>
            <typeparam name="T">
            The type of the json token.
            </typeparam>
        </member>
        <member name="T:Nohros.Data.Json.IJsonToken">
            <summary>
            Represents an json token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.IJsonToken.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="P:Nohros.Data.Json.IJsonToken`1.Value">
            <summary>
            Gets the underlying value.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.IJsonCollection">
            <summary>
            Represents a collection of <see cref="T:Nohros.Data.Json.IJsonToken"/> objects.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.IJsonCollection.Add(Nohros.Data.Json.IJsonToken)">
            <summary>
            Adds an <see cref="T:Nohros.Data.Json.IJsonToken"/> to the
            <seealso cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </summary>
            <param name="token">
            The <seealso cref="T:Nohros.Data.Json.IJsonToken"/> object to be added to the
            <see cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </param>
        </member>
        <member name="P:Nohros.Data.Json.IJsonCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </value>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject"/> class that
            contains no members.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject"/> class that
            is empty and has the specified initial capacity or the default initial
            capacity, whichever is greater.
            </summary>
            <param name="capacity">
            The initial number of elements taht the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> can
            initially store.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 0.
            </exception>
            <remarks>
            The capacity of a <see cref="T:Nohros.Data.Json.JsonObject"/> is the number of elements
            taht the <see cref="T:Nohros.Data.Json.JsonObject"/> can hold. As elements are added to
            a <see cref="T:Nohros.Data.Json.JsonObject"/>, the capacity is automatically increased
            as required by reallocating the internal array.
            <para>
            If the size of the collection can be estimated, specifying the initial
            capacity eliminates the need to perform a number of resizing operations
            while adding elements to the <see cref="T:Nohros.Data.Json.JsonObject"/>.
            </para>
            <para>
            This constructor is O(n) operation, where n is
            <paramref name="capacity"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.#ctor(System.Collections.Generic.IEnumerable{Nohros.Data.Json.JsonObject.JsonMember})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject"/> class that
            contains elements copied from the specified collection and has
            sufficient capacity to accomodate the number of elements copied.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="members"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="!:members"/> contains one or more <c>null</c> elements.
            </exception>
            <remarks>
            The elements are copied onto the <see cref="T:Nohros.Data.Json.JsonObject"/> in the same
            order they are ready by the <see cref="T:System.Collections.Generic.IEnumerator`1"/> of the
            collection.
            <para>
            THis construtor is a O(n) operation, where n is the number of elements
            in <paramref name="members"/>
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.Nohros#Data#Json#IJsonCollection#Add(Nohros.Data.Json.IJsonToken)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="token"/> is not instance of the
            <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class.
            </exception>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.AsJson">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.Add(Nohros.Data.Json.JsonObject.JsonMember)">
            <summary>
            Adds an <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> object to the
            <seealso cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </summary>
            <param name="member">
            The <seealso cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> object to be added to the
            <see cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Nohros.Data.Json.JsonObject.Count">
            <summary>
            Gets the number of members that this object contains.
            </summary>
        </member>
        <member name="P:Nohros.Data.Json.JsonObject.Value">
            <summary>
            Gets an array of <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> containing all the memebrs
            that a <see cref="T:Nohros.Data.Json.JsonObject"/> contain.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonObject.JsonMember">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that represents a
            json object member token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,Nohros.Data.Json.IJsonToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class
            by using the member name and value.
            </summary>
            <param name="name">
            The member's name.
            </param>
            <param name="value">
            The member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a string as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A string that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Int32"/> as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Int32"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Double"/> as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Double"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Int16"/> as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Int16"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Boolean"/> as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Boolean"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Single"/> as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Single"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Int64"/>integer as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Single"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonObject.JsonMember"/> class by
            using the member name and a <see cref="T:System.Decimal"/> as member value.
            </summary>
            <param name="name">
            The name of member
            </param>
            <param name="value">
            A <see cref="T:System.Decimal"/> that represents the member's value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonObject.JsonMember.AsJson">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Data.Json.JsonObject.JsonMember.Value">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.Json.JsonLong">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that maps a
            <see cref="T:System.Int64"/> type to a json number token.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonNumber`1">
            <summary>
            An abstract implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that serves
            as  a base class to types that maps to a json number token.
            </summary>
            <typeparam name="T">
            The type of the underlying value.
            </typeparam>
        </member>
        <member name="T:Nohros.Data.Json.JsonToken`1">
            <summary>
            Provides skeletal implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            interface to redecue the effort required to implement that interface.
            </summary>
            <typeparam name="T">
            The type of the underlying value.
            </typeparam>
        </member>
        <member name="M:Nohros.Data.Json.JsonToken`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonToken`1"/> class
            using the specified value.
            </summary>
            <param name="value">
            The underlying value.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonToken`1.AsJson">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Data.Json.JsonToken`1.Value">
            <inheritdoc/>
        </member>
        <member name="F:Nohros.Data.Json.JsonNumber`1.format">
            <summary>
            The format used to convert the underlying value to a string.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonNumber`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonNumber`1"/> class using
            the specified number format.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            A standard or custom number format.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonLong.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonLong"/> class
            that uses the general number format("G") to convert this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonLong.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonLong"/> class
            that uses <paramref name="format"/> to converts this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            The format to use when converting this instance to a string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonLong.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonLong.op_Explicit(System.Int64)~Nohros.Data.Json.JsonLong">
            <summary>
            Explicit converts an <see cref="T:System.Int64"/> object to a
            <see cref="T:Nohros.Data.Json.JsonLong"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Int64"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonLong"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.Json.JsonBoolean">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that represents a
            json bool token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonBoolean.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Nohros.Data.Json.JsonBoolean"/> class using
            the bool <paramref name="value"/>.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonBoolean.AsJson">
            <summary>
            Gets the json literal (true or false) representation of the
            <see cref="T:Nohros.Data.Json.IJsonToken`1"/> class.
            </summary>
            <returns>
            The json literal (true or false) representation of the
            <see cref="T:Nohros.Data.Json.IJsonToken`1"/> class. The returned bool is enclosed in
            double qutoes.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonBoolean.op_Explicit(System.Boolean)~Nohros.Data.Json.JsonBoolean">
            <summary>
            Explicit converts an <see cref="T:System.Boolean"/> object to a
            <see cref="T:Nohros.Data.Json.JsonBoolean"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Boolean"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonBoolean"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.DataFieldLong">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Int64"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="T:Nohros.Data.DataField`1">
            <summary>
            Provides a skeletal implementation of the <see cref="T:Nohros.Data.IDataField`1"/>
            interface to minimize the effort required to implement that interface.
            </summary>
            <typeparam name="T">
            The type of the underlying value.
            </typeparam>
        </member>
        <member name="T:Nohros.Data.IDataField`1">
            <summary>
            A <see cref="T:Nohros.Data.IDataField`1"/> is an enhanced version of the
            <see cref="T:System.Data.IDataReader"/> interface that allows callers to retrieve
            the native value associated with the data field.
            </summary>
            <seealso cref="T:System.Data.IDataReader"/>
        </member>
        <member name="T:Nohros.Data.IDataField">
            <summary>
            A <see cref="T:Nohros.Data.IDataField"/> defines a field associated with a
            <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="P:Nohros.Data.IDataField.Position">
            <summary>
            Gets zero-based column ordinal of the field.
            </summary>
        </member>
        <member name="P:Nohros.Data.IDataField.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="M:Nohros.Data.IDataField`1.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field in its native format.
            </summary>
        </member>
        <member name="F:Nohros.Data.DataField`1.name">
            <summary>
            The field's name.
            </summary>
        </member>
        <member name="F:Nohros.Data.DataField`1.position">
            <summary>
            The zero-based ordinal column of the field.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataField`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataField`1"/> class by
            using the specified field <paramref name="name"/> and
            ordinal <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="position"/> is negative.
            </exception>
        </member>
        <member name="M:Nohros.Data.DataField`1.GetValue(System.Data.IDataReader)">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Data.DataField`1.Position">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Data.DataField`1.Name">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.DataFieldLong.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldLong"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldLong.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Int64"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Int64"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Data.Json.IJsonDataField">
            <summary>
            A <see cref="T:Nohros.Data.Json.IJsonDataField"/> represents a relationship between a data
            field (a field retrieved from a <see cref="T:System.Data.IDataReader"/>) and a
            <see cref="T:Nohros.Data.Json.IJsonToken"/> object.
            </summary>
            <remarks>
            A <see cref="T:Nohros.Data.Json.IJsonToken"/> can improve the performance of operations that
            need to instantiate <see cref="T:Nohros.Data.Json.IJsonToken"/> objects from a generic
            <see cref="T:System.Data.IDataReader"/>.
            <example>
            The sample below demonstrate the gain of performance that is obtained by
            the use of the <see cref="T:Nohros.Data.Json.IJsonDataField"/>.
            <code>
            // Get the data fields once using the information of the reader.
            IJsonDataField[] fields = GetDataFields(IDataReader reader);
            
            // Read the rows from the data reader and dynamically crete the right
            // json token.
            int length = fields.Length;
            while (reader.Read()) {
              for (int i = 0, i &lt; length; i++) {
                IJsonDataField field = fields[i];
                
                // Get the right json token. Note that we do not need to check the
                // type of the field to get, the field object already know the right
                // type.
                IJsonToken token = field.GetJsonToken(reader, i);
            
                // do something with the token.
              }
            }
            
            IJsonDataField[] GetDataFields(IDataReader reader) {
              int field_count = reader.FieldCount;
              IJsonDataField[] fields = new IJsonDataField[field_count];
              for (int i = 0, i &lt; field_count; i++) {
                fields[i] = FUNCTION_TO_GET_JSON_DATA_FIELD_FROM_FIELD_TYPE(
                  reader.GetFieldType(i));
              }
              return field[i];
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldLong.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldLong"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldLong.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Int64"/> value at the field position.
            </param>
        </member>
        <member name="T:Nohros.Extensions.StringExtensions">
            <summary>
            A collection of useful extensions for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.CompareOrdinal(System.String,System.String)">
            <summary>
            Compares two string objects by evaluating the numeric values of the
            corresponding <see cref="T:System.Char"/> objects in each string.
            </summary>
            <param name="str">
            The first string.
            </param>
            <param name="comparand">
            The string to compare with the first.
            </param>
            <returns>
            <c>true</c> if <paramref name="str"/> is equals to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.CompareOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            Compares two string objects by evaluating the numeric values of the
            corresponding <see cref="T:System.Char"/> objects in each string ignoring
            their case.
            </summary>
            <param name="str">
            The first string.
            </param>
            <param name="comparand">
            The string to compare with the first.
            </param>
            <returns>
            <c>true</c> if <paramref name="str"/> is equals to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.CompareCurrentCultureIgnoreCase(System.String,System.String)">
            <summary>
            Compares two string objects by evaluating the numeric values of the
            corresponding <see cref="T:System.Char"/> objects in each string ignoring
            their case and using the current culture.
            </summary>
            <param name="str">
            The first string.
            </param>
            <param name="comparand">
            The string to compare with the first.
            </param>
            <returns>
            <c>true</c> if <paramref name="str"/> is equals to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Compare two strings, ignoring or honoring their case.
            </summary>
            <param name="str">
            The first string.
            </param>
            <param name="comparand">
            The string to compare with the first.
            </param>
            <param name="ignore_case">
            A boolean value indicating a case-sensitive or insensitive comparison(
            <c>true</c> indicates a case-insensitive comparison.)
            </param>
            <returns>
            <c>true</c> if <paramref name="str"/> is equals to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.CompareOrdinal(System.String,System.String,System.Boolean)">
            <summary>
            Compares two string objects by evaluating the numeric values of the
            corresponding <see cref="T:System.Char"/> objects in each string, ignoring or
            honoring their case.
            </summary>
            <param name="str">
            The first string.
            </param>
            <param name="comparand">
            The string to compare with the first.
            </param>
            <param name="ignore_case">
            A boolean value indicating a case-sensitive or insensitive comparison(
            <c>true</c> indicates a case-insensitive comparison.)
            </param>
            <returns>
            <c>true</c> if <paramref name="str"/> is equals to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.Compare(System.String,System.String,System.StringComparison)">
            <summary>
            Compares two strings using a parameter that specifies whether the
            comparison uses the current or invariant culture, honors or ignores
            case, and uses word or ordina sort rules.
            </summary>
            <param name="str">
            The first string.
            </param>
            <param name="comparand">
            The string to compare with the first.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values that indicates the
            type of comparison to perform.
            </param>
            <returns>
            <c>true</c> if <paramref name="str"/> is equals to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The <paramref name="comparison"/> parameter indicates whether the
            comparison should use the current or invariant culture, honor or
            ignore the case of the comparands, or use work(culture-sensitive) or
            ordinal (culture-insensitive) sort rules.
            <para>
            This method performs the same operation as the
            <see cref="M:System.String.Compare(System.String,System.String)"/>.
            </para>
            </remarks>
            <seealso cref="M:System.String.Compare(System.String,System.String)"/>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.AsBase64(System.String,System.Text.Encoding)">
            <summary>
            Encodes the given string using the base64 digits.
            </summary>
            <param name="str">
            The string to be encoded.
            </param>
            <param name="encoding">
            The character encoding of string <paramref name="str"/>.
            </param>
            <returns>
            The <paramref name="str"/> string encoded using the base64 digits
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringExtensions.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            Gets the original version of a string that was encoded using the
            base64 digits.
            </summary>
            <param name="str">
            The base64 encoded version of the string to get the original version.
            </param>
            <param name="encoding">
            The character encoding of the original string.
            </param>
            <returns></returns>
        </member>
        <member name="T:Nohros.ReferentialIntegrityException">
            <summary>
            Exception throws when referential integrity is violated.
            </summary>
        </member>
        <member name="T:Nohros.RepositoryException">
            <summary>
            Exception throw by Repositories when an exception occur.
            </summary>
            <remarks>
            A repository is a provider that provides data.
            </remarks>
        </member>
        <member name="T:Nohros.ProviderException">
            <summary>
            Thrown by a provider when a problem occurs.
            </summary>
        </member>
        <member name="M:Nohros.ProviderException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ProviderException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.ProviderException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ProviderException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ProviderException"/>was throw</param>
        </member>
        <member name="M:Nohros.ProviderException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ProviderException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this <see cref="T:Nohros.ProviderException"/> to be
            throw.
            </param>
        </member>
        <member name="M:Nohros.ProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the <see cref="T:Nohros.ProviderException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.ProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ProviderException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ProviderException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.ProviderException"/>to be throw.</param>
        </member>
        <member name="M:Nohros.RepositoryException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.RepositoryException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.RepositoryException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.RepositoryException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.RepositoryException"/>was throw</param>
        </member>
        <member name="M:Nohros.RepositoryException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.RepositoryException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this <see cref="T:Nohros.RepositoryException"/> to be
            throw.
            </param>
        </member>
        <member name="M:Nohros.RepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the <see cref="T:Nohros.RepositoryException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.RepositoryException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.RepositoryException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.RepositoryException"/>to be throw.</param>
        </member>
        <member name="M:Nohros.ReferentialIntegrityException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ReferentialIntegrityException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.ReferentialIntegrityException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ReferentialIntegrityException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ReferentialIntegrityException"/>was throw</param>
        </member>
        <member name="M:Nohros.ReferentialIntegrityException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ReferentialIntegrityException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this <see cref="T:Nohros.ReferentialIntegrityException"/> to be
            throw.
            </param>
        </member>
        <member name="M:Nohros.ReferentialIntegrityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the <see cref="T:Nohros.ReferentialIntegrityException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.ReferentialIntegrityException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ReferentialIntegrityException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ReferentialIntegrityException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.ReferentialIntegrityException"/>to be throw.</param>
        </member>
        <member name="T:Nohros.Data.AbstractStateDao">
            <summary>
            Provides an skeletal implementation of the
            <see cref="T:Nohros.Data.IStateDao"/> interface to minimize the effort required
            to implement this interface.
            </summary>
            <remarks>
            To implement a <see cref="T:Nohros.Data.IStateDao"/>, its required only to
            extend this class and provide an implementation for the
            <see cref="M:Nohros.Data.AbstractStateDao.StateByName(System.String,System.String@)"/> and <see cref="!:SetState()"/>]
            methods.
            </remarks>
        </member>
        <member name="T:Nohros.Data.IStateDao">
            <summary>
            Represents a state data access object which is a provide access to a
            collection of key/value pairs representing states of something.
            </summary>
        </member>
        <member name="M:Nohros.Data.IStateDao.StateByName(System.String)">
            <summary>
            Gets the state that is associate with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <returns>
            The state that is associated with the given <paramref name="name"/>.
            </returns>
            <exception cref="T:Nohros.NoResultException">
            There is no state associated with the given <paramref name="name"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateDao.StateByName(System.String,System.String@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <c>null</c> if  <paramref name="name"/>
            is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IStateDao.StateByName(System.String,System.Int32@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to an signed 32-bit integer.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <c>-1</c> if  <paramref name="name"/>
            is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an signed 32-bit integer value.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateDao.StateByName(System.String,System.Guid@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to a <see cref="T:System.Guid"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <see cref="F:System.Guid.Empty"/>
            <paramref name="name"/> is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an <see cref="T:System.Guid"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateDao.StateByName(System.String,System.DateTime@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <see cref="F:System.DateTime.MinValue"/> if
            <paramref name="name"/> is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an <see cref="T:System.DateTime"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateDao.StateByName(System.String,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <see cref="F:System.DateTime.MinValue"/> if
            <paramref name="name"/> is not found.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the
            style elements that can be present in the "state" for the parse
            operation to succeed, and that defines how to interpret the parsed
            date in relation to the current time zone or the current date. A
            typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an <see cref="T:System.DateTime"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateDao.SetState(System.String,System.String)">
            <summary>
            Associates the state represented by <paramref name="state"/> with the
            given <paramref name="name"/>.
            </summary>
            <param name="name">
            A string that can be used to identify the state within a state
            repository.
            </param>
            <param name="state">
            The state to be persisted.
            </param>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.StateByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.SetState(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.StateByName(System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.StateByName(System.String,System.Int32@)">
            <remarks>
            This method uses the <see cref="M:System.Int32.Parse(System.String)"/> method to convert
            the "state" into its corresponding signed 32-bit integer. Exceptions
            throwed by this method will be propagated to the caller.
            </remarks>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.StateByName(System.String,System.Guid@)">
            <remarks>
            This method uses the <see cref="M:System.Guid.#ctor(System.String)"/> method to convert the
            "state" into its <see cref="T:System.Guid"/>. Exceptions throwed by this method
            will be propagated to the caller.
            </remarks>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.StateByName(System.String,System.DateTime@)">
            <remarks>
            This method uses the <see cref="M:System.DateTime.Parse(System.String)"/> method to
            convert the "state" into its <see cref="T:System.Guid"/>. Exceptions throwed by
            this method will be propagated to the caller.
            </remarks>
        </member>
        <member name="M:Nohros.Data.AbstractStateDao.StateByName(System.String,System.Globalization.DateTimeStyles,System.DateTime@)">
            <remarks>
            This method uses the
            <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/>
            method to convert the "state" into its <see cref="T:System.Guid"/>. Exceptions
            throwed by this method will be propagated to the caller.
            </remarks>
        </member>
        <member name="T:Nohros.Data.QueryMapper`1">
            <summary>
            The default implementation of the <see cref="T:Nohros.Data.IQueryMapper`1"/> interface.
            </summary>
            <typeparam name="T">
            The type of the class to be mapped.
            </typeparam>
            <remarks>
            The <see cref="T:Nohros.Data.QueryMapper`1"/> maps the result of a
            <see cref="T:System.Data.IDataReader"/> using a supplied
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> and dispose the objects associated
            with the <see cref="T:System.Data.IDataReader"/> when the <see cref="T:Nohros.Data.QueryMapper`1"/>
            is disposed.
            </remarks>
        </member>
        <member name="T:Nohros.Data.IQueryMapper`1">
            <summary>
            A class that maps the fields of a <see cref="T:System.Data.IDataReader"/> to the
            properties of an instance of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type that should be mapped.
            </typeparam>
            <remarks>
            The <see cref="T:Nohros.Data.IQueryMapper`1"/> class is similar to the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> class by is intended
            to be used to map the result of a query once, while
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> is intended to map the result of a
            query multiple times.
            <para>
            The Map method overloads of the <see cref="T:Nohros.Data.IQueryMapper`1"/> class
            does not accept a <see cref="T:System.Data.IDataReader"/>, so it must be set in the
            object constructor. This prevents the <see cref="T:System.Data.IDataReader"/> to be
            disposed by the method that creates it. For that reason the
            <see cref="T:Nohros.Data.IQueryMapper`1"/> should implements the
            <see cref="T:System.IDisposable"/> interface and should dispose the associated
            <see cref="T:System.Data.IDataReader"/> when its <see cref="M:System.IDisposable.Dispose"/>
            method is called.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryMapper`1.Map">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the current row of the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryMapper`1.Map(`0@)">
            <summary>
            maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <param name="t">
            When this method returns contains a object of type
            <typeparamref name="T"/> associated the data readed from the current
            row of the associated <see cref="T:System.Data.IDataReader"/>.
            </param>
            <returns>
            <c>true</c> when the map operation the data returned from the database
            was successfully mapped to a object of type <typeparamref name="T"/>;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            When the associated <see cref="T:System.Data.IDataReader"/> does not contain any
            data, <c>false</c> will be returned to indicate that the expected
            result does not exists.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryMapper`1.Map(System.Action{`0})">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the next row of the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
            <remarks>
            The <see cref="M:System.Data.IDataReader.Read"/> method will be called to fetch the
            next record.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryMapper`1.MapCurrent">
            <summary>
            Maps a element of a query result to a object of type using the current
            record of the <see cref="T:System.Data.IDataReader"/>.
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the current row of the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
            <remarks>
            The associated <see cref="T:System.Data.IDataReader"/> should be positioned at a
            valid record.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryMapper`1.Map(System.Boolean)">
            <summary>
            Maps a element of a query result to a collection of object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A collection of objects of type <typeparamref name="T"/> containing
            the data readed from the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryMapper`1.Map(System.Boolean,System.Action{`0})">
            <summary>
            Maps a element of a query result to a collection of object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A collection of objects of type <typeparamref name="T"/> containing
            the data readed from the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.#ctor(Nohros.Data.IDataReaderMapper{`0},System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataReaderReader"/>
            </summary>
            <param name="mapper">
            A <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that should be used to map
            the data containined into the <paramref name="reader"/> to a
            object or a collection of objects of the type <typeparamref name="T"/>.
            </param>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> to fetch the data.
            </param>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.#ctor(Nohros.Data.IDataReaderMapper{`0},System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataReaderReader"/>
            </summary>
            <param name="mapper">
            A <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that should be used to map
            the data containined into the <paramref name="reader"/> to a
            object or a collection of objects of the type <typeparamref name="T"/>.
            </param>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> to fetch the data.
            </param>
            <param name="disposables">
            A collection of <see cref="T:System.IDisposable"/> objects related with the
            given <paramref name="reader"/> that needs to be disposed as the same
            time as the <see cref="T:Nohros.Data.QueryMapper`1"/> object.
            </param>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.Map">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the current row of the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.Map(`0@)">
            <summary>
            maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <param name="t">
            When this method returns contains a object of type
            <typeparamref name="T"/> associated the data readed from the current
            row of the associated <see cref="T:System.Data.IDataReader"/>.
            </param>
            <returns>
            <c>true</c> when the map operation the data returned from the database
            was successfully mapped to a object of type <typeparamref name="T"/>;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            When the associated <see cref="T:System.Data.IDataReader"/> does not contain any
            data, <c>false</c> will be returned to indicate that the expected
            result does not exists.
            </remarks>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.Map(System.Action{`0})">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the next row of the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
            <remarks>
            The <see cref="M:System.Data.IDataReader.Read"/> method will be called to fetch the
            next record.
            </remarks>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.MapCurrent">
            <summary>
            Maps a element of a query result to a object of type using the current
            record of the <see cref="T:System.Data.IDataReader"/>.
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the current row of the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
            <remarks>
            The associated <see cref="T:System.Data.IDataReader"/> should be positioned at a
            valid record.
            </remarks>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.Map(System.Boolean)">
            <summary>
            Maps a element of a query result to a collection of object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A collection of objects of type <typeparamref name="T"/> containing
            the data readed from the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.Map(System.Boolean,System.Action{`0})">
            <summary>
            Maps a element of a query result to a collection of object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A collection of objects of type <typeparamref name="T"/> containing
            the data readed from the associated <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.QueryMapper`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Configuration.DataServerConfigCollection">
            <summary>
            Represents a collection of <see cref="T:Nohros.Configuration.DataServerConfig"/> elements.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.Builders.ConfigurationBuilder">
            <summary>
            An implementation of the <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/>
            class that builds instance of the <see cref="T:Nohros.Configuration.Configuration"/> class.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1">
            <summary>
            A class that can be used to incrementally build instances of the
            <see cref="T:Nohros.Configuration.Configuration"/> class.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IConfigurationBuilder`1">
            <summary>
            A builder for the <see cref="T:Nohros.Configuration.IConfiguration"/> class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationBuilder`1.Build">
            <summary>
            Builds an instance of <typeparamref name="T"/> using the configured
            data.
            </summary>
            <returns>
            The newly created instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationBuilder`1.SetRepositories(Nohros.Configuration.RepositoriesNode)">
            <summary>
            Sets the <see cref="T:Nohros.Configuration.RepositoriesNode"/> object for
            the <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/>
            </summary>
            <param name="repositories">The <see cref="T:Nohros.Configuration.RepositoriesNode"/>
            to set.</param>
            <returns>A <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/> object that
            associates <paramref name="repositories"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationBuilder`1.SetProviders(Nohros.Configuration.ProvidersNode)">
            <summary>
            Sets the <see cref="T:Nohros.Configuration.ProvidersNode"/> object for
            the <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/>
            </summary>
            <param name="providers">The <see cref="T:Nohros.Configuration.ProvidersNode"/>
            to set.</param>
            <returns>
            A <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/> object that
            associates <paramref name="providers"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationBuilder`1.SetXmlElements(Nohros.Configuration.XmlElementsNode)">
            <summary>
            Sets the <see cref="T:Nohros.Configuration.XmlElementsNode"/> object for
            the <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/>
            </summary>
            <param name="xml_elements">The <see cref="T:Nohros.Configuration.XmlElementsNode"/>
            to set.</param>
            <returns>A <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/> object that
            associates <paramref name="xml_elements"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationBuilder`1.SetLogLevel(Nohros.Logging.LogLevel)">
            <summary>
            Sets the <see cref="P:Nohros.Configuration.IConfigurationBuilder`1.LogLevel"/> object for
            the <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/>
            </summary>
            <param name="level">The <see cref="P:Nohros.Configuration.IConfigurationBuilder`1.LogLevel"/>
            to set.</param>
            <returns>A <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/> object that
            associates <paramref name="level"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationBuilder`1.SetProperties(Nohros.Collections.DictionaryValue)">
            <summary>
            Sets the <see cref="T:Nohros.Collections.DictionaryValue"/> object for
            the <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/>
            </summary>
            <param name="properties">The <see cref="T:Nohros.Collections.DictionaryValue"/>
            to set.</param>
            <returns>A <see cref="!:AbstractConfigurationBuilder&lt;T&gt;"/> object that
            associates <paramref name="properties"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationBuilder`1.Properties">
            <summary>
            Gets the configured properties.
            </summary>
            <value>The configured properties or <c>null</c> if no
            properties are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationBuilder`1.Providers">
            <summary>
            Gets the configured providers.
            </summary>
            <value>The configured providers or <c>null</c> if no
            providers are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationBuilder`1.Repositories">
            <summary>
            Gets the configured repositories.
            </summary>
            <value>The configured repositories or <c>null</c> if no
            repositories are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationBuilder`1.XmlElements">
            <summary>
            Gets the configured xml elements.
            </summary>
            <value>The configured xml elements or <c>null</c> if no
            xml elements are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationBuilder`1.LogLevel">
            <summary>
            Gets the configured log level.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.Build">
            <summary>
            Builds an instance of <typeparamref name="T"/> using the configured
            data.
            </summary>
            <returns>
            The newly created instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.SetRepositories(Nohros.Configuration.RepositoriesNode)">
            <summary>
            Sets the <see cref="T:Nohros.Configuration.RepositoriesNode"/> object for
            the <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/>
            </summary>
            <param name="repositories">The <see cref="T:Nohros.Configuration.RepositoriesNode"/>
            to set.</param>
            <returns>A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object that
            associates <paramref name="repositories"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.SetProviders(Nohros.Configuration.ProvidersNode)">
            <summary>
            Sets the <see cref="T:Nohros.Configuration.ProvidersNode"/> object for
            the <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/>
            </summary>
            <param name="providers">The <see cref="T:Nohros.Configuration.ProvidersNode"/>
            to set.</param>
            <returns>
            A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object that
            associates <paramref name="providers"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.SetXmlElements(Nohros.Configuration.XmlElementsNode)">
            <summary>
            Sets the <see cref="T:Nohros.Configuration.XmlElementsNode"/> object for
            the <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/>
            </summary>
            <param name="xml_elements">The <see cref="T:Nohros.Configuration.XmlElementsNode"/>
            to set.</param>
            <returns>A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object that
            associates <paramref name="xml_elements"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.SetLogLevel(Nohros.Logging.LogLevel)">
            <summary>
            Sets the <see cref="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.LogLevel"/> object for
            the <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/>
            </summary>
            <param name="level">The <see cref="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.LogLevel"/>
            to set.</param>
            <returns>A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object that
            associates <paramref name="level"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.SetProperties(Nohros.Collections.DictionaryValue)">
            <summary>
            Sets the <see cref="T:Nohros.Collections.DictionaryValue"/> object for
            the <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/>
            </summary>
            <param name="properties">The <see cref="T:Nohros.Collections.DictionaryValue"/>
            to set.</param>
            <returns>A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object that
            associates <paramref name="properties"/> with the builded
            <see cref="T:Nohros.Configuration.IConfiguration"/>.</returns>
        </member>
        <member name="M:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.CopyFrom(Nohros.Configuration.Builders.AbstractConfigurationBuilder{`0})">
            <summary>
            Copies the configured data from the specified
            <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object.
            </summary>
            <param name="builder">
            A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object that contains the
            configuration data to be copied.
            </param>
            <remarks>
            A <see cref="T:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1"/> object configured with the
            data copied from <paramref name="builder"/>.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.Properties">
            <summary>
            Gets the configured properties.
            </summary>
            <value>The configured properties or <c>null</c> if no
            properties are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.Providers">
            <summary>
            Gets the configured providers.
            </summary>
            <value>The configured providers or <c>null</c> if no
            providers are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.Repositories">
            <summary>
            Gets the configured repositories.
            </summary>
            <value>The configured repositories or <c>null</c> if no
            repositories are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.XmlElements">
            <summary>
            Gets the configured xml elements.
            </summary>
            <value>The configured xml elements or <c>null</c> if no
            xml elements are configured.</value>
        </member>
        <member name="P:Nohros.Configuration.Builders.AbstractConfigurationBuilder`1.LogLevel">
            <summary>
            Gets the configured log level.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.ReplicaNode">
            <summary>
            Defines a collection of options that should be replaced in a replica.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.ReplicaNode.Options">
            <summary>
            Gets the collection of options that should be added/replaced in a
            replica.
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.ThreadPoolExecutor">
            <summary>
            An <see cref="T:Nohros.Concurrent.IExecutor"/> that executes each submitted task using
            a thread from <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.IExecutor">
            <summary>
            An object that executes submitted <see cref="T:System.EventHandler`1"/>
            tasks. 
            </summary>
            <remarks>
            This interface provides a way of decoupling task submission from
            the mechanics of how each task will be run, including details of thread
            use, scheduling, etc. An <see cref="!:IExecutor&lt;T&gt;"/> is normally used
            instead of explicity creating threads. For example, rather than invoking
            <c>new Thread(SomeDelegate).Start()</c> for each of a set of tasksm you
            might use:
            <example>
            <code>
            IExecutor executor = AnExecutor;
            executor.Execute(SomeDelegate);
            executor.Execute(SomeOtherDelegate);
            ...
            </code>
            </example>
            However, the <see cref="!:IExecutor&lt;T&gt;"/> interface does not stricly
            require that execution be asynchronous. In the simplest case, an executor
            can run the submitted task immediately in the caller's thread (default
            way as the delegates are executed).
            <example>
            <code>
            class DirectExecutor :IExecutor {
              public void Execute(RunnableDelegate{T} runnable, ExecutorState{T} state) {
                runnable(state);
              }
            }
            </code>
            </example>
            More typically, tasks are executed in some thread other than the caller's
            thread. The executor below spawns a new thread:
            <example>
            <code>
            class ThreadPerTaskExecutor : IExecutor{T} {
              public void Execute(RunnableDelegate{T} runnable, ExecutorState{T} state) {
                SerialExecutorState{T} serial_state =
                  new SerialExecutorState(runnable, state);
            
                Thread thread = new Thread(
                  new ParameterizedThreadStart(ThreadStart);
                );
                thread.Start(serial_state)
              }
            
              static void ThreadStart(object obj) {
                SerialExecutorState{T} serial_state = obj as SerialExecutorState{T};
                serial_state.Runnable(serial_state.State);
              }
            }
            </code>
            </example>
            Many <see cref="!:IExecutor&lt;T&gt;"/> implementations impose some sort of
            limitation on how and when tasks are scheduled. The executor below
            serializes the submission of tasks to a second executor, illustrating
            a composite executor.
            <example>
            <code>
              Queue{SerialExecutorState{T}} tasks_ = Queue{SerialExecutorState{T}}();
              IExecutor executor_;
              SerialExecutorState{T} active_;
            
              public SerialExecutor(IExecutor{T} executor) {
                executor_ = executor;
              }
            
              public void Execute(RunnableDelegate{T} runnable, ExecutorState{T} state) {
                SerialExecutorState{T} serial_state =
                  new SerialExecutorState(runnable, state);
                tasks_.Enqueue(serial_state);
            
                if(active == null) {
                  ScheduleNext();
                }
              }
              
              public ScheduleNext() {
                if(tasks_.Count &gt; 0) {
                  SerialExecutorState{T} serial_state = tasks_.Dequeue();
                  serial_state.Runnable(serial_state.State);
                  ScheduleNext();
                }
              }
            }
            </code>
            </example>
            The <see cref="!:IExecutor&lt;T&gt;"/> implementations provided in this assembly
            implement <see cref="!:IExecutorService&lt;T&gt;"/>, which is a more extensive
            interface. The <see cref="T:Nohros.Concurrent.ThreadPoolExecutor"/> class uses the built-in
            thread pool to run tasks. The <see cref="T:Nohros.Concurrent.Executors"/> class provides
            convenient factory methods for these executors.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.IExecutor.Execute(Nohros.RunnableDelegate)">
            <summary>
            Executes a given command at some time in the future.
            </summary>
            <param name="runnable">The runnable task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runnable"/> is
            <c>null</c>.</exception>
            <remarks>The command may execute in a new thread, in a pooled thread,
            or in the calling thread, at the discretion of the
            <see cref="T:Nohros.Concurrent.IExecutor"/> implementation.</remarks>
        </member>
        <member name="M:Nohros.Concurrent.ThreadPoolExecutor.#ctor">
            <summary>
            initializes a new instance of the <see cref="!:ThreadPoolExecutor&lt;T&gt;"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.ThreadPoolExecutor.Execute(Nohros.RunnableDelegate)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Concurrent.ExecutionList">
            <summary>
            A list of delegates that guarantess that every delegate that is added
            will be executed after <see cref="M:Nohros.Concurrent.ExecutionList.Execute"/> is called. Any delegate
            added after the call to <see cref="M:Nohros.Concurrent.ExecutionList.Execute"/> is still guarantee to
            execute. The delegates will be executed in the same order that they are
            added.
            </summary>
            <remarks>
            In many cases, a notification source can simply call "delegate()" to
            execute all the target handler methods associated with a
            <see lang="MulticastDelegate"/> delegate object. However, the
            <see lang="MulticastDelegate"/> error handling makes awereness of the
            sequential notification critical. If one subscriber throws an exception
            then later subscribers in the chain is not executed.
            <para>To avoid this problem, so that all subscribers execute
            regardless of the behavior of the earlier subscribers, you must
            manually enumerate through the list of subscribers and call them
            individually. This class may be used to avoid doing it manually.
            </para>
            <para>
            We just log the exceptions that are throwed by the subscribers. The
            <see cref="T:Nohros.Logging.MustLogger"/> is used to log the exceptions, by default this
            logger logs to nothing, clients should configure the logger that they
            want to use.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.ExecutionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:ExecutionList&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.ExecutionList.Add(Nohros.RunnableDelegate,Nohros.Concurrent.IExecutor)">
            <summary>
            Adds the <see cref="T:System.EventHandler`1"/> to the list of
            listeners to execute. If execution has already begun, the listener is
            executed immediately.
            </summary>
            <param name="runnable"></param>
            <param name="executor"></param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="runnable"/> or <paramref name="executor"/> or are
            <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Concurrent.ExecutionList.Execute">
            <summary>
            Runs this execution list, executing all existing pairs in the order
            they were added.
            </summary>
            <remarks>
            Note that listeners added after this point may be executed before
            those previously added, and note that execution order of all listener
             is ultimately chosen by the implementations of the supplied executors.
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.Futures">
            <summary>
            Static utility methods pertaining to the <see cref="T:Nohros.Concurrent.IFuture`1"/>
            interface.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.Futures.ImmediateFuture``1(``0)">
            <summary>
            Creates a <see cref="T:Nohros.Concurrent.IFuture`1"/> which has its value set
            immediately upon construction.
            </summary>
            <param name="value">The value that the returned future shoud hold.</param>
            <returns>A <see cref="T:Nohros.Concurrent.IFuture`1"/> whose value is
            <paramref name="value"/> and is in the completed state.</returns>
            <remarks>
            The getters just return the value. This
            <see cref="T:Nohros.Concurrent.IFuture`1"/> can't be cancelled or timed out and its
            <see cref="!:IFuture&lt;T&gt;.IsCompleted"/> property always returns
            <c>true</c>.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Futures.ImmediateFailedFuture``1(System.Exception)">
            <summary>
            Creates a <see cref="T:Nohros.Concurrent.IFuture`1"/> which has an exception set
            immediately upon construction.
            <c>true</c>.
            </summary>
            <param name="exception">The exception that the returned future shoud
            hold.</param>
            <returns>A <see cref="T:Nohros.Concurrent.IFuture`1"/> whose has failed with exception
            <paramref name="exception"/> and is in the completed state.</returns>
            <remarks>
            The returned <see cref="T:Nohros.Concurrent.IFuture`1"/> object can't be cancelled or
            and its <see cref="!:IFuture&lt;T&gt;.IsCompleted"/> property always returns
            <c>true</c>.
            <para>
            Calling "get(...)" will immediately throw the provided exception
            wrapped in an <see cref="T:Nohros.ExecutionException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Futures.ImmediateCallableFuture``1(Nohros.CallableDelegate{``0})">
            <summary>
            Creates a <see cref="T:Nohros.Concurrent.IFuture`1"/> which has its value set to the
            value returned by the specified <paramref name="callable"/> immediately
            upon construction.
            </summary>
            <param name="callable">
            The callable task which returning value should be assigned to the
            returned future.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callable"/> is null
            </exception>
            <remarks>
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.AtomicLongArray">
            <summary>
            A long array in which elements may be updated atomically.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.AtomicLong"/> class using
            the specified array length.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.AtomicLong"/> class using
            the same length as, and all elements copied from, the given array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.Exchange(System.Int32,System.Int64)">
            <summary>
            Set the value of the element at index i to the specified value and
            returns the original value, as an atomic operation.
            </summary>
            <param name="i">The index.</param>
            <param name="delta">The value to add.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.Increment(System.Int32)">
            <summary>
            Atomically increment by one the value of the element at index i.
            </summary>
            <param name="i">The index of the element to increment.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.Decrement(System.Int32)">
            <summary>
            Atomically decrement by one the value of the element at index i.
            </summary>
            <param name="i">The index of the element to decrement.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.op_Explicit(System.Int64[])~Nohros.Concurrent.AtomicLongArray">
            <summary>
            Explicit converts the specified <c>long[]</c> array to an
            <see cref="T:Nohros.Concurrent.AtomicLongArray"/>.
            </summary>
            <param name="array">The <c>long[]</c> value to be converted.</param>
            <returns>A new <see cref="!:AtomiclongArray"/> class that contains
            the elements copied from the specified <c>long[]</c> array.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLongArray.op_Explicit(Nohros.Concurrent.AtomicLongArray)~System.Int64[]">
            <summary>
            Explicit converts the specified <see cref="T:Nohros.Concurrent.AtomicLongArray"/> to
            an <c>long[]</c> array.
            </summary>
            <param name="value">The <see cref="T:Nohros.Concurrent.AtomicLongArray"/> object that
            will be convertet to a long array.</param>
            <returns>A <c>long</c> array contained the elements copied from the
            specified <see cref="T:Nohros.Concurrent.AtomicLongArray"/> object.</returns>
            <remarks>This operation is not atomic. If a element value changes while
            this method is executing, the returned array could be diferrent from
            the current internal array of the specified <paramref name="array"/>.
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.AtomicLongArray.Item(System.Int32)">
            <summary>
            Gets or sets the value at index i, as an atomic operation.
            </summary>
            <param name="i"></param>
            <value>The value at index i.</value>
        </member>
        <member name="P:Nohros.Concurrent.AtomicLongArray.Length">
            <summary>
            Gets a 32-bit integer that represents the total number of elements in
            the array.
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.AbstractFuture`1">
            <summary>
            An abstract implementation of <see cref="T:Nohros.Concurrent.IFuture`1"/> interface.
            </summary>
            <remarks>
            This class implements all methods in <see cref="T:Nohros.Concurrent.IFuture`1"/>. Subclasses
            should provide a way to set the result of the computation through the
            protected methods <see cref="M:Nohros.Concurrent.AbstractFuture`1.Set(`0,System.Boolean)"/> and
            <see cref="M:Nohros.Concurrent.AbstractFuture`1.SetException(System.Exception,System.Boolean)"/>. Subclasses may also override
            <see cref="M:Nohros.Concurrent.AbstractFuture`1.InterruptTask"/>, which will be invoked automatically if a
            call to <see cref="M:Nohros.Concurrent.AbstractFuture`1.Cancel(System.Boolean)"/> succeeds in canceling the future.
            <para>
            The state changing methods all returns a boolean indicating success or
            failure in changing the future's state. Valid states are running,
            completed, failed or cancelled.
            </para>
            <para>
            This class uses an <see cref="T:Nohros.Concurrent.ExecutionList"/> to guarantee that all
            registered listeners will be executed, either when the future finishes
            or, for listeners are added after the future completes., immediatelly.
            <see cref="T:Nohros.RunnableDelegate"/> - <see cref="T:Nohros.Concurrent.IExecutor"/> pairs are stored
            in the execution list but are not necessarily executed in the order in
            which they are added (If a listener is added after the
            <see cref="T:Nohros.Concurrent.IFuture`1"/> is complete, it will be executed immediately,
            even if earlier listeners have not been executed. Additionally, executors
            need not guarantee FIFO execution, or different listeners may run in
            different executors).
            </para>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nohros.Concurrent.IFuture`1">
            <summary>
            A <see cref="T:Nohros.Concurrent.IFuture`1"/> represents the result of an asynchronous
            computation.
            </summary>
            <remarks>
            <para>
            <para>Applications that perform many tasks simultaneously, yet remain
            responsive to user interaction, often require a design that uses multiple
            threads. The <see cref="N:System.Threading"/> namespace provides all the
            tools nescessary to create high-performance multithreaded applications,
            but using these tools effectivelly requires significant experience with
            multithreaded software engineering. For realtive simple multithreaded
            applications the <see cref="T:System.ComponentModel.BackgroundWorker"/> component provides
            a straightforward solution. <see cref="T:Nohros.Concurrent.IFuture`1"/> behaves like the
            <see cref="T:System.ComponentModel.BackgroundWorker"/>, but they allow more flexible structuring
            and may have quite different properties.
            </para>
            <see cref="T:Nohros.Concurrent.IFuture`1"/> is some ways resembles the creation of a new
            <see cref="T:System.Threading.Thread"/> or <see cref="T:System.Threading.ThreadPool"/> work item, but with a
            higher level of abstraction.
            </para>
            Methods are provided to check if the computation is complete,
            to wait for its completion, and to retrieve the result of the computation.
            The result can be retrieved using the methods
            <see cref="!:Get(long, TimeUnit, out T)"/> or <see cref="!:Get(out T)"/> when
            the computation has completed, blocking if necessary until is ready.
            Results can also be retrieved through the use of callbacks.
            <see cref="T:Nohros.Concurrent.IFuture`1"/> allows you to register callbacks to be
            executed once the computation is complete, or if the computation is
            already complete, immediately. Each callback has an associated executor,
            and it is invoked using this executor.
            <para>
            Cancellation is performed by the <see cref="M:Nohros.Concurrent.IFuture`1.Cancel(System.Boolean,System.Boolean)"/> method. Additional
            methods are provided to determine if the task completed normally or was
            cancelled. Once a computation has completed, the computation cannot be
            cancelled. If you would like to use a <see cref="T:Nohros.Concurrent.IFuture`1"/> for the
            sake or cancellability but not provide a usable result, you can declare
            types for <see cref="T:Nohros.Concurrent.IFuture`1"/> and return <c>null</c> as a
            result of the underlying task.
            </para>
            <para>
            
            </para>
            </remarks>
            <typeparamref name="T"/> The result type returned by this future's
            <see cref="M:Nohros.Concurrent.IFuture`1.Cancel(System.Boolean,System.Boolean)"/> method.
        </member>
        <member name="M:Nohros.Concurrent.IFuture`1.Cancel(System.Boolean,System.Boolean)">
            <summary>
            Attempts to cancel execution of this task.
            </summary>
            <param name="may_interrupt_if_running"><c>true</c> if the thread
            executing this task should be interrupted; otherwise, in-progress
            tasks are allowed to complete.</param>
            <returns><c>false</c> if the task could not be cancelled, typically
            because it has already completed normally; otherwise, true.</returns>
            <remarks>
            This attempt will fail if the task has already completed, has already
            been cancelled, or could not be cancelled for some reason. If
            successfull, and this task has not started when <c>cancel</c> is
            called, this task should never run. If the task has already started,
            then the <see cref="!:may_interrupt_if_running"/> parameter determines
            whether the thread executing this task should be interrupted in an
            attempt to stop the task.
            <para>
            After this method returns, subsequent calls to
            <see cref="P:System.IAsyncResult.IsCompleted"/> will always return <c>true</c>.
            Subsequent calls to <see cref="P:Nohros.Concurrent.IFuture`1.IsCancelled"/> will alwyas return
            <c>true</c> if this method returned <c>true</c>.
            </para>
            </remarks>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.IFuture`1.Get">
            <summary>
            Waits if nescessary for the computation to complete and then retrieves
            its result.
            </summary>
            <returns>
            The computed result.
            </returns>
            <exception cref="T:Nohros.ExecutionException">
            If the computation threw an exception.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the future computation was canceled.
            </exception>
        </member>
        <member name="M:Nohros.Concurrent.IFuture`1.Get(System.Int64,Nohros.TimeUnit)">
            <summary>
            Waits if necessary for at most the given time for the computation to
            complete, and then retrieves its result, if available.
            </summary>
            <param name="timeout">
            The maximum time to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> to wait
            indefinitely.
            </param>
            <param name="unit">
            The time unit of the timeout argument.
            </param>
            <returns>
            The result of the computation.
            </returns>
            <exception cref="T:Nohros.ExecutionException">
            If the computation threw an exception.
            </exception>
            <exception cref="T:System.TimeoutException">
            If the timer expires.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the future computation was canceled.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1, which
            represents an infinite time-out.
            </exception>
            <remarks>
            If <paramref name="timeout"/> is zero the method does not block. It
            tests the state of the future and returns imediatelly.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.IFuture`1.TryGet(System.Int64,Nohros.TimeUnit,`0@)">
            <summary>
            Waits if necessary for at most the given time for the computation to
            complete, and then retrieves its result, if available.
            </summary>
            <param name="timeout">The maximum time to wait</param>
            <param name="unit">The time unit of the timeout argument.</param>
            <param name="result">
            The result of the computation, or the default value for
            <typeparamref name="T"/> if the wait timed out.
            </param>
            <returns>
            <c>false</c> if the timer expires, <c>true</c> if the
            computation has completed succesfully.
            </returns>
            <exception cref="T:Nohros.ExecutionException">
            If the computation threw an exception.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the future computation was canceled.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1, which
            represents an infinite time-out.
            </exception>
            <remarks>
            If <paramref name="timeout"/> is zero the method does not block. It
            tests the state of the future and returns imediatelly.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.IFuture`1.AddListener(Nohros.RunnableDelegate,Nohros.Concurrent.IExecutor)">
            <summary>
            Register a listener to be executed on the given executor.
            </summary>
            <param name="listener">
            The listener to run when computation is complete.</param>
            <param name="executor">
            The executor to run when the listener in.
            </param>
            <exception cref="T:System.ArgumentNullException"> if the
            <paramref name="listener"/> or if <paramref name="executor"/>
            was null.</exception>
            <remarks>
            The listener will run when the <see cref="T:Nohros.Concurrent.IFuture`1"/>'s computation
            is complete or, if the computation is already complete, immediately.
            <para>
            There is no guaranteed ordering of execution of listeners, but any
            listener added through this method is guaranteed to be called once the
            computation is complete.
            </para>
            <para>
            Exceptions thrown by a listener will be propagated up to the executor.
            Any exception thrown during
            <see cref="M:Nohros.Concurrent.IExecutor.Execute(Nohros.RunnableDelegate)"/> will be caught
            and logged.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.IFuture`1.IsCancelled">
            <summary>
            Gets <c>true</c> if this task was cancelled before it completed
            normally.
            </summary>
            <value><c>true</c> if this task was cancelled before it completed.
            </value>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.AbstractFuture`1"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.AbstractFuture`1"/>
            class using the specified asynchrnous state.
            </summary>
            <param name="async_state">
            An object representing data to be used bt the future.
            </param>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.Get(System.Int64,Nohros.TimeUnit)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.TryGet(System.Int64,Nohros.TimeUnit,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.Cancel(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.Set(`0,System.Boolean)">
            <summary>
            Subclasses should invoke this method to set the result of the
            computation to <see cref="!:value"/>. This will set the state of the
            future to COMPLETED and invoke the listeners if the state was
            successfully changed.
            </summary>
            <param name="value">
            The value that was the result of the task.
            </param>
            <param name="synchronously">
            A indication of whether the operation completed synchronously.
            </param>
            <returns>
            <c>true</c> if the state was succesfully changed.
            </returns>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.SetException(System.Exception,System.Boolean)">
            <summary>
            Subclasses should invoke this method to set the result of the
            computation to an error. This will set the state of the future to
            COMPLETED and invoke the listeners if the state was successfully
            changed.
            </summary>
            <param name="exception">
            The exception that the task failed with.
            </param>
            <param name="synchronously">
            A indication of whether the operation completed synchronously.
            </param>
            <returns>
            <c>true</c> if the state was successfully changed.
            </returns>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.Cancel(System.Boolean)">
            <summary>
            Transition to the CANCELED state.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.GetValue">
            <summary>
            Implemetaion of the actual value retrieval.
            </summary>
            <returns>
            The computed value.
            </returns>
            <exception cref="T:Nohros.ExecutionException"> if the task completed with an
            error.</exception>
            <exception cref="T:System.InvalidOperationException">You try to get the value
            while it is computing (IsCompleted = false).</exception>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.InterruptTask">
            <summary>
            Subclasses can override this method to implement interruption of
            the future's computation.
            </summary>
            <remarks>
            The method is invoked automatically by a successfull call to
            <see cref="M:Nohros.Concurrent.AbstractFuture`1.Cancel(System.Boolean)"/>.
            <para>
            The default implementation does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.AbstractFuture`1.Complete(`0,System.Exception,Nohros.Concurrent.AbstractFuture{`0}.FutureState,System.Boolean)">
            <summary>
            Implementation of completing a task.
            </summary>
            <param name="value">
            The value to set as the result of the computation.
            </param>
            <param name="exception">
            The exception to set as the result of the computation.
            </param>
            <param name="final_state">
            The state to transiton to.
            </param>
            <param name="synchronously">
            A indication of whether the operation completed synchronously.
            </param>
            <remarks>
            Either <see cref="!:value"/> or <see cref="!:exception"/> will be set but
            not both. The <see cref="!:final_state"/> is the state to change to from
            RUNNING. If the state is not in the RUNNING state we return
            <c>false</c> after waiting for the state to be set to a valid final
            state(COMPLETED or CANCELLED).
            </remarks>
            <returns>
            <c>false</c> if the state is not in the RUNNING state; otherwise,
            <c>true</c>.
            </returns>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.AbstractFuture`1.IsCancelled">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Concurrent.AbstractFuture`1.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Concurrent.AbstractFuture`1.FutureState">
            <summary>
            The state of the future computation.
            </summary>
        </member>
        <member name="F:Nohros.Concurrent.AbstractFuture`1.FutureState.Running">
            <summary>
            The future computation is running.
            </summary>
        </member>
        <member name="F:Nohros.Concurrent.AbstractFuture`1.FutureState.Completing">
            <summary>
            The future computation is completing.
            </summary>
        </member>
        <member name="F:Nohros.Concurrent.AbstractFuture`1.FutureState.Completed">
            <summary>
            The future computation is completed.
            </summary>
        </member>
        <member name="F:Nohros.Concurrent.AbstractFuture`1.FutureState.Cancelled">
            <summary>
            The future computation is cancelled.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nohros.Collections.DictionaryValue" -->
        <member name="T:Nohros.Value">
            <summary>
            The <see cref="T:Nohros.Value"/> class is the base of class for values. A
            <see cref="T:Nohros.IValue"/> can be instantiated via Create*Value factory methods,
            or by directly creating instances of the subclasses.
            </summary>
            <seealso cref="T:Nohros.IValue"/>
        </member>
        <member name="T:Nohros.IValue">
            <summary>
            Speficies a recursive data storage intended to storing settings and
            other persistentable data. The concet of <see cref="T:Nohros.IValue"/> was ported
            from the Google Chromium library.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.IValue.GetAsBoolean(System.Boolean@)" -->
        <!-- Badly formed XML comment ignored for member "M:Nohros.IValue.GetAsInteger(System.Int32@)" -->
        <!-- Badly formed XML comment ignored for member "M:Nohros.IValue.GetAsReal(System.Double@)" -->
        <!-- Badly formed XML comment ignored for member "M:Nohros.IValue.GetAsString(System.String@)" -->
        <member name="M:Nohros.IValue.GetAsBoolean">
            <summary>
            This method allow the convenient retrieval of configurations. If the
            current configuration object can be converted into a boolean type, the
            value is returned as a boolean; otherwise this method throws an
            <see cref="!: InvalidCastException"/>.
            </summary>
            <returns>The current <see cref="T:Nohros.Value"/> instance as a boolean.
            </returns>
        </member>
        <member name="M:Nohros.IValue.GetAsInteger">
            <summary>
            This method allow the convenient retrieval of configurations. If the
            current configuration object can be converted into a integer type, the
            value is returned as a integer; otherwise this method throws an
            <see cref="!: InvalidCastException"/>.
            </summary>
            <returns>The current <see cref="T:Nohros.Value"/> instance as a integer.
            </returns>
        </member>
        <member name="M:Nohros.IValue.GetAsReal">
            <summary>
            This method allow the convenient retrieval of configurations. If the
            current configuration object can be converted into a real/decimal type,
            the value is returned as a real/decimal; otherwise this method throws
            an <see cref="!: InvalidCastException"/>.
            </summary>
            <returns>The current <see cref="T:Nohros.Value"/> instance as a real.
            </returns>
        </member>
        <member name="M:Nohros.IValue.GetAsString">
            <summary>
            This method allow the convenient retrieval of configurations. If the
            current configuration object can be converted into a string type, the
            value is returned as a string; otherwise this method throws an
            <see cref="!: InvalidCastException"/>.
            </summary>
            <returns>The current <see cref="T:Nohros.Value"/> instance as a string.
            </returns>
        </member>
        <member name="M:Nohros.IValue.DeepCopy">
            <summary>
            Creates a deep copy of the entire Value tree.
            </summary>
            <returns>A deep copy of the entire value tree.</returns>
            <remarks>This method should only be getting called for null Values; all
            subclasses need to provide their own implementation.</remarks>
        </member>
        <member name="M:Nohros.IValue.Equals(Nohros.IValue)">
            <summary>
            Compares if two Value objects have equal contents.
            </summary>
            <returns>true if this instance_ have equals contents of other.</returns>
            <remarks>This method should only be getting called for null values; all
            subclasses need to provide their own implementation.</remarks>
        </member>
        <member name="M:Nohros.IValue.IsType(Nohros.ValueType)">
            <summary>
            Gets a value indicating whether the current object represents a given
            type or not.
            </summary>
            <returns><c>true</c> if the current object represents a given type.</returns>
        </member>
        <member name="P:Nohros.IValue.ValueType">
            <summary>
            Gets the type of the value stored by the current Value object.
            Each type will be implemented by only one subclass of Value, so it's
            safe to use the ValueType to determine whether you can cast from
            Value to (Implementating Class)[*]. Also, A Value object never changes
            its type after construction.
            </summary>
        </member>
        <member name="M:Nohros.Value.#ctor">
            <summary>
            Initializes a new instance of the Value class.
            </summary>
        </member>
        <member name="M:Nohros.Value.#ctor(Nohros.ValueType)">
            <summary>
            This isn't safe for end-users (they should use the Create*Value()
            static method above), but it's useful for subclasses.
            </summary>
            <param name="type">The type of the Value</param>
        </member>
        <member name="M:Nohros.Value.CreateNullValue">
            <summary>
            Convenience method for creating a <see cref="T:Nohros.IValue"/> object of type
            <see cref="!:ValueType.TYPE_NULL"/> without thinking about which class
            implements it.
            </summary>
            <returns>A <see cref="T:Nohros.IValue"/> object which <see cref="P:Nohros.Value.ValueType"/> is
            equals to <see cref="!:ValueType.TYPE_NULL"/></returns>
        </member>
        <member name="M:Nohros.Value.CreateBooleanValue(System.Boolean)">
            <summary>
            Convenience method for creating a <see cref="T:Nohros.IValue"/> object of type
            <see cref="!:ValueType.TYPE_BOOLEAN"/> without thinking about which class
            implements it.
            </summary>
            <returns>A <see cref="T:Nohros.IValue"/> object which <see cref="P:Nohros.Value.ValueType"/> is
            equals to <see cref="!:ValueType.TYPE_BOOLEAN"/></returns>
        </member>
        <member name="M:Nohros.Value.CreateIntegerValue(System.Int32)">
            <summary>
            Convenience method for creating a <see cref="T:Nohros.IValue"/> object of type
            <see cref="!:ValueType.TYPE_INTEGER"/> without thinking about which class
            implements it.
            </summary>
            <returns>A <see cref="T:Nohros.IValue"/> object which <see cref="P:Nohros.Value.ValueType"/> is
            equals to <see cref="!:ValueType.TYPE_INTEGER"/></returns>
        </member>
        <member name="M:Nohros.Value.CreateRealValue(System.Double)">
            <summary>
            Convenience method for creating a <see cref="T:Nohros.IValue"/> object of type
            <see cref="!:ValueType.TYPE_REAL"/> without thinking about which class
            implements it.
            </summary>
            <returns>A <see cref="T:Nohros.IValue"/> object which <see cref="P:Nohros.Value.ValueType"/> is
            equals to <see cref="!:ValueType.TYPE_REAL"/></returns>
        </member>
        <member name="M:Nohros.Value.CreateStringValue(System.String)">
            <summary>
            Convenience method for creating <see cref="T:Nohros.IValue"/> of type
            <see cref="!:ValueType.TYPE_STRING"/> without thinking about which class
            implements it.
            </summary>
            <returns>A <see cref="T:Nohros.IValue"/> object which <see cref="P:Nohros.Value.ValueType"/> is
            equals to <see cref="!:ValueType.TYPE_STRING"/></returns>
        </member>
        <member name="M:Nohros.Value.CreateGenericValue``1(``0)">
            <summary>
            Convenience method for creating <see cref="T:Nohros.IValue"/> of type
            <see cref="!:ValueType.TYPE_GENERIC"/> without thinking about which
            class implements it.
            </summary>
            <typeparam name="T">The type of the <paramref name="in_value"/>
            parameter.</typeparam>
            <param name="in_value">The underlying <typeparamref name="T"/>value.
            </param>
            <returns>A <see cref="T:Nohros.IValue"/> object which <see cref="P:Nohros.Value.ValueType"/> is
            equals to <see cref="!:ValueType.TYPE_GENERIC"/>.</returns>
        </member>
        <member name="M:Nohros.Value.GetAsBoolean(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsInteger(System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsReal(System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsInteger">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsReal">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.GetAsString">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Value.DeepCopy">
            <summary>
            Creates a deep copy of the entire <see cref="T:Nohros.Value"/> tree.
            </summary>
            <returns>A deep copy of the entire value tree.</returns>
            <remarks>This method should only be getting called for value whose
            type is <see cref="!:ValueType.TYPE_NULL"/>; all
            subclasses need to provide their own implementation.</remarks>
        </member>
        <member name="M:Nohros.Value.Equals(Nohros.IValue)">
            <summary>
            Compares if two <see cref="T:Nohros.Value"/> objects have equal contents.
            </summary>
            <returns><c>true</c> if this instance have equals contents of
            <paramref name="other"/>.</returns>
            <remarks>This method should only be getting called for values
            whose type is <see cref="!:ValueType.TYPE_NULL"/>; all
            subclasses need to provide their own implementation.</remarks>
        </member>
        <member name="M:Nohros.Value.IsType(Nohros.ValueType)">
            <summary>
            Gets a value indicating whether the current object represents a given
            type or not.
            </summary>
            <returns><c>true</c> if the current object represents a given type.
            </returns>
        </member>
        <member name="P:Nohros.Value.ValueType">
            <summary>
            Gets the type of the value stored by the current <see cref="T:Nohros.Value"/>
            object. Each type will be implemented by only one subclass of
            <see cref="T:Nohros.Value"/> Value, so it's safe to use the
            <see cref="P:Nohros.Value.ValueType"/> to determine whether you can cast from
            <see cref="T:Nohros.Value"/> to (Implementating Class)[*]. Also, a
            <see cref="T:Nohros.Value"/> Value object never changes its type after
            construction.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nohros.Collections.IDictionaryValue" -->
        <member name="M:Nohros.Collections.IDictionaryValue.Add(System.String,Nohros.IValue)">
            <summary>
            Adds the specified key and value to the DictionaryValue.
            </summary>
            <param name="path">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null.</param>
        </member>
        <member name="M:Nohros.Collections.IDictionaryValue.HasKey(System.String)">
            <summary>
            Determines whether the <typeparamref name="Nohros.Data.DictionaryValue"/> contains
            the specified key.
            </summary>
            <param name="key">The key to locate in the<typeparamref name="Nohros.Data.DictionaryValue"/></param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an element with the
            specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Collections.IDictionaryValue.Get(System.String,Nohros.IValue@)" -->
        <member name="M:Nohros.Collections.IDictionaryValue.Remove(System.String,Nohros.IValue@)">
            <summary>
            Removes the <typeparamref name="T"/> object with the specified path
            from this dictionary(or one of its child dictionaries, if the path is more that just
            a local key).
            </summary>
            <param name="path">The path of the item to remove</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will contain a
            reference to the removed value or null if the specified path is not found.</param>
            <returns>true if the specified path is found and successfully removed; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.IDictionaryValue.Remove(System.String)">
            <summary>
            Removes the <typeparamref name="T"/> object with the specified path
            from this dictionary(or one of its child dictionaries, if the path is more that just
            a local key).
            </summary>
            <param name="path">The path of the item to remove</param>
            <returns>A reference to the removed value or null if the specified path is not found.</returns>
        </member>
        <member name="P:Nohros.Collections.IDictionaryValue.Item(System.String)">
            <summary>
            Gets or sets the <typeparamref name="T"/> associated with the given path starting
            from this object.
            </summary>
            <param name="path">The path of the value to get or set</param>
            <returns>The value of the last key in the path if it can be resolved successfully; otherwise,
            it will return a null reference.
            </returns>
            <remarks>A path has the form "&lt;key&gt;" or "&lt;key&gt;.&lt;key&gt;.[...]", where "." indexes
            into the next <typeparamref name="Nohros.Data.DictionaryValue"/> down. Obviously,
            "." can't be used within a key, but there are no other restrictions on keys.
            <para>
            If the key at any step of the way doesn't exist, or exists but isn't
            a <typeparamref name="DictionaryValue&lt;T&gt;"/>, a new <typeparamref name="DictionaryValue&lt;T&gt;"/>
            instance will be created and attached to the path in that location.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Collections.IDictionaryValue.Size">
            <summary>
            Gets the number of elements in this dictionary.
            </summary>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.#ctor">
            <summary>
            Initializes a new instance_ of the DictionaryValue class.
            </summary>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.Add(System.String,Nohros.IValue)">
            <summary>
            Adds the specified key and value to the DictionaryValue.
            </summary>
            <param name="path">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null.</param>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.Clear">
            <summary>
            Removes all keys and values from the <typeparamref name="Nohros.Data.DictionaryValue"/>
            </summary>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.HasKey(System.String)">
            <summary>
            Determines whether the <typeparamref name="Nohros.Data.DictionaryValue"/> contains
            the specified key.
            </summary>
            <param name="key">The key to locate in the<typeparamref name="Nohros.Data.DictionaryValue"/></param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an element with the
            specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.SetBoolean(System.String,System.Boolean)">
            <summary>
            Convenience form of <see cref="!:Nohros.Data.DictionaryValue.Set()"/>. This method will
            replace any existing value at that path, even if it has a diferrent type.
            </summary>
            <param name="path">The path to set</param>
            <param name="in_value">The boolean value to set</param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an
            element with the specified key; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.SetInteger(System.String,System.Int32)">
            <summary>
            Convenience form of <see cref="!:Nohros.Data.DictionaryValue.Set()"/>. This method will
            replace any existing value at that path, even if it has a diferrent type.
            </summary>
            <param name="path">The path to set</param>
            <param name="in_value">The integer value to set</param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an
            element with the specified key; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.SetReal(System.String,System.Double)">
            <summary>
            Convenience form of <see cref="!:Nohros.Data.DictionaryValue.Set()"/>. This method will
            replace any existing value at that path, even if it has a diferrent type.
            </summary>
            <param name="path">The path to set</param>
            <param name="in_value">The double value to set</param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an
            element with the specified key; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.SetString(System.String,System.String)">
            <summary>
            Convenience form of <see cref="!:Nohros.Data.DictionaryValue.Set()"/>. This method will
            replace any existing value at that path, even if it has a diferrent type.
            </summary>
            <param name="path">The path to set</param>
            <param name="in_value">The string value to set</param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an
            element with the specified key; otherwise, false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Collections.DictionaryValue.Get(System.String,Nohros.IValue@)" -->
        <member name="M:Nohros.Collections.DictionaryValue.GetBoolean(System.String,System.Boolean@)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.Value"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <remarks>
            The value will be retrieved and the return value will be true if the path is valid
            and the value at the end of the path represents a boolean value.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetInteger(System.String,System.Int32@)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.Value"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <remarks>
            The value will be retrieved and the return value will be true if the path is valid
            and the value at the end of the path represents a integer value.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetReal(System.String,System.Double@)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.Value"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <remarks>
            The value will be retrieved and the return value will be true if the path is valid
            and the value at the end of the path represents a double value.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetString(System.String,System.String@)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.Value"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <remarks>
            The value will be retrieved and the return value will be true if the path is valid
            and the value at the end of the path represents a boolean value.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetDictionary(System.String,Nohros.Collections.DictionaryValue@)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.Value"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <remarks>
            The value will be retrieved and the return value will be true if the path is valid
            and the value at the end of the path represents a <typeparamref name="Nohros.Data.DictionaryValue"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetList(System.String,Nohros.Collections.ListValue@)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.Value"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <remarks>
            The value will be retrieved and the return value will be true if the path is valid
            and the value at the end of the path represents a <typeparamref name="Nohros.Data.ListValue"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetString(System.String)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <returns>A reference to an <typeparamref name="System.String"/> object associated with the
            specified path or null if the specified path is not found.</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetDictionary(System.String)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <returns>A reference to an <typeparamref name="Nohros.Data.DictionaryValue"/> object associated with the
            specified path or null if the specified path is not found.</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.GetList(System.String)">
            <summary>
            This is a convenience form of <see cref="!:Nohros.Data.DictionaryValue.Get()"/>
            </summary>
            <param name="path">The path to get</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will hold
            a reference to an <typeparamref name="Nohros.Data.ListValue"/> object associated with the
            specified path or null if the specified path is not found.</param>
            <returns>A reference to an <typeparamref name="Nohros.Data.ListValue"/> object associated with the
            specified path or null if the specified path is not found.</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.Remove(System.String,Nohros.IValue@)">
            <summary>
            Removes the <typeparamref name="Nohros.Data.Value"/> object with the specified path
            from this dictionary(or one of its child dictionaries, if the path is more that just
            a local key).
            </summary>
            <param name="path">The path of the item to remove</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will contain a
            reference to the removed value or null if the specified path is not found.</param>
            <returns>true if the specified path is found and successfully removed; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.Remove(System.String)">
            <summary>
            Removes the <typeparamref name="Nohros.Data.Value"/> object with the specified path
            from this dictionary(or one of its child dictionaries, if the path is more that just
            a local key).
            </summary>
            <param name="path">The path of the item to remove</param>
            <returns>A reference to the removed value or null if the specified path is not found.</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue.ToArray``1">
            <summary>
            Copies the elements of the <see cref="T:Nohros.Collections.DictionaryValue"/> to a new array.
            </summary>
            <typeparam name="T">The type of elements to copy.</typeparam>
            <returns>An array containing copies of the elements of the <see cref="T:Nohros.Collections.DictionaryValue"/></returns>
            <remarks>Only the elements of the type <typeparamref name="T"/> are copied.
            <para>
            This method is an O(n2) operation, where n is <see cref="P:Nohros.Collections.DictionaryValue.Size"/>
            </para>
            <para>
            ToArray&lt;T&gt; will never return a null reference; however, the returned array
            will contain zero elements if the dictionary contains no elements.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Collections.DictionaryValue.Item(System.String)">
            <summary>
            Gets or sets the <typeparamref name="Nohros.Data.Value"/> associated with the given path starting
            from this object.
            </summary>
            <param name="path">The path of the value to get or set</param>
            <returns>The value of the last key in the path if it can be resolved successfully; otherwise,
            it will return a null reference.
            </returns>
            <remarks>A path has the form "&lt;key&gt;" or "&lt;key&gt;.&lt;key&gt;.[...]", where "." indexes
            into the next <typeparamref name="Nohros.Data.DictionaryValue"/> down. Obviously,
            "." can't be used within a key, but there are no other restrictions on keys.
            <para>
            If the key at any step of the way doesn't exist, or exists but isn't
            a <typeparamref name="Nohros.Data.DictionaryValue"/>, a new <typeparamref name="Nohros.Data.DictionaryValue"/>
            instance will be created and attached to the path in that location.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Collections.DictionaryValue.Size">
            <summary>
            Gets the number of elements in this dictionary.
            </summary>
        </member>
        <member name="T:Nohros.Caching.RemovalCause">
            <summary>
            The reason why a cached entry was removed.
            </summary>
        </member>
        <member name="F:Nohros.Caching.RemovalCause.Explicit">
            <summary>
            The entry was manually removed by the user. This can result from the
            user invoking <see cref="!:Cache.Remove"/>
            </summary>
        </member>
        <member name="F:Nohros.Caching.RemovalCause.Collected">
            <summary>
            The entry was removed automatically because its key or value was
            garbage-collected. This can occur when the cache is full.
            </summary>
        </member>
        <member name="F:Nohros.Caching.RemovalCause.Expired">
            <summary>
            The entry's expiration timestamp has passed.
            </summary>
        </member>
        <member name="T:Nohros.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_ArrayLengthDifferFrom">
            <summary>
              Looks up a localized string similar to The length of the array &quot;{0}&quot; should be equals to the length of &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_ArrayLengthsDiffer">
            <summary>
              Looks up a localized string similar to Array lengths must be the same..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_ArrayPlusOffTooSmall">
            <summary>
              Looks up a localized string similar to Destination array is not long enough to copy all the items in the collection. Check array index and length..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_IndexOutOfRange">
            <summary>
              Looks up a localized string similar to index is outside the range of valid indexes for array..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_KeyNotFound">
            <summary>
              Looks up a localized string similar to The key {0} was not found..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_OutOfRange">
            <summary>
              Looks up a localized string similar to Not a valid value..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_PathNotRooted">
            <summary>
              Looks up a localized string similar to The path {0} is not rooted..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_PathRooted">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; path must be relative to the application base directory..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_RangeNotBetween">
            <summary>
              Looks up a localized string similar to The range of valid values are {0} to {1}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_TransactionContext_Command_Connection">
            <summary>
              Looks up a localized string similar to The connection that is associated with the specified command should be the same as the specified in the context constructor..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_Type_ShouldBeInterface">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; should be an interface..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Arg_WrongType">
            <summary>
              Looks up a localized string similar to {0} should be of type {1}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_AddingDuplicate">
            <summary>
              Looks up a localized string similar to An entry with the same key already exists..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_AddingDuplicateKey">
            <summary>
              Looks up a localized string similar to An entry with the same key already exists. Key:{0}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_ArrayLengthMismatch">
            <summary>
              Looks up a localized string similar to The number of elements of the array {0} is less than the number of elements of the array {1}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_ArrayPlusOffTooSmall">
            <summary>
              Looks up a localized string similar to Attempting to specify count and offset past end of array..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_CollectionNoNulls">
            <summary>
              Looks up a localized string similar to {0} cannot contain null elements..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_Empty">
            <summary>
              Looks up a localized string similar to {0} is empty..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to The {0} arugment could not be an empty string..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_EmptyStringOrSpaceSequence">
            <summary>
              Looks up a localized string similar to The {0} arugment could not be an empty string or a sequence of spaces..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Argument_InvalidOfLen">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.ArgumentNull_Any">
            <summary>
              Looks up a localized string similar to One of the specified arguments is a null reference..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.ArgumentOutOfRange_arg_NonMultipleOf">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; should be a multiple of &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.ArgumentOutOfRange_arg_NonNegNum">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; should be a non-negative number..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.ArgumentOutOfRange_Index">
             <summary>
               Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection.
            .
             </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
              Looks up a localized string similar to Non-negative number required..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Auth_Config_InvalidModuleType">
            <summary>
              Looks up a localized string similar to The type &quot;{0}&quot; is not valid or it was not correctly specified..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Auth_Config_Missing_ControlFlag">
            <summary>
              Looks up a localized string similar to Control flag was not defined.
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Auth_Config_Missing_LoginModuleType">
            <summary>
              Looks up a localized string similar to Type was not defined.
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Auth_LoginMudule_Type">
            <summary>
              Looks up a localized string similar to A instance of the login module type {0} could not be created..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Caching_Invalid_expiration_combination">
            <summary>
              Looks up a localized string similar to absoluteExpiration must be DateTime.MaxValue or slidingExpiration must be timeSpan.Zero..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Collection_AddingDuplicate">
            <summary>
              Looks up a localized string similar to The element {0} is already in collection..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Collection_null">
            <summary>
              Looks up a localized string similar to The specified collection is a null reference..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Config_KeyNotFound">
            <summary>
              Looks up a localized string similar to The configuration key &quot;{0}&quot; was not found..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_ArgOutOfRange">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for {1}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_InvalidFormat">
            <summary>
              Looks up a localized string similar to The file {0} does not represent a valid configuration file..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_Missing">
            <summary>
              Looks up a localized string similar to Missing configuration information for &quot;{0}&quot; at &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_MissingNode">
            <summary>
              Looks up a localized string similar to The configuration node {0} is not defined..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_providers_inexistent_replicas_group">
            <summary>
              Looks up a localized string similar to A replica could not be created because the group &quot;{0}&quot; does not exist..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_providers_missing_reference">
            <summary>
              Looks up a localized string similar to The options for the provider &quot;{0}&quot; contains references that cannot be resolved..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_providers_replicas_with_ref_options">
             <summary>
               Looks up a localized string similar to Replica nodes could not have a option that references another option.
            Remove any option that has the following pattern &lt;option ref=&quot;&quot;/&gt;.
             </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Configuration_providers_unresolved_reference">
            <summary>
              Looks up a localized string similar to The options reference &quot;{0}&quot; could not be resolved..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.DataProvider_Connection">
            <summary>
              Looks up a localized string similar to An IDbConnection instance could not be created. Verify if your connection string is valid and if your data source type was correctly specified..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.DataProvider_ConnectionString">
            <summary>
              Looks up a localized string similar to An invalid connection string argument has been supplied, or a required connection string argument has not been supplied..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.DataProvider_InvalidOperation_NoTransaction">
            <summary>
              Looks up a localized string similar to There is no transaction in progress..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.DataProvider_InvalidOperation_TransactionCompleted">
            <summary>
              Looks up a localized string similar to This operation is not permitted when the transaction is in completed..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.DataProvider_InvalidProvider">
            <summary>
              Looks up a localized string similar to The Provider is invalid..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.DataProvider_TransactionContextRace">
            <summary>
              Looks up a localized string similar to {0} =&gt; The current transaction context is not compatible with this class..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Format_SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidCast_FromTo">
            <summary>
              Looks up a localized string similar to Invalid cast from {0} to {1}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_CalledMoreThanOnce">
            <summary>
              Looks up a localized string similar to This method has already been called once..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_EmptyQueue">
            <summary>
              Looks up a localized string similar to Queue is empty..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_FullQueue">
            <summary>
              Looks up a localized string similar to Queue is full..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_json_TrailingComma">
            <summary>
              Looks up a localized string similar to Trailing comma not allowed at &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_json_UnexpectedDataAfterRoot">
            <summary>
              Looks up a localized string similar to Unexpected data after root element..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_json_UnquotedDictionaryKey">
            <summary>
              Looks up a localized string similar to Dictionary keys must be quoted at &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.InvalidOperation_TooMuchNesting">
            <summary>
              Looks up a localized string similar to Too much nesting..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.JSON_BadRootElementType">
            <summary>
              Looks up a localized string similar to Root value must be an array or object..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.JSON_InvalidEscape">
            <summary>
              Looks up a localized string similar to Invalid escape sequence at &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Log_MethodThrowsException">
            <summary>
              Looks up a localized string similar to The {0} method of {1} throws an exception..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Log_ThrowsException">
            <summary>
              Looks up a localized string similar to {0} throws an exception..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Login_LogoutFails">
            <summary>
              Looks up a localized string similar to Logout has been failedfor module {0}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Mappers_CannotMapInterfaces">
             <summary>
               Looks up a localized string similar to We cannot map the [{0}] interface directly.
            You should define a factory to create an instance of the interface using the SetFactory method..
             </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.NotSupported_CannotCreateType">
            <summary>
              Looks up a localized string similar to This method cannot be used to create types related to {0}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Provider_AssemblyNotSpecified">
            <summary>
              Looks up a localized string similar to The name of the assembly was not specified..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Provider_Attributes">
            <summary>
              Looks up a localized string similar to An invalid collection of attributes has been supplied, or a required attribute has not been supplied..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Provider_LoadAssembly">
            <summary>
              Looks up a localized string similar to The assembly could not be loaded. {0}..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Provider_Option_MissingAt">
            <summary>
              Looks up a localized string similar to Missing required option &quot;{0}&quot; for provider..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_BadArrayCopyTo">
            <summary>
              Looks up a localized string similar to An attempt was made to copy the value elements of a SkipList to an array that is too small..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_BadEnumAccess">
            <summary>
              Looks up a localized string similar to An attempt was made to access a SkipListEnumerator that is positioned before the first element of a SkipList or after the last element..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_BadIndexCopyTo">
            <summary>
              Looks up a localized string similar to An attempt was made to pass an out of range index to the CopyTo method of a SkipList..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_ComparableError">
            <summary>
              Looks up a localized string similar to The SkipList was set to use the IComparable interface and an attempt was made to add a key that does not support this interface..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_InvalidEnum">
            <summary>
              Looks up a localized string similar to SkipListEnumerator is no longer valid. The SkipList has been modified since the creation of this enumerator..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_KeyExistsAdd">
            <summary>
              Looks up a localized string similar to An attempt was made to add an element in which the key of the element already exists in the SkipList..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_NullArrayCopyTo">
            <summary>
              Looks up a localized string similar to An attempt was made to pass a null array to the CopyTo method of a SkipList..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.SkipList_NullKey">
            <summary>
              Looks up a localized string similar to An attempt was made to pass a null key to a SkipList..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Switches_MissingSwitch">
            <summary>
              Looks up a localized string similar to Missing required switch &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.Type_InvalidCastException">
            <summary>
              Looks up a localized string similar to Unable to cast object of type &quot;{0}&quot; to type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.TypeLoad_CreateInstance">
             <summary>
               Looks up a localized string similar to Cannot create an instance of the type &quot;{0}&quot;, because:
            .
             </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.TypeLoad_DefaultConstructorNotFound">
            <summary>
              Looks up a localized string similar to The default constructor was not found..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.TypeLoad_MissingConstructor">
            <summary>
              Looks up a localized string similar to A constructor with the following signature .ctor({0}) was not found..
            </summary>
        </member>
        <member name="P:Nohros.Resources.Resources.TypeLoad_TypeNotFound">
            <summary>
              Looks up a localized string similar to The type was not found..
            </summary>
        </member>
        <member name="T:Nohros.RuntimeType">
            <summary>
            An basic implementation of the <see cref="T:Nohros.IRuntimeType"/> class.
            </summary>
        </member>
        <member name="T:Nohros.IRuntimeType">
            <summary>
            Defines a <see cref="P:Nohros.IRuntimeType.Type"/> that is dynamically loaded at runtime.
            </summary>
        </member>
        <member name="P:Nohros.IRuntimeType.Type">
            <summary>
            Gets the assembly-qualified name of the provider type, which includes
            the name of the assembly from which the provider type was loaded.
            </summary>
            <seealso cref="P:System.Type.AssemblyQualifiedName"/>
        </member>
        <member name="P:Nohros.IRuntimeType.Location">
            <summary>
            Gets a string representing the fully qualified path to the directory
            where the assembly associated with the provider is located.
            </summary>
            <value>
            The fully qualified path to the folder where the provider assembly is
            stored.
            </value>
            <remarks>
            The assembly location must be an absolute path or a path relative to
            the configuration file.
            <para>
            The default location returned by this property is the application base
            directory.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.RuntimeType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.RuntimeType"/> using the
            specified <paramref name="type"/>.
            </summary>
            <param name="type">
            The fully assembly-qualified name of the runtime type, which includes
            the name of the assembly from which the provider type was loaded.
            </param>
            <remarks>
            The assembly location will be set to the current application base
            directory.
            </remarks>
            <seealso cref="P:System.Type.AssemblyQualifiedName"/>
        </member>
        <member name="M:Nohros.RuntimeType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.RuntimeType"/> using the
            specified class <paramref name="type"/> and
            assembly <paramref name="location"/>
            </summary>
            <param name="type">
            The fully assembly-qualified name of the runtime type, which includes
            the name of the assembly from which the provider type was loaded.
            </param>
            <param name="location">
            The location of the assembly that contains <paramref name="type"/>.
            </param>
        </member>
        <member name="M:Nohros.RuntimeType.GetSystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the class defined by this
            instance.
            </summary>
            <returns>
            The type instance that represents the exact runtime type of the
            specified provider or null if the type could not be loaded.
            </returns>
            <remarks>
            We try to load the type's assembly using this location defined by the
            <see cref="P:Nohros.RuntimeType.Location"/> property nd them load the type from that
            assembly.
            </remarks>
        </member>
        <member name="M:Nohros.RuntimeType.GetSystemType(Nohros.IRuntimeType)">
            <summary>
            Gets the <see cref="T:System.Type"/> of a class defined by
            <paramref name="runtime_type"/>.
            </summary>
            <param name="runtime_type">
            A <see cref="T:Nohros.IRuntimeType"/> object containing information about the
            type to be loaded.
            </param>
            <returns>
            The type instance that represents the exact runtime type of the
            specified provider or null if the type could not be loaded.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="runtime_type"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Tje assembly referenced by the <paramref name="runtime_type"/> is not
            found.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The path for the assembly referenced by the
            <paramref name="runtime_type"/> is too long.
            </exception>
            <remarks>
            We try to load the type's assembly using this location defined by the
            <see cref="P:Nohros.IRuntimeType.Location"/> property of
            <paramref name="runtime_type"/> and them load the type from that
            assembly.
            </remarks>
        </member>
        <member name="P:Nohros.RuntimeType.Type">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.RuntimeType.Location">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.TransactionScopes">
            <summary>
            A collection of factory methods for the <see cref="T:Nohros.Data.TransactionScopes"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.Data.TransactionScopes.ReadCommited">
            <summary>
            Creates a instance of <see cref="T:System.Transactions.TransactionScope"/> class that uses
            <see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/> as isolation level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.TransactionScopes.ReadUncommitted">
            <summary>
            Creates a instance of <see cref="T:System.Transactions.TransactionScope"/> class that uses
            <see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/> as isolation level.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nohros.Data.DataReaderMapper`1">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataReaderMapper`1"/> interface.
            </summary>
        </member>
        <member name="T:Nohros.Data.IDataReaderMapper`1">
            <summary>
            A class that maps the fields of a <see cref="T:System.Data.IDataReader"/> to the
            properties of an instance of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type that should be mapped.
            </typeparam>
        </member>
        <member name="M:Nohros.Data.IDataReaderMapper`1.Map(System.Data.IDataReader)">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the current row of the given <paramref name="reader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IDataReaderMapper`1.Map(System.Data.IDataReader,`0@)">
            <summary>
            maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <param name="t">
            When this method returns contains a object of type
            <typeparamref name="T"/> associated the data readed from the current
            row of the given <paramref name="reader"/>.
            </param>
            <returns>
            <c>true</c> when the map operation the data returned from the database
            was successfully mapped to a object of type <typeparamref name="T"/>;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            When <paramref name="reader"/> does not contain any data, <c>false</c>
            will be returned to indicate that the expected result does not exists.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IDataReaderMapper`1.Map(System.Data.IDataReader,System.Action{`0})">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the next row of the given <paramref name="reader"/>.
            </returns>
            <remarks>
            The <see cref="M:System.Data.IDataReader.Read"/> method will be called to fetch the
            next record.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IDataReaderMapper`1.MapCurrent(System.Data.IDataReader)">
            <summary>
            Maps a element of a query result to a object of type using the current
            record of the <see cref="T:System.Data.IDataReader"/>.
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data readed
            from the current row of the given <paramref name="reader"/>.
            </returns>
            <remarks>
            The given <paramref name="reader"/> should be positioned at a valid
            record.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IDataReaderMapper`1.Map(System.Data.IDataReader,System.Boolean)">
            <summary>
            Maps a element of a query result to a collection of object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A collection of objects of type <typeparamref name="T"/> containing
            the data readed from the given <paramref name="reader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IDataReaderMapper`1.Map(System.Data.IDataReader,System.Boolean,System.Action{`0})">
            <summary>
            Maps a element of a query result to a collection of object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A collection of objects of type <typeparamref name="T"/> containing
            the data readed from the given <paramref name="reader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapper`1.Map(System.Data.IDataReader)">
            <summary>
            Reads the first row from <paramref name="reader"/> and maps it
            to a object of type <typeparamref name="T"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> containing the data to be mapped.
            </param>
            <returns>
            A object of type <typeparamref name="T"/> whose properties contains
            the values readed from <paramref name="reader"/> accordingly to the
            defined map.
            </returns>
            <exception cref="T:Nohros.NoResultException">
            The <paramref name="reader"/> does not contain any data.
            </exception>
        </member>
        <member name="M:Nohros.Data.DataReaderMapper`1.Map(System.Data.IDataReader,`0@)">
            <summary>
            Reads the first row from <paramref name="reader"/> and maps it to a
            object of type <typeparamref name="T"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> containing the data to be mapped.
            </param>
            <param name="t">
            When this method returns contains a object of type
            <typeparamref name="T"/> whose properties contains the values readed
            from <paramref name="reader"/> accordingly to the defined map.
            </param>
            <returns>
            <c>true</c> if <paramref name="reader"/> contains at least one row;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapper`1.MapCurrent(System.Data.IDataReader)">
            <summary>
            Maps the current row of the <paramref name="reader"/> and maps it to
            a object of type <typeparamref name="T"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> containing the data to be mapped.
            </param>
            <returns>
            A object of type <typeparamref name="T"/> whose properties contains
            the values readed from <paramref name="reader"/> accordingly to the
            defined map.
            </returns>
            <exception cref="T:Nohros.NoResultException">
            The <paramref name="reader"/> does not contain any data.
            </exception>
            <remarks>
            This method is usually used to map the same row to more than one
            object. Generally by combining multiple
            <see cref="T:Nohros.Data.DataReaderMapper`1"/>s.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapper`1.Map(System.Data.IDataReader,System.Action{`0})">
            <summary>
            Reads the the first row of the <paramref name="reader"/>, maps it
            to a object of type <typeparamref name="T"/> and executes the given
            <paramref name="post_map"/> delegate.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> containing the data to be mapped.
            </param>
            <param name="post_map">
            A <see cref="T:System.Action`1"/> to be executed after the mapping operation.
            </param>
            <returns>
            A object of type <typeparamref name="T"/> whose properties contains
            the values readed from <paramref name="reader"/> accordingly to the
            defined map.
            </returns>
            <exception cref="T:Nohros.NoResultException">
            The <paramref name="reader"/> does not contain any data.
            </exception>
        </member>
        <member name="M:Nohros.Data.DataReaderMapper`1.Map(System.Data.IDataReader,System.Boolean)">
            <summary>
            Reads all the rows of the <paramref name="reader"/> and maps it to a
            collection of objects of type <typeparamref name="T"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> containing the data to be mapped.
            </param>
            <param name="defer">
            A value that indicates if the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            should be deffered.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing objects whose properties
            is set to the values readed from <paramref name="reader"/> accordingly
            to the defined map.
            </returns>
            <remarks>
            If the <paramref name="defer"/> is set to true the
            <paramref name="reader"/> will remain opened until the enumerable
            is resolved.
            <para>
            Its a good practive to pass a deferred enumerable between applications
            layers. You usually set the <paramref name="defer"/> to true if
            you want to use the result of the enumerable to execute another action
            on the same application layer (Ex. use the result of one query in
            another query on the application data access layer).
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapper`1.Map(System.Data.IDataReader,System.Boolean,System.Action{`0})">
            <summary>
            Reads all the rows of the <paramref name="reader"/>, maps it to a
            collection of objects of type <typeparamref name="T"/> and executes the
            given <paramref name="post_map"/> delegate for each mapped row.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> containing the data to be mapped.
            </param>
            <param name="defer">
            A value that indicates if the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            should be deffered.
            </param>
            <param name="post_map">
            A <see cref="T:System.Action`1"/> to be executed for each row after it is
            mapped.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing objects whose properties
            is set to the values readed from <paramref name="reader"/> accordingly
            to the defined map.
            </returns>
            <remarks>
            If the <paramref name="defer"/> is set to true the
            <paramref name="reader"/> will remain opened until the enumerable
            is resolved.
            <para>
            Its a good practive to pass a deferred enumerable between applications
            layers. You usually set the <paramref name="defer"/> to true if
            you want to use the result of the enumerable to execute another action
            on the same application layer (Ex. use the result of one query in
            another query on the application data access layer).
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.ValueTypeDataReaderMapper`1.Map(System.Data.IDataReader)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.ValueTypeDataReaderMapper`1.Map(System.Data.IDataReader,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.ValueTypeDataReaderMapper`1.MapCurrent(System.Data.IDataReader)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.ValueTypeDataReaderMapper`1.Map(System.Data.IDataReader,System.Boolean,System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.ValueTypeDataReaderMapper`1.GetOrdinals(System.Data.IDataReader)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.ValueTypeDataReaderMapper`1.MapInternal(System.Data.IDataReader)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.IQueryExecutor">
            <summary>
            Execute SQL commands againts a database.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            uses an auto mapper for the type <typeparamref name="T"/> to map the
            result set to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <returns>
            The object produced by the execution of the auto mapper for the type
            <typeparamref name="T"/>
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            uses an auto mapper for the type <typeparamref name="T"/> to map the
            result set to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <returns>
            The object produced by the execution of the auto mapper for the type
            <typeparamref name="T"/>
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Action{Nohros.Data.CommandBuilder})">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            uses an auto mapper for the type <typeparamref name="T"/> to map the
            result set to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The object produced by the execution of the auto mapper for the type
            <typeparamref name="T"/>
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Action{Nohros.Data.CommandBuilder},System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            uses an auto mapper for the type <typeparamref name="T"/> to map the
            result set to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The object produced by the execution of the auto mapper for the type
            <typeparamref name="T"/>
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Func{Nohros.Data.IDataReaderMapper{``0}})">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns a <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to
            map the result set to a object of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="mapper">
            A <see cref="T:System.Func`1"/> that builds a
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to map
            result of the given <paramref name="query"/> to a
            object of the type <typeparamref name="T"/>.
            </param>
            <returns>
            The object produced by the execution of the method
            <paramref name="mapper"/>.
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Func{Nohros.Data.IDataReaderMapper{``0}},System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns a <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to
            map the result set to a object of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="mapper">
            A <see cref="T:System.Func`1"/> that builds a
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to map
            result of the given <paramref name="query"/> to a
            object of the type <typeparamref name="T"/>.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <returns>
            The object produced by the execution of the method
            <paramref name="mapper"/>.
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Func{Nohros.Data.IDataReaderMapper{``0}},System.Action{Nohros.Data.CommandBuilder})">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns a <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to
            map the result set to a object of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="mapper">
            A <see cref="T:System.Func`1"/> that builds a
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to map
            result of the given <paramref name="query"/> to a
            object of the type <typeparamref name="T"/>.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The object produced by the execution of the method
            <paramref name="mapper"/>.
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteQuery``1(System.String,System.Func{Nohros.Data.IDataReaderMapper{``0}},System.Action{Nohros.Data.CommandBuilder},System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            runs the method <paramref name="mapper"/> to map the result set to
            the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the object that should be returned.
            </typeparam>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <param name="mapper">
            A <see cref="T:System.Func`1"/> that builds a
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> that can be used to map
            result of the given <paramref name="query"/> to a
            object of the type <typeparamref name="T"/>.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The object produced by the execution of the method
            <paramref name="mapper"/>.
            </returns>
            <remarks>
            The mapper returned from the <see cref="T:System.Func`1"/> is cached
            internally and associated with the given <paramref name="query"/>. The
            cache is never flushed. If you are generating SQL strings on the fly
            without using parameters it is possible you hit memory issues.
            </remarks>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteNonQuery(System.String)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns the number of rows affected.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns the number of rows affected.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteNonQuery(System.String,System.Action{Nohros.Data.CommandBuilder})">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns the number of rows affected.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteNonQuery(System.String,System.Action{Nohros.Data.CommandBuilder},System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returns the number of rows affected.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <returns>
            The value of the first column of the first row of the recordset
            resulted from the execution of the <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,``0@)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="t">
            When this method returns contains the value of the first column of
            the first row of the recordset resulted from the execution of the
            <paramref name="query"/> if the recordset is not empty; otherwise,
            the default value for the type <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if the recordset resulted from the execution of the
            <paramref name="query"/> is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <returns>
            The value of the first column of the first row of the recordset
            resulted from the execution of the <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,System.Data.CommandType,``0@)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <param name="t">
            When this method returns contains the value of the first column of
            the first row of the recordset resulted from the execution of the
            <paramref name="query"/> if the recordset is not empty; otherwise,
            the default value for the type <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if the recordset resulted from the execution of the
            <paramref name="query"/> is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,System.Action{Nohros.Data.CommandBuilder})">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The value of the first column of the first row of the recordset
            resulted from the execution of the <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,System.Action{Nohros.Data.CommandBuilder},``0@)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <param name="t">
            When this method returns contains the value of the first column of
            the first row of the recordset resulted from the execution of the
            <paramref name="query"/> if the recordset is not empty; otherwise,
            the default value for the type <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if the recordset resulted from the execution of the
            <paramref name="query"/> is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,System.Action{Nohros.Data.CommandBuilder},System.Data.CommandType)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <returns>
            The value of the first column of the first row of the recordset
            resulted from the execution of the <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IQueryExecutor.ExecuteScalar``1(System.String,System.Action{Nohros.Data.CommandBuilder},System.Data.CommandType,``0@)">
            <summary>
            Executes the command described by <see cref="!:query"/> on the server and
            returned the value of the first column of the first row of the
            resulting recordset.
            </summary>
            <param name="query">
            The query to be executed on the server.
            </param>
            <param name="command_type">
            The type of the command that is described by the
            <paramref name="query"/> parameter.
            </param>
            <param name="set_parameters">
            A <see cref="T:System.Action`1"/> that allows the caller to set the values
            of the parameters defined on the given query.
            </param>
            <param name="t">
            When this method returns contains the value of the first column of
            the first row of the recordset resulted from the execution of the
            <paramref name="query"/> if the recordset is not empty; otherwise,
            the default value for the type <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if the recordset resulted from the execution of the
            <paramref name="query"/> is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Nohros.Data.IQuery`1">
            <summary>
            Provides functionality to execute queries that returns a value against a
            specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`1.Execute">
            <summary>
            Executes the query represented by the <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <returns>
            The result of the query.
            </returns>
        </member>
        <member name="T:Nohros.Data.IQuery`2">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            one parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`2.Execute(`1)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`3">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            two parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`3.Execute(`1,`2)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`4">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            three parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`4.Execute(`1,`2,`3)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`5">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            four parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`5.Execute(`1,`2,`3,`4)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`6">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            five parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`6.Execute(`1,`2,`3,`4,`5)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`7">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            six parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`7.Execute(`1,`2,`3,`4,`5,`6)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`8">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            seven parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`8.Execute(`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`9">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            eight parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`9.Execute(`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
            <param name="arg8">
            The type of the eighth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`10">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            nine parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`10.Execute(`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
            <param name="arg8">
            The type of the eighth parameter of the query.
            </param>
            <param name="arg9">
            The type of the ninth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IQuery`11">
            <summary>
            Provides functionality to execute queries that retunrs no value and has
            ten parameter against a specific data provider.
            </summary>
        </member>
        <member name="M:Nohros.Data.IQuery`11.Execute(`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Executes the command represented by the
            <see cref="T:Nohros.Data.IQuery`1"/> object.
            </summary>
            <param name="arg1">
            The type of the first parameter of the query.
            </param>
            <param name="arg2">
            The type of the second parameter of the query.
            </param>
            <param name="arg3">
            The type of the third parameter of the query.
            </param>
            <param name="arg4">
            The type of the fourth parameter of the query.
            </param>
            <param name="arg5">
            The type of the fifth parameter of the query.
            </param>
            <param name="arg6">
            The type of the sixth parameter of the query.
            </param>
            <param name="arg7">
            The type of the seventh parameter of the query.
            </param>
            <param name="arg8">
            The type of the eighth parameter of the query.
            </param>
            <param name="arg9">
            The type of the ninth parameter of the query.
            </param>
            <param name="arg10">
            The type of the tenth parameter of the query.
            </param>
        </member>
        <member name="T:Nohros.Data.IHiLoRange">
            <summary>
            Defines a range of identities values using the hilo algorithm.
            </summary>
        </member>
        <member name="P:Nohros.Data.IHiLoRange.High">
            <summary>
            Get the high value of the <see cref="!:HiLoRange"/> object.
            </summary>
        </member>
        <member name="P:Nohros.Data.IHiLoRange.MaxLow">
            <summary>
            Get the maximum number of low values that could be generated using the
            <see cref="P:Nohros.Data.IHiLoRange.High"/> value.
            </summary>
        </member>
        <member name="T:Nohros.Strings">
            <summary>
            Defines the constant string that could appear on the nohros
            configuration files.
            </summary>
        </member>
        <member name="F:Nohros.Strings.kRootXmlElementName">
            <summary>
            The key that will be used to store the Xml element that was used to
            configure a <see cref="T:Nohros.Configuration.IConfiguration"/> object.
            </summary>
        </member>
        <member name="M:Nohros.Strings.AreEquals(System.String,System.String)">
            <summary>
            Compares two strings for equality using a ordinal string comparison.
            </summary>
            <returns>
            <c>true</c> if <paramref name="str_a"/> is ordinally equals to
            <paramref name="str_b"/>; otherwise, false.
            </returns>
            <remarks>
            This method performs a ordinal case-insensitive comparison.
            </remarks>
        </member>
        <member name="T:Nohros.Configuration.RepositoriesNode">
            <summary>
            Represents the repositories configuration node.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IRepositoriesNode">
            <summary>
            A <see cref="T:Nohros.Configuration.IRepositoriesNode"/> is a collection of
            <see cref="T:Nohros.Configuration.IRepositoryNode"/>.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.IRepositoriesNode.GetRepositoryNode(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IRepositoriesNode"/> whose name is
            <paramref name="repository_name"/>.
            </summary>
            <param name="repository_name">
            The name of the repository.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.IRepositoriesNode"/> object whose name is
            <paramref name="repository_name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The <param name="repository_name"> was not found.
            </param>
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IRepositoriesNode.GetRepositoryNode(System.String,Nohros.Configuration.IRepositoryNode@)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IRepositoriesNode"/> whose name is
            <paramref name="repository"/>.
            </summary>
            <param name="repository_name">
            The name of the repository.
            </param>
            <param name="repository">
            When this method returns contains a <see cref="T:Nohros.Configuration.RepositoryNode"/> object
            whose name is <paramref name="repository_name"/>.
            </param>
            <returns>
            <c>true</c> when a repository with name
            <paramref name="repository_name"/> is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.IRepositoriesNode.BaseDirectory">
            <summary>
            Gets the repositories base path.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.RepositoriesNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.RepositoriesNode"/> class
            that uses the application base path as the repositories base directory.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.RepositoriesNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.RepositoriesNode"/> class
            by using the specified <see cref="!:base_directory"/> as base repository
            directory.
            </summary>
            <param name="base_directory">
            The repositories base directory path. This path should be relative
            to application base directory.
            </param>
        </member>
        <member name="M:Nohros.Configuration.RepositoriesNode.GetRepositoryNode(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.RepositoryNode"/> whose name is
            <paramref name="repository_name"/>.
            </summary>
            <param name="repository_name">
            The name of the repository.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.RepositoryNode"/> object whose name is
            <paramref name="repository_name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The <param name="repository_name"> was not found.
            </param>
            </exception>
        </member>
        <member name="M:Nohros.Configuration.RepositoriesNode.GetRepositoryNode(System.String,Nohros.Configuration.IRepositoryNode@)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.RepositoryNode"/> whose name is
            <paramref name="repository"/>.
            </summary>
            <param name="repository_name">
            The name of the repository.
            </param>
            <param name="repository">
            When this method returns contains a <see cref="T:Nohros.Configuration.RepositoryNode"/> object
            whose name is <paramref name="repository_name"/>.
            </param>
            <returns>
            <c>true</c> when a repository with name
            <paramref name="repository_name"/> is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.RepositoriesNode.Parse(System.Xml.XmlElement,System.String)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlElement"/> element into a
            <see cref="T:Nohros.Configuration.RepositoriesNode"/> object.
            </summary>
            <param name="element">
            A Xml element that contains the repositories configuration data.
            </param>
            <param name="base_directory">
            The base directory to use when resolving the repository's location.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.RepositoriesNode"/> containing the configured repositories.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            The <paramref name="element"/> contains invalid configuration data.
            </exception>
        </member>
        <member name="P:Nohros.Configuration.RepositoriesNode.BaseDirectory">
            <summary>
            Gets the repositories base path.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.ReplicasNode">
            <summary>
            Provides a way to replicate the settings defined for a group of
            providers.
            </summary>
            <remarks>
            A replica allows the definition of a collection of providers that is
            implemented by the same class and has distinct collection of options.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ReplicasNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ReplicaNode"/> class by
            using the given replica <paramref name="group"/> name.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ReplicasNode.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ReplicasNode.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ReplicasNode.Parse(System.Xml.XmlElement)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlElement"/> element into a
            <see cref="T:Nohros.Configuration.ReplicasNode"/> object.
            </summary>
            <param name="element">
            A Xml element that contains the providers configuration data.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.ReplicasNode"/> containing the configured providers.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            The <paramref name="element"/> contains invalid configuration data.
            </exception>
        </member>
        <member name="P:Nohros.Configuration.ReplicasNode.Group">
            <summary>
            Gets the name of the group that this node is replicating.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.ProviderOptionsNode">
            <summary>
            A node that contains the common providers options.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:Nohros.Configuration.IProviderOptions"/> collection.
            </summary>
            <param name="key">
            The string to use an the key of the value to add.
            </param>
            <param name="value">
            The string to use as the value of the element to add.
            </param>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.ContainsKeys(System.String[])">
            <summary>
            Checks if the specified options keys exists in the collection.
            </summary>
            <param name="keys">
            The keys to check for existence.
            </param>
            <returns>
            <c>true</c> if all the specified keys exists in the collection;
            otherwise, <c>false</c>. If no keys is specified this method returns
            <c>true</c>.
            </returns>
            <remarks>
            This method checks for existence for each specified key and if one
            of them does not exists returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetString(System.String)">
            <summary>
            Gets the value associated with the specified key as a string
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a string.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetInt(System.String)">
            <summary>
            Gets the value associated with the specified key as a 32-bit
            signed integer.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a 32-bit
            signed integer.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a 32-bit signed integer.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetLong(System.String)">
            <summary>
            Gets the value associated with the specified key as a 64-bit
            signed integer.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a 64-bit
            signed integer.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a 64-bit signed integer.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetShort(System.String)">
            <summary>
            Gets the value associated with the specified key as a 16-bit
            signed integer.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a 16-bit
            signed integer.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a 16-bit signed integer.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetFloat(System.String)">
            <summary>
            Gets the value associated with the specified key as a single-precision
            floating point number.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a single-precision
            floating point number.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a float precision number.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetDouble(System.String)">
            <summary>
            Gets the value associated with the specified key as a double-precision
            floating point number.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a double-precision
            floating point number.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a double precision number.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetDecimal(System.String)">
            <summary>
            Gets the value associated with the specified key as a
            <see cref="T:System.Decimal"/> object.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a <see cref="T:System.Decimal"/>
            object.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a decimal
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.GetBoolean(System.String)">
            <summary>
            Gets the value associated with the specified key as a
            <see cref="T:System.Boolean"/>
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <returns>
            The value associated with the specified key as a <see cref="T:System.Boolean"/>
            object.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The value associated with the key <paramref name="key"/> could not be
            casted to a <see cref="T:System.Boolean"/>
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key <paramref name="key"/> does not exists in the collection.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.TryGetString(System.String,System.String)">
            <summary>
            Gets the string value associated with the specified key.
            </summary>
            <param name="key">
            The key of the value to get.
            </param>
            <param name="default_value">
            The value to be returned if the <paramref name="key"/> is not found.
            </param>
            <returns>
            A string containing the value for the specified option key, or the
            value of <paramref name="default_value"/> if <paramref name="key"/>
            is not found.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.TryGetInteger(System.String,System.Int32)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its 32-bit signed
            integer equivalent.
            </summary>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default_value">
            A 32-bit integer that will be returned when the key
            <paramref name="key"/> is not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default_value"/> if the key was not found.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.TryGetLong(System.String,System.Int64)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its 64-bit signed
            integer equivalent.
            </summary>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default_value">
            A 64-bit integer that will be returned when the key
            <paramref name="key"/> is not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default_value"/> if the key was not found.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IProviderOptions.ToDictionary">
            <summary>
            Copies the elements of the <see cref="T:Nohros.Configuration.IProviderOptions"/> to a
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing copies of the
            options of the <see cref="T:Nohros.Configuration.IProviderOptions"/>.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.IProviderOptions.Count">
            <summary>
            Gets the number of options in the collection.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProviderOptionsNode"/> by
            using the given name.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProviderOptionsNode"/> by
            using the given node name and options.
            </summary>
            <param name="name">
            The name of the node
            </param>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> object containing the options.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.TryGetString(System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.Add(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.ContainsKeys(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetInt(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetLong(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetShort(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetFloat(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetDouble(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetDecimal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.GetBoolean(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.TryGetString(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.TryGetInteger(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.TryGetLong(System.String,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.ToDictionary">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptionsNode.Remove(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Configuration.ProviderOptionsNode.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Configuration.IRepositoryNode">
            <summary>
            A <see cref="T:Nohros.Configuration.RepositoryNode"/> is a container for pathnames. It is used
            to resolve relative pathnames to absolute pathnames using the application
            base directory. This allows applications to associate constants to
            configurable pathnames.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.IRepositoryNode.RelativeDirectory">
            <summary>
            Gets or sets the path pointed by the repository.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.IRepositoryNode.AbsoluteDirectory">
            <summary>
            Get the full path pointed by the repository.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.Builders.CallableConfigurationBuilder`1">
            <summary>
            A <see cref="T:Nohros.Configuration.IConfigurationBuilder`1"/> that runs a
            <see cref="T:Nohros.CallableDelegate`1"/> on build and returns its computed value.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.Builders.CallableConfigurationBuilder`1.#ctor(Nohros.CallableDelegate{`0})">
            <summary>
            Initialzes a new instance of the
            <see cref="T:Nohros.Configuration.Builders.CallableConfigurationBuilder`1"/> object that runs the
            given <paramref name="callable"/> when <see cref="M:Nohros.Configuration.Builders.CallableConfigurationBuilder`1.Build"/> is
            called.
            </summary>
            <param name="callable">
            A <see cref="T:Nohros.RunnableDelegate"/> to execute when <see cref="M:Nohros.Configuration.Builders.CallableConfigurationBuilder`1.Build"/>
            method is called.
            </param>
        </member>
        <member name="M:Nohros.Configuration.Builders.CallableConfigurationBuilder`1.Build">
            <summary>
            Runs the <see cref="T:Nohros.CallableDelegate`1"/> given at constructor and
            returns the computed value.
            </summary>
            <returns>
            The value computed by a callable.
            </returns>
        </member>
        <member name="T:Nohros.Concurrent.Mailbox`1">
            <summary>
            Mailbox is basically a queue to store messages sent to a object that
            lives in a particular thread.
            </summary>
            <remarks>
            Mailbox is intended to be used on concurrent enviroments that use message
            passing to achieve concurrency and internl scalability.
            <para>
            This mode of concurrency allows multithreaded applications to work
            without using mutexes, condition variables or semaphores to orchestrate
            the parallel processing. Instead, each object can live in its own thread
            and no other thread should ever touch it(that's why mutexes are not
            needed). Other threads can comunnicate with the object by sendind it
            messages(T). Same way the object can speak to other objects - potentially
            running in different threads - by sending them messages.
            </para>
            <para>
            The mailbox message processing is single threaded and no more than one
            task will be active at any given time. When a message is
            send to it, it is queued to be processed by the executor. The
            executor runs until the message queue is empty. So, if you are using
            a <see cref="T:Nohros.Concurrent.SameThreadExecutor"/> that is no guarantee that a
            message callback is executed by the thread that send the message, if
            there is an thread already executing a callback when a message is sent,
            that thread will be used to process the following messages until the
            message queue is empty.
            </para>
            </remarks>
            <typeparam name="T">
            The type of the messages that the mailbox can receive.
            </typeparam>
        </member>
        <member name="M:Nohros.Concurrent.Mailbox`1.#ctor(Nohros.Concurrent.MailboxReceiveCallback{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.Mailbox`1"/> class by
            using the specified receive callback and initial capacity.
            </summary>
            <param name="callback">
            A <see cref="T:Nohros.Concurrent.MailboxReceiveCallback`1"/> delegate that is called to
            process each message sent to the <see cref="T:Nohros.Concurrent.Mailbox`1"/>.
            </param>
            <remarks>
            A <see cref="T:System.Threading.Thread"/> from the <see cref="T:System.Threading.ThreadPool"/> is used to
            execute the callback.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Mailbox`1.Send(`0)">
            <summary>
            Sends a command to the mailbox.
            </summary>
            <param name="message">
            The message to be sent.
            </param>
        </member>
        <member name="M:Nohros.Concurrent.Mailbox`1.Receive">
            <summary>
            Receives messages from the mailbox and executes the receiver callback.
            </summary>
            <remarks>
            This method runs into a single dedicated thread.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Mailbox`1.Receive(System.Threading.SynchronizationContext)">
            <summary>
            Receives messages from the mailbox and execute the receiver callback
            using the context of the thread that creates the
            <see cref="T:Nohros.Concurrent.Mailbox`1"/> object.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.Mailbox`1.GetMessage(`0@)">
            <summary>
            Gets a message from the mailbox.
            </summary>
            <returns><c>true</c> when a message is successfully retrieved from
            the mailbox; otherwise, <c>false</c>.
            </returns>
            <remarks>
            If there are no incoming messages available at the mailbox, this
            method switch to passive state and returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.Mailbox`1.Count">
            <summary>
            Get the number of elements contained in the
            <see cref="T:Nohros.Concurrent.Mailbox`1"/>.
            </summary>
            <remarks>
            For determining whether the collection contains any items, use of the
            <see cref="P:Nohros.Concurrent.Mailbox`1.IsEmpty"/> property is recommended rather than retrieving
            the number of items from the <see cref="P:Nohros.Concurrent.Mailbox`1.Count"/> property and
            comparing it to 0.
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.Mailbox`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:Nohros.Concurrent.Mailbox`1"/> is
            empty.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Nohros.Concurrent.Mailbox`1"/> is empty; otherwise,
            <c>false</c>.
            </value>
            <remarks>
            For determining whether the collection contains any items, use of this
            property is recommended rather than retrieving the number of items
            from the <see cref="P:Nohros.Concurrent.Mailbox`1.Count"/> property and comparing it to 0. However,
            as this collection is intended to be accessed concurrently, it may
            be the case that another thread will modify the collection after
            <see cref="P:Nohros.Concurrent.Mailbox`1.IsEmpty"/> returns, thus invalidating the result.
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.TaskFuture`1">
            <summary>
            An implementation of the <see cref="T:Nohros.Concurrent.IFuture`1"/> class that forwards its
            method calls to a <see cref="!:Task&lt;T&gt;"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nohros.Concurrent.IRunnableFuture`1">
            <summary>
            A <see cref="T:Nohros.Concurrent.IFuture`1"/> that is runnable. Successful execution of the
            <see cref="M:Nohros.Concurrent.IRunnableFuture`1.Run"/> method causes completion of the future and allow access
            to its result.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nohros.Concurrent.IRunnableFuture`1.Run">
            <summary>
            Sets the future to the result of its computation unless it has been
            cancelled.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.TaskFuture`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.TaskFuture`1"/> class
            using the specified <paramref name="task"/> as method forwarder.
            </summary>
            <param name="task">
            A <see cref="P:Nohros.Concurrent.TaskFuture`1.Task"/> representing an asynchronous operation.
            </param>
        </member>
        <member name="M:Nohros.Concurrent.TaskFuture`1.#ctor(System.Threading.Tasks.Task{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.TaskFuture`1"/> class
            using the specified <paramref name="task"/> and asynchronous state.
            </summary>
            <param name="task">
            A <see cref="P:Nohros.Concurrent.TaskFuture`1.Task"/> representing an asynchronous operation.
            </param>
            <param name="state">
            An object representing data to be used bt the future.
            </param>
        </member>
        <member name="M:Nohros.Concurrent.TaskFuture`1.Run">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Concurrent.TaskFuture`1.InterruptTask">
            <summary>
            Subclasses can override this method to implement interruption of
            the future's computation.
            </summary>
            <remarks>
            The method is invoked automatically by a successfull call to
            <see cref="M:Nohros.Concurrent.AbstractFuture`1.Cancel(System.Boolean,System.Boolean)"/>.
            <para>
            The default implementation does nothing.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.TaskFuture`1.Task">
            <summary>
            Gets the <see cref="!:Task&lt;T&gt;"/> associated with this
            <see cref="T:Nohros.Concurrent.TaskFuture`1"/>.
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.IThreadFactory">
            <summary>
            A factory that create threads on demand.
            </summary>
            <remarks>
            This removes hardwriting of calls to <c>new Thread</c>, enabling
            applications to use special thread subclasses.
            <para>
            <example>
            The simplest implementation of this interface is just
            <code>
            class SimpleThreadFactory : IThreadFactory {
            }
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.IThreadFactory.CreateThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/>.
            </summary>
            <param name="runnable">
            A <see cref="T:System.Threading.ThreadStart"/> to be executed by the new thread.
            </param>
            <returns>
            The newly created <see cref="T:System.Threading.Thread"/> object.
            </returns>
        </member>
        <member name="M:Nohros.Concurrent.IThreadFactory.CreateThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> that allows an object to be passed
            to it when the thread is started.
            </summary>
            <param name="runnable">
            A <see cref="T:System.Threading.ThreadStart"/> to be executed by the new thread.
            </param>
            <returns>
            The newly created <see cref="T:System.Threading.Thread"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Concurrent.AtomicReference`1">
            <summary>
            An object reference that may be updated atomically.
            </summary>
            <typeparam name="T">The type of the object referred by this interface.
            </typeparam>
        </member>
        <member name="M:Nohros.Concurrent.AtomicReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.AtomicReference`1"/>
            class by using the specified initial value.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.AtomicReference`1.Exchange(`0)">
            <summary>
            Sets a current value to a specified value and returns the original
            value, as an atomic operation.
            </summary>
            <param name="value">The value to which the current value is set.
            </param>
            <returns>The original value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicReference`1.CompareExchange(`0,`0)">
            <summary>
            Atomically set the current value to the spacified updated value if
            the current value is equals to the expected value.
            </summary>
            <param name="expect">
            The value that is compared to the currrent value.</param>
            <param name="update">
            The value that replaces the current value if the comparison results in
            equality.
            </param>
            <returns>The original value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicReference`1.CompareSet(`0,`0)">
            <summary>
            Atomically set the current value to the spacified updated value if
            the current value is equals to the expected value.
            </summary>
            <param name="expect">
            The value that is compared to the currrent value.</param>
            <param name="update">
            The value that replaces the current value if the comparison results in
            equality.
            </param>
            <returns><c>true</c> if successfull.<c>false</c> indicates that the
            actual value is not equals to the expected value.</returns>
        </member>
        <member name="P:Nohros.Concurrent.AtomicReference`1.Value">
            <summary>
            Gets or sets the current <typeparam name="T"/>value.
            </summary>
        </member>
        <member name="T:Nohros.MessageQueue.IMessageMiddlewareFactory`1">
            <summary>
            A generic factory used to create concrete instances of the
            <see cref="T:Nohros.MessageQueue.IMessageMiddleware"/> class.
            </summary>
            <typeparam name="T">A class that implements the
            <see cref="T:Nohros.MessageQueue.IMessageMiddleware"/> interface.</typeparam>
        </member>
        <member name="M:Nohros.MessageQueue.IMessageMiddlewareFactory`1.CreateMessageMiddleware(Nohros.MessageQueue.IOperationData)">
            <summary>
            Creates an instance of the <see cref="T:Nohros.MessageQueue.IMessageMiddleware"/> by using
            the specified operation data.
            </summary>
            <param name="data">A <see cref="T:Nohros.MessageQueue.IOperationData"/> containing the
            data needed to create the middleware instance.</param>
            <returns>A instance of the <see cref="T:Nohros.MessageQueue.IMessageMiddleware"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">The data that the
            <see cref="T:Nohros.MessageQueue.IOperationData"/> contains is insuficient.</exception>
            <exception cref="T:System.TypeLoadException">A instance of the
            <see cref="T:Nohros.MessageQueue.IMessageMiddleware"/> could not be ceated.</exception>
        </member>
        <member name="M:Nohros.Collections.ListValue.Clear">
            <summary>
            Clears the contents of this ListValue.
            </summary>
        </member>
        <member name="M:Nohros.Collections.ListValue.Set(System.Int32,Nohros.Value)">
            <summary>
            Sets the list item at the given index to be the Value specified by
            the value given. If the index beyond the current end of list, null
            Values will be used to pad out the list.
            </summary>
            <param name="index">The index within the list where the Value will be set.</param>
            <param name="in_value">The Value to set at the given index.</param>
            <returns>true if successful, or false if the index was negative or the value
            is a null reference.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.Get(System.Int32,Nohros.IValue@)">
            <summary>
            Gets the <see cref="T:Nohros.Value"/> object at the given index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value"></param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.GetBoolean(System.Int32,System.Boolean@)">
            <summary>
            Convenience form of Get().
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value">When this method returns, contains the <see cref="T:Nohros.Value"/> associated
            with the specified index if the index falls within the current list range; otherwise null</param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.GetInteger(System.Int32,System.Int32@)">
            <summary>
            Convenience form of Get().
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value">When this method returns, contains the <see cref="T:Nohros.Value"/> associated
            with the specified index if the index falls within the current list range; otherwise null</param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.GetReal(System.Int32,System.Double@)">
            <summary>
            Convenience form of Get().
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value">When this method returns, contains the <see cref="T:Nohros.Value"/> associated
            with the specified index if the index falls within the current list range; otherwise null</param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.GetString(System.Int32,System.String@)">
            <summary>
            Convenience form of Get().
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value">When this method returns, contains the <see cref="T:Nohros.Value"/> associated
            with the specified index if the index falls within the current list range; otherwise null</param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.GetDictionary(System.Int32,Nohros.Collections.DictionaryValue@)">
            <summary>
            Convenience form of Get().
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value">When this method returns, contains the <see cref="T:Nohros.Value"/> associated
            with the specified index if the index falls within the current list range; otherwise null</param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.GetList(System.Int32,Nohros.Collections.ListValue@)">
            <summary>
            Convenience form of Get().
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="out_value">When this method returns, contains the <see cref="T:Nohros.Value"/> associated
            with the specified index if the index falls within the current list range; otherwise null</param>
            <returns>true if the index falls within the current list range; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.Remove(System.Int32,Nohros.IValue@)">
            <summary>
            Removes the <see cref="T:Nohros.Value"/> with the specified index from this list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <param name="value">When this method returns, contains the removed value if the <paramref name="index"/>
            is valid; otherwise, null.</param>
            <returns>true if <paramref name="index"/> is valid; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.Remove(Nohros.IValue)">
            <summary>
            Removes the first instance_ of <paramref name="value"/> found in the list, if any.
            </summary>
            <param name="value">The value</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within the entire list,
            if found; otherwise -1.</returns>
        </member>
        <member name="M:Nohros.Collections.ListValue.Append(Nohros.IValue)">
            <summary>
            Appends a <see cref="T:Nohros.Value"/> to the end of the list.
            </summary>
        </member>
        <member name="M:Nohros.Collections.ListValue.Insert(System.Int32,Nohros.IValue)">
            <summary>
            Insert a <see cref="T:Nohros.Value"/> at index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="in_value">The <see cref="T:Nohros.Value"/> to insert.</param>
            <returns>true if successful, or false if the index was out of range.</returns>
        </member>
        <member name="P:Nohros.Collections.ListValue.Size">
            <summary>
            Get the number of elements actually contained in this List.
            </summary>
        </member>
        <member name="T:Nohros.SupplierOfInstance`1">
            <summary>
            A <see cref="T:Nohros.ISupplier`1"/> that always returns the same instance.
            </summary>
            <remarks><see cref="T:Nohros.SupplierOfInstance`1"/> is similar to
            <see cref="T:Nohros.MemoizingSupplier`1"/>, but instead to create a instance it
            uses the instance that is passed to it on the constructor.
            </remarks>
        </member>
        <member name="M:Nohros.SupplierOfInstance`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.SupplierOfInstance`1"/>
            class by using the specified <paramref name="instance"/> object.
            </summary>
            <param name="instance">The object that will be supplied on every
            call to <see cref="M:Nohros.SupplierOfInstance`1.Supply"/></param>
        </member>
        <member name="M:Nohros.SupplierOfInstance`1.Supply">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.ParameterizedStringPart">
            <summary>
            Represents an embedded parameter in a <see cref="T:Nohros.ParameterizedString"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.ParameterizedStringPart.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.ParameterizedStringPart"/>
            class, using the provided parameter name and value.
            </summary>
            <param name="name">
            The name of the parameter.
            </param>
            <param name="value">
            The value of the parameter. This could be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Nohros.ParameterizedStringPart.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Nohros.ParameterizedStringPart.Value">
            <summary>
            Gets the literal string for this parameterized part.
            </summary>
        </member>
        <member name="P:Nohros.ParameterizedStringPart.IsParameter">
            <summary>
            Gets a value that indicates whether the string is a parameter.
            </summary>
        </member>
        <member name="M:Nohros.ParameterizedStringPartLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.ParameterizedStringPartLiteral"/> class by using the
            specified literal text.
            </summary>
            <param name="literal">
            A string that contains the literal value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="literal"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.ParameterizedStringPartLiteral.Equals(Nohros.ParameterizedStringPartLiteral)">
            <summary>
            Gets a value that indicates whether the provided object is equal to
            this object.
            </summary>
            <param name="other">
            A  <see cref="T:Nohros.ParameterizedStringPartLiteral"/> object.
            </param>
            <returns>
            <c>true</c> if the provided object is equals to this object; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Nohros.ParameterizedStringPartLiteral.Equals(System.Object)">
            <summary>
            Gets a value that indicates whether the provided object is equal to
            this object.
            </summary>
            <param name="obj">
            An object that can be cast to a <see cref="T:Nohros.ParameterizedStringPartLiteral"/>
            object.
            </param>
            <returns>
            <c>true</c> if the provided object is equals to this object; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Nohros.ParameterizedStringPartLiteral.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <remarks>
            This method overrides the <see cref="M:System.Object.GetHashCode"/> and more
            complete documentation might be available in that topic.
            </remarks>
        </member>
        <member name="M:Nohros.ParameterizedStringPartLiteral.ToString">
            <summary>
            Gets the string reprentation of this class, that is the literal value
            contained by this class.
            </summary>
            <returns>
            The literal value contained by this class.
            </returns>
        </member>
        <member name="P:Nohros.ParameterizedStringPartLiteral.Value">
            <summary>
            Gets the literal value of the parameterized string part.
            </summary>
            <remarks>
            <see cref="T:Nohros.ParameterizedStringPartLiteral"/> is value is immutable.
            Attempt to set the value of this property throws an
            <see cref="T:System.NotSupportedException"/> exception.
            </remarks>
        </member>
        <member name="P:Nohros.ParameterizedStringPartLiteral.IsParameter">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Logging.ChainedLogger">
            <summary>
            A implementation of the <see cref="T:Nohros.Logging.ChainedLogger"/> that uses the
            nohros must framework.
            </summary>
            <remarks>
            This class uses the nohros must framework and is the only point where
            this dependency exists. Clients should call the
            <see cref="!:ForCurrentProcess"/> method to obtain an instance of the
            <see cref="T:Nohros.Logging.ChainedLogger"/> class, and uses it to log messages.
            <para>
            By default the <see cref="T:Nohros.Logging.NOPLogger"/> is returned by the
            <see cref="!:ForCurrentProcess"/> method. The application must configure
            the correct logger on the app initialization.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.Logging.ILogger">
            <summary>
            A simple logging interface for logging APIs abstraction.
            </summary>
            <remarks>
            <para>
            This interface is very simple and does not expose some advanced fetures
            that some logging libraries provides. For example, log4net provides
            methods that format the logging message based on some arguments, this
            interface does not declare such methods, because this could be done by
            the client code and could conflict with libraries that do not implement
            this type of functionality.
            </para>
            <para>
            The internal logging library that was used by the this project could
            change and projects that depends on this library will stop working. This
            interface provides an abstraction around the logging API and garantee
            that changes on the underlying logging library does not affect app codes
            that depends on the must framework.
            </para>
            <para>
            The documentation of this class and the methods are based on the Apache
            log4net library. At the time of write log4net is the underlying library
            used by the must framework.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Debug(System.String)">
            <summary>
            Log a message object with the log4net.Core.Level.Debug level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            This method first checks if this logger is DEBUG enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Debug"/> level
            and if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Nohros.Logging.LogLevel.Debug"/> level
            including the stack trace of the <see cref="T:System.Exception"/> passed as a
            parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack
            trace.</param>
            <seealso cref="M:Nohros.Logging.ILogger.Debug(System.String)"/>
            <remarks>
            This method first checks if this logger is DEBUG enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Debug"/> level
            and if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Error(System.String)">
            <summary>
            Logs a message object with the <seealso cref="F:Nohros.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            This method first checks if this logger is ERROR enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Error"/> level
            and if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Nohros.Logging.LogLevel.Error"/> level
            including the stack trace of <see cref="T:System.Exception"/> passed as a
            parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its
            stack trace.</param>
            <seealso cref="M:Nohros.Logging.ILogger.Error(System.String)"/>
            <remarks>
            This method first checks if this logger is ERROR enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Error"/> level
            and if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Fatal(System.String)">
            <summary>
            Log a message object with the log4net.Core.Level.Fatal level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            This method first checks if this logger is FATAL enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Fatal"/> level
            and if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Nohros.Logging.LogLevel.Fatal"/> level
            including the stack trace of the <see cref="T:System.Exception"/> passed as a
            parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack
            trace.</param>
            <remarks>
            This method first checks if this logger is ERROR enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Fatal"/> level
            and if it is enabled the message is logged.
            </remarks>
            <seealso cref="M:Nohros.Logging.ILogger.Fatal(System.String)"/>
        </member>
        <member name="M:Nohros.Logging.ILogger.Info(System.String)">
            <summary>
            Logs a message object with the <see cref="F:Nohros.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            This method first checks if this logger is INFO enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Info"/> level and
            if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
            Logs a message object with the <see cref="F:Nohros.Logging.LogLevel.Info"/> level
            including the stack trace of the <see cref="T:System.Exception"/> passed as a
            parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack
            trace.</param>
            <seealso cref="M:Nohros.Logging.ILogger.Info(System.String)"/>
            <remarks>
            This method first checks if this logger is INFO enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Info"/> level and
            if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Warn(System.String)">
            <summary>
            Log a message object with the log4net.Core.Level.Warn level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            This method first checks if this logger is WARN enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Warn"/> level and
            if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Nohros.Logging.LogLevel.Warn"/> level
            including the stack trace of the <see cref="T:System.Exception"/> passed as a
            parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack
            trace.</param>
            <seealso cref="M:Nohros.Logging.ILogger.Warn(System.String)"/>
            <remarks>
            This method first checks if this logger is WARN enabled by comparing
            the level of the logger with the <see cref="F:Nohros.Logging.LogLevel.Warn"/> level and
            if it is enabled the message is logged.
            </remarks>
        </member>
        <member name="P:Nohros.Logging.ILogger.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the Debug level.
            </summary>
            <remarks>
            This function is intended to lessen the computational cost of disabled
            log debug statements.
            For some ILog interface log, when you write:
            <code>
              log.Debug("This is entry number: " + i );
            </code>
            You incur the cost constructing the message, string construction and
            concatenation in this case, regardless of whether the message is
            logged or not. If you are worried about speed (who isn't), then you
            should write:
            <code>
            if (log.IsDebugEnabled) {
                log.Debug("This is entry number: " + i );
            }
            </code>
            This way you will not incur the cost of parameter construction if
            debugging is disabled for log. On the other hand, if the log is debug
            enabled, you will incur the cost of evaluating whether the logger is
            debug enabled twice. Once in <see cref="P:Nohros.Logging.ILogger.IsDebugEnabled"/> and once in
            the <see cref="M:Nohros.Logging.ILogger.Debug(System.String)"/>. This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it takes to
            actually log. This is the preferred style of logging. Alternatively if
            your logger is available statically then the is debug enabled state
            can be stored in a static variable like this:
            <code>
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
            Then when you come to log you can write:
            <code>
                if (isDebugEnabled) {
                    log.Debug("This is entry number: " + i );
                }
            </code>
            This way the debug enabled state is only queried once when the class
            is loaded. Using a private static readonly variable is the most
            efficient because it is a run time constant and can be heavily
            optimized by the JIT compiler. Of course if you use a static readonly
            variable to hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging that is
            produced. You have to decide if you need absolute speed or runtime
            flexibility.
            </remarks>
        </member>
        <member name="P:Nohros.Logging.ILogger.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Nohros.Logging.LogLevel.Error"/>
            </summary>
            <seealso cref="P:Nohros.Logging.ILogger.IsDebugEnabled"/>
        </member>
        <member name="P:Nohros.Logging.ILogger.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Nohros.Logging.LogLevel.Fatal"/>
            level.
            </summary>
            <seealso cref="P:Nohros.Logging.ILogger.IsDebugEnabled"/>
        </member>
        <member name="P:Nohros.Logging.ILogger.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Nohros.Logging.LogLevel.Info"/>
            level.
            </summary>
            <seealso cref="P:Nohros.Logging.ILogger.IsDebugEnabled"/>
        </member>
        <member name="P:Nohros.Logging.ILogger.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Nohros.Logging.LogLevel.Warn"/>
            level.
            </summary>
            <seealso cref="P:Nohros.Logging.ILogger.IsDebugEnabled"/>
        </member>
        <member name="P:Nohros.Logging.ILogger.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Nohros.Logging.LogLevel.Trace"/>
            level.
            </summary>
            <seealso cref="P:Nohros.Logging.ILogger.IsDebugEnabled"/>
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.#ctor(Nohros.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Logging.ChainedLogger"/> class
            by using the specified logger.
            </summary>
            <param name="logger">The first logger of the chain.</param>
            <remarks>
            The first logger of the chain will dictate the behavior of the methods
            used to check if a particular level is enabled or not. Note that the
            first logger dictates onle the level of the <see cref="T:Nohros.Logging.ChainedLogger"/>
            class, each logger uses it own level to perform logging
            operations.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Debug(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Debug(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Error(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Error(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Fatal(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Fatal(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Info(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Info(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Warn(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.ChainedLogger.Warn(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.ChainedLogger.IsDebugEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.ChainedLogger.IsErrorEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.ChainedLogger.IsFatalEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.ChainedLogger.IsInfoEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.ChainedLogger.IsWarnEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.ChainedLogger.IsTraceEnabled">
            <inherit />
        </member>
        <member name="T:Nohros.Data.Providers.PrepareCommandDelegate">
            <summary>
            Repesents the method that is used to get an instance of a
            <see cref="T:System.Data.IDbCommand"/> that should be executed within the
            context of the <paramref name="context"/> object.
            </summary>
            <param name="context">
            A <see cref="T:Nohros.Data.Providers.ITransactionContext"/> object representing the transaction
            context on which the returned command should be executed.
            </param>
        </member>
        <member name="T:Nohros.Data.Json.JsonShort">
            <summary>
            An implementation of the 
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonShort.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonShort"/> class
            that uses the general number format("G") to convert this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonShort.#ctor(System.Int16,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonShort"/> class
            that uses <paramref name="format"/> to converts this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            The format to use when converting this instance to a string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonShort.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonShort.op_Explicit(System.Int16)~Nohros.Data.Json.JsonShort">
            <summary>
            Explicit converts an <see cref="T:System.Int16"/> object to a
            <see cref="T:Nohros.Data.Json.JsonShort"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Int16"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonShort"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.DataFieldFloat">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Single"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldFloat.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldFloat"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldFloat.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Single"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Single"/> at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldFloat.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldFloat"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldFloat.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Single"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Security.Extensions.Security">
            <summary>
            Common security extension methods.
            </summary>
        </member>
        <member name="M:Nohros.Security.Extensions.Security.MD5Hash(System.String)">
            <summary>
            Computes teh MD5 hash pf the given string.
            </summary>
            <param name="str">
            A string to compute the hash.
            </param>
            <returns>
            The hash of the string <paramref name="str"/>.
            </returns>
        </member>
        <member name="T:Nohros.CustomProviderException">
            <summary>
            Exception thrown when an custom error(an user defined exceotion) is
            raised. For example, when an attempt is made to persistently add an
            item to a repository that would violate the logic of a table trigger.
            </summary>
        </member>
        <member name="M:Nohros.CustomProviderException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.CustomProviderException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.CustomProviderException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.CustomProviderException"/> class.
            </summary>
            <param name="message">
            A message describing why this
            <see cref="T:Nohros.CustomProviderException"/>was throw.
            </param>
        </member>
        <member name="M:Nohros.CustomProviderException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.CustomProviderException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this
            <see cref="T:Nohros.CustomProviderException"/> to be throw.
            </param>
        </member>
        <member name="M:Nohros.CustomProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the
            <see cref="T:Nohros.CustomProviderException"/> class.
            </summary>
            <param name="info">
            The object that holds the information to deserialize.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Nohros.CustomProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.CustomProviderException"/> class.
            </summary>
            <param name="message">
            A message describing why this
            <see cref="T:Nohros.CustomProviderException"/> was throw.
            </param>
            <param name="inner_exception">
            The exception that caused CustomProviderException
            <see cref="T:Nohros.CustomProviderException"/>to be throw.
            </param>
        </member>
        <member name="T:Nohros.Data.ISetStateCommand">
            <summary>
            Associates a string representing a state with a given key.
            </summary>
        </member>
        <member name="M:Nohros.Data.ISetStateCommand.Execute(System.String,System.String)">
            <summary>
            Associates the state represented by <paramref name="state"/> with the
            given <paramref name="name"/>.
            </summary>
            <param name="name">
            A string that can be used to identify the state within a state
            repository.
            </param>
            <param name="state">
            The state to be persisted.
            </param>
        </member>
        <member name="T:Nohros.Data.IHiLoDao">
            <summary>
            Provides an abstract interface to the database where information about
            the HiLo ids is stored.
            </summary>
        </member>
        <member name="M:Nohros.Data.IHiLoDao.GetNextHi(System.String)">
            <summary>
            Get the next High value for the given <see cref="!:key"/>.
            </summary>
            <param name="key">
            The key to get the next High value.
            </param>
            <returns>
            The next High value for the given key.
            </returns>
        </member>
        <member name="T:Nohros.Data.TypeMapType">
            <summary>
            Defines the type that a <see cref="T:Nohros.Data.ITypeMap"/> maps to.
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.String">
            <summary>
            Maps to a column from the datareader.
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.ConstString">
            <summary>
            Maps to a constant string.
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Int">
            <summary>
            Maps to a constant <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Boolean">
            <summary>
            Maps to a constant <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Long">
            <summary>
            Maps to a constant <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Float">
            <summary>
            Maps to a constant <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Double">
            <summary>
            Maps to a constant <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Char">
            <summary>
            Maps to a constant <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Byte">
            <summary>
            Maps to a constant <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Short">
            <summary>
            Maps to a constant <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Ignore">
            <summary>
            Maps to the default value of a type.
            </summary>
        </member>
        <member name="F:Nohros.Data.TypeMapType.Decimal">
            <summary>
            Maps to A CONSTANT <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="T:Nohros.Data.IgnoreMapType">
            <summary>
            Ignores the property, and throws a <see cref="T:System.NotImplementedException"/>
            when an attempt to get the value of the property is made.
            </summary>s
        </member>
        <member name="M:Nohros.Data.IgnoreMapType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DoubleMapType"/> class
            using the specified column name.
            </summary>
        </member>
        <member name="M:Nohros.Data.IgnoreMapType.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DoubleMapType"/> class
            using the specified column name.
            </summary>
        </member>
        <member name="T:Nohros.Data.DataFieldDateTime">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.String"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldDateTime.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldDateTime"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldDateTime.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a string
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a string
            at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldDateTime.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldDateTime"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldDateTime.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.String"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Data.NextHighDelegate">
            <summary>
            A method that is called to get the next High value for the given key.
            </summary>
            <param name="key">
            A string that identifies the object to get the next high value(ex. The
            name of a table in a RDBMS).
            </param>
        </member>
        <member name="T:Nohros.Configuration.Builders.ThrowableConfigurationBuilder`1">
            <summary>
            A implementation of the <see cref="T:Nohros.Configuration.IConfigurationBuilder`1"/> that
            throws an <see cref="T:System.NotImplementedException"/> when <see cref="M:Nohros.Configuration.Builders.ThrowableConfigurationBuilder`1.Build"/>
            is called.
            </summary>
            <remarks>
            This main purpose of this class is to allow classes to
            <see cref="T:Nohros.Configuration.AbstractConfigurationLoader`1"/> class without implementing
            the <see cref="T:Nohros.Configuration.IConfigurationBuilder`1"/> interface.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.Builders.ThrowableConfigurationBuilder`1.Build">
            <summary>
            Throws an <see cref="T:System.NotImplementedException"/> exception.
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.SameThreadExecutor">
            <summary>
            Creates an executor service that runs each task in the thread that
            invokes <see cref="M:Nohros.Concurrent.IExecutor.Execute(Nohros.RunnableDelegate)"/>.
            </summary>
            <remarks>
            Tasks are immediately executed in the thread that submitted the task.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.SameThreadExecutor.Execute(Nohros.RunnableDelegate)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Caching.CacheLoaderDelegate`1">
            <summary>
            Defines the signature of the method that are used to populate a
            <see cref="T:Nohros.Caching.ICache`1"/>.
            </summary>
        </member>
        <member name="T:Nohros.Caching.CacheBuilder`1">
            <summary>
            A builder of <see cref="T:Nohros.Caching.ICache`1"/> and <see cref="T:Nohros.Caching.ILoadingCache`1"/>.
            </summary>
            <typeparam name="T">
            The type of the objects that is stored in cache.
            </typeparam>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.CacheBuilder`1"/> using.
            </summary>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.Build(Nohros.Caching.Providers.ICacheProvider,Nohros.Caching.CacheLoader{`0})">
            <summary>
            Builds a cache, which either returns an already-loaded value for a
            given key or atomically computes or retrieves it using the supplied
            <see cref="T:Nohros.Caching.CacheLoader`1"/>.
            </summary>
            <param name="loader">
            The cache loader used to obtain new values.
            </param>
            <param name="provider">
            An object that implements the plugabble <see cref="T:Nohros.Caching.Providers.ICacheProvider"/>
            interface and is used to cache the objects.
            </param>
            <returns>
            A <see cref="T:Nohros.Caching.ILoadingCache`1"/> object having the requested features.
            </returns>
            <remarks>
            If another thread is currently loadind the value for the given key,
            the returned cache, simply waits for that thread to finish and returns
            its loaded value. Note that multiple threads can concurrently load
            values for distinct keys.
            <para>
            This method does not alter the state of the
            <see cref="T:Nohros.Caching.CacheBuilder`1"/> instance, so it can be invoked again to
            create multiple independent caches.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.Build(Nohros.Caching.Providers.ICacheProvider)">
            <summary>
            Builds a cache which does not automatically load values when keys are
            requested.
            </summary>
            <param name="provider">
            An object that implements the plugabble <see cref="T:Nohros.Caching.Providers.ICacheProvider"/>
            interface and is used to cache the objects.
            </param>
            <returns>
            A <see cref="T:Nohros.Caching.ICache`1"/> object having the requested features.
            </returns>
            <remarks>
            Consider <see cref="M:Nohros.Caching.CacheBuilder`1.Build(Nohros.Caching.Providers.ICacheProvider,Nohros.Caching.CacheLoader{`0})"/> instead,
            if it is feasible to implement a <see cref="T:Nohros.Caching.CacheLoader`1"/>.
            <para>
            This method does not alter the state of the
            <see cref="T:Nohros.Caching.CacheBuilder`1"/> instance, so it can be invoked again to
            create multiple independent caches.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.ExpireAfterAccess(System.TimeSpan)">
            <summary>
            Specifies that each entry should be automatically removed from the
            cache once a fixed duration has elapsed after entry's creation, the
            most recent replacement of its value, or its last access.
            </summary>
            <param name="duration">
            The length of time after an entry is last
            accessed that it should be automatically removed.</param>
            <returns>
            This cache builder instance with the expire after nanos
            set to the specified values.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            You set the <paramref name="duration"/> to a value that is less than
            zero.
            </exception>
            <remarks>Expired entries may be counted in <see cref="P:Nohros.Caching.ICache`1.Size"/>,
            but should never be visible to read or write operations.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.ExpireAfterWrite(System.TimeSpan)">
            <summary>
            Specifies that each entry should be automatically removed from the
            cache once a fixed duration has elapsed after the entry's creation,
            or the most recent replacement of its value.
            </summary>
            <param name="duration">
            The length of time after an entry is created
            that it should be automatically. removed.
            </param>
            <returns>This cache builder instance with the expire after nanos
            set to the specified values.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            You set the
            <paramref name="duration"/> to a value that is less than zero.
            </exception>
            <remarks>
            Expired entries may be counted in <see cref="!:ICache.Size"/>,
            but should never be visible to read or write operations.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.RefreshAfterWrite(System.TimeSpan)">
            <summary>
            Specifies that active entries are eligible for automatic refresh once
            a fixed duration has elapsed after the entry's creation, or the most
            recent replacement of its value.
            </summary>
            <param name="duration"></param>
            <returns></returns>
            <remarks>
            <para>
            The semantics of refreshes are specified in
            <see cref="!:ILoadingCache&lt;T&gt;.Refresh()"/>, and are performed by calling
            <see cref="M:Nohros.Caching.CacheLoader`1.Load(System.String)"/>.
            <para>
            As the default implementation
            TODO: continue.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.CacheBuilder`1.StrongValues">
            <summary>
            Specifies that each value (not keys) stored in the cache should be
            strongly referenced.
            </summary>
        </member>
        <member name="P:Nohros.Caching.CacheBuilder`1.ExpiryAfterWriteNanos">
            <summary>
            Gets a 64-bit integer that indicates how long after the last access to
            an entry in the cache will retain that entry.
            </summary>
        </member>
        <member name="P:Nohros.Caching.CacheBuilder`1.ExpiryAfterAccessNanos">
            <summary>
            Gets a 64bit integer that indicates how long after the last write to
            an entry in the cache will retain that entry.
            </summary>
        </member>
        <member name="P:Nohros.Caching.CacheBuilder`1.RefreshNanos">
            <summary>
            Gets a 64-bit integer that indicates how long after the last write an
            entry becomes a candidate for refresh.
            </summary>
        </member>
        <member name="M:Nohros.ValueTypes.TryParse(System.Type,System.String,System.ValueType@)">
            <summary>
            Returns a ValueType with the specified <paramref name="ValueType"/> and
            whose value is equivalent to the specified <paramref name="s"/>
            </summary>
            <param name="type">
            A <paramref name="ValueType"/>
            </param>
            <param name="s">
            A string containing a value to parse.
            </param>
            <param name="result">
            When this method returns, a ValueType whose type is
            <paramref name="ValueType"/> an whose value is equivalent to
            <paramref name="s"/> or default(ValueType) if the conversion is not
            supported.
            </param>
            <returns></returns>
        </member>
        <member name="T:Nohros.GenericValue`1">
            <summary>
            Represents a Generic class value.
            </summary>
        </member>
        <member name="M:Nohros.GenericValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance_ of the Generic&lt;T&gt; class by using the specified value.
            </summary>
            <param name="in_value">The underlying generic value. </param>
        </member>
        <member name="M:Nohros.GenericValue`1.FromT(`0)">
            <summary>
            Creates a new instance of the <see cref="!:Generic&lt;T&gt;"/> class, using the specified
            <typeparamref name="T"/> object.
            </summary>
            <param name="t"></param>
            <returns>A instance of the <see cref="!:Generic&lt;T&gt;"/> class with underlying type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Nohros.GenericValue`1.Equals(Nohros.IValue)">
            <summary>
            Determines whether the specified <see cref="T:Nohros.Value"/> is equal to the current <see cref="T:Nohros.Value"/>
            </summary>
            <param name="other">The <see cref="T:Nohros.Value"/> to compare with the current <see cref="T:Nohros.Value"/></param>
            <returns>true if the specified <see cref="T:Nohros.Value"/> is equals to the current <see cref="T:Nohros.Value"/>; otherwise, false.</returns>
        </member>
        <member name="P:Nohros.GenericValue`1.TValue">
            <summary>
            Gets the underlying value for this Value.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonStringBuilder">
            <summary>
            A <see cref="T:Nohros.Data.Json.JsonStringBuilder"/> is a builder that is used to build
            string-like json elements.
            </summary>
            <remarks>
            This class is a simple builder and should be used only to simplify the
            json serialization process. The Write(..) methods do not perform any
            validation of the correctness of the JSON format, it simple writes the
            data (escaping when nescessary). We do not guarantee that the final
            string is a valid json string, but we can ensure that each Write(..)
            method writes a valid json element.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonStringBuilder"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteBeginArray">
            <summary>
            Appends the begin array token to the current json string.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteEndArray">
            <summary>
            Appends the end array token to the current json string.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.Run(System.Action{Nohros.Data.Json.JsonStringBuilder})">
            <summary>
            Executes the action <paramref name="action"/> and returns the instance
            of the <see cref="T:Nohros.Data.Json.JsonStringBuilder"/> object where the
            <see cref="M:Nohros.Data.Json.JsonStringBuilder.Run(System.Action{Nohros.Data.Json.JsonStringBuilder})"/> method was called.
            </summary>
            <param name="action">
            A <see cref="T:System.Action`1"/> to be executed.
            </param>
            <returns>
            The instance of the <see cref="T:Nohros.Data.Json.JsonStringBuilder"/> where the
            <see cref="M:Nohros.Data.Json.JsonStringBuilder.Run(System.Action{Nohros.Data.Json.JsonStringBuilder})"/> method was called.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteBeginObject">
            <summary>
            Appends the begin object token to the current json string.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WrapInObject(System.Action{Nohros.Data.Json.JsonStringBuilder})">
            <summary>
            Appends the begin object token to the current json string, execute
            the <see cref="T:System.Action`1"/> and appends the end object token the the
            current json string.
            </summary>
            <param name="action">
            A <see cref="T:System.Action`1"/> to be executed after appending the begin
            object token to the current json string.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WrapInArray(System.Action{Nohros.Data.Json.JsonStringBuilder})">
            <summary>
            Appends the begin array token to the current json string, execute
            the <see cref="T:System.Action`1"/> and appends the end array token the the
            current json string.
            </summary>
            <param name="action">
            A <see cref="T:System.Action`1"/> to be executed after appending the begin
            array token to the current json string.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteEndObject">
            <summary>
            Appends the end object token to the current json string.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteString(System.String)">
            <summary>
            Appends the string <paramref name="value"/> to the current json string.
            </summary>
            <remarks>
            This method encloses the string in a double quotes.
            <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteUnquotedString(System.String)">
            <summary>
            Appends the string <paramref name="value"/> to the current json string.
            </summary>
            <remarks>
            This method write the specified string as is, which means that it do
            not encloses the string in a double quotes.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.ForEach``1(System.Collections.Generic.IEnumerable{``0},Nohros.Data.Json.JsonStringBuilder.ForEachDelegate{``0})">
            <summary>
            Performs the specified action on each element of the
            <see cref="!:elements"/> collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements">
            A collection of elements to perform the <see cref="T:Nohros.Data.Json.JsonStringBuilder.ForEachDelegate`1"/>
            action over each element.
            </param>
            <param name="action">
            The <see cref="T:Nohros.Data.Json.JsonStringBuilder.ForEachDelegate`1"/> delegate to perform on each
            element of <paramref name="elements"/> collection.
            </param>
            <remarks>
            The <see cref="T:Nohros.Data.Json.JsonStringBuilder.ForEachDelegate`1"/> is a delegate to a method that
            performs an action on the object passed to it. The elements of the
            <paramref name="elements"/> are individually passed to the
            <see cref="T:Nohros.Data.Json.JsonStringBuilder.ForEachDelegate`1"/> delegate.
            <para>
            This method is a O(n) operation, where n is the number of elements
            of the <paramref name="elements"/> collection.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteNumber(System.Int32)">
            <summary>
            Appends the string representation of the integer
            <paramref name="value"/> to the current json string.
            </summary>
            <param name="value">
            The integer value to be appended to the current json string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteNumber(System.Int64)">
            <summary>
            Writes the string representation of the long
            <paramref name="value"/> to the current json string.
            </summary>
            <param name="value">
            The long value to be appended to the current json string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteNumber(System.Double)">
            <summary>
            Writes the string representation of the double
            <paramref name="value"/> to the current json string.
            </summary>
            <param name="value">
            The double value to be appended to the current json string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteNumber(System.Int32,System.String)">
            <summary>
            Writes the string representation of the integer
            <paramref name="value"/> to the current json string using the specified
            format.
            </summary>
            <param name="value">
            The integer value to be appended to the current json string.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <remarks>
            This method does not check if the specified format is a valid json
            format.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteNumber(System.Int64,System.String)">
            <summary>
            Writes the string representation of the long
            <paramref name="value"/> to the current json string using the specified
            format.
            </summary>
            <param name="value">
            The long value to be appended to the current json string.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is invalid or not supported.
            </exception>
            <remarks>
            This method does not check if the specified format is a valid json
            format.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteNumber(System.Double,System.String)">
            <summary>
            Writes the string representation of the double
            <paramref name="value"/> to the current json string using the specified
            format.
            </summary>
            <param name="value">
            The double value to be appended to the current json string.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is invalid or not supported.
            </exception>
            <remarks>
            This method does not check if the specified format is a valid json
            format.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.String)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is <paramref name="value"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <remarks>
            This method encloses the name and value in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":"value"
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMemberName(System.String)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <remarks>
            This method encloses the name and in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Int32)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is <paramref name="value"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Int64)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is <paramref name="value"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Double)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is <paramref name="value"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Decimal)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is <paramref name="value"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Int32,System.String)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is the string representation of
            <paramref name="value"/> formatted using the specified
            <paramref name="format"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            <para>
            This method does not check if the specified format is a valid json
            format.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Int64,System.String)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is the string representation of
            <paramref name="value"/> formatted using the specified
            <paramref name="format"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            <para>
            This method does not check if the specified format is a valid json
            format.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Double,System.String)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is the string representation of
            <paramref name="value"/> formatted using the specified
            <paramref name="format"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            <para>
            This method does not check if the specified format is a valid json
            format.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.WriteMember(System.String,System.Decimal,System.String)">
            <summary>
            Appends the json string that represents a member which name is
            <paramref name="name"/> and value is the string representation of
            <paramref name="value"/> formatted using the specified
            <paramref name="format"/>.
            </summary>
            <param name="name">
            The name part of the json member.
            </param>
            <param name="value">
            The value part of the json member.
            </param>
            <param name="format">
            A standard or custom numeric format string.
            </param>
            <remarks>
            This method encloses the name in a double quotes.
            <para>
            The string that will be append should be something like the string
            above:
            </para>
            <para>
            "name":value
            </para>
            <para>
            This method does not check if the specified format is a valid json
            format.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.Escape(System.String)">
            <summary>
            Escapes a minimal set of characters (\n,\\,\r,\t,",\f,\b) by replacing
            them with their escapes codes.
            </summary>
            <returns>The escaped version of <see cref="!:token"/></returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.Escape">
            <summary>
            Escapes a minimal set of characters (\n,\\,\r,\t,",\f,\b) by replacing
            them with their escapes codes within the last written token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.ToString">
            <summary>
            Gets the string representing the current json string contained in
            this builder.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonStringBuilder.Token">
            <summary>
            Wraps a token and its type into a single object.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonStringBuilder.Token.#ctor(System.String,Nohros.Data.Json.JsonStringBuilder.TokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonStringBuilder.Token"/> class by using
            the token value and type.
            </summary>
            <param name="value">
            The token's values.
            </param>
            <param name="type">
            The type of the token.
            </param>
        </member>
        <member name="P:Nohros.Data.Json.JsonStringBuilder.Token.Value">
            <summary>
            Gets the  token's value.
            </summary>
        </member>
        <member name="P:Nohros.Data.Json.JsonStringBuilder.Token.Type">
            <summary>
            Gets the type of the token.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonStringBuilder.TokenType">
            <summary>
            Provides a way to identify if a token is a structural token or a
            token whose value was specified by the user.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonStringBuilder.BuilderDelegate">
            <summary>
            Defines a method that executes an operation using a
            <see cref="T:Nohros.Data.Json.JsonStringBuilder"/> object that returns that object after
            the operation is completed.
            </summary>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonStringBuilder"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Data.Json.JsonStringBuilder.ForEachDelegate`1">
            <summary>
            Defines the method that is called by the
            <see cref="M:Nohros.Data.Json.JsonStringBuilder.ForEach``1(System.Collections.Generic.IEnumerable{``0},Nohros.Data.Json.JsonStringBuilder.ForEachDelegate{``0})"/> method for each element
            in the collection passed to thar method.
            </summary>
            <typeparam name="T">
            The type of objects that the collection passed to the
            <see cref="M:Nohros.Data.Json.JsonStringBuilder.ForEach``1(System.Collections.Generic.IEnumerable{``0},Nohros.Data.Json.JsonStringBuilder.ForEachDelegate{``0})"/> method contain.
            </typeparam>
            <param name="obj"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance_ of the TransferQueue class that is empty and has the specified size.
            </summary>
            <param name="capacity">The maximun number of elements that the TransferQueue can contain.</param>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance_ of the TransferQueue class that contains elements copied from the specified
            collection and has specified size.
            </summary>
            <param name="collection">The collection whose elements are copied to the new TransferQueue</param>
            <exception cref="T:System.ArgumentNullException">collection is null</exception>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the TransferQueue
            </summary>
            <param name="item">The object to add to the TransferQueue. The value can be null for references types.</param>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the TransferQueue.
            </summary>
            <returns>The object that is removed from the beginning of the TransferQueue.</returns>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the TransferQueue without removing it.
            </summary>
            <returns>The object at the beginning og the TransferQueue</returns>
            <exception cref="T:System.InvalidOperationException">The TransferQueue is empty</exception>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.Clear">
            <summary>
            Removes all objects from the TransferQueue.
            </summary>
            <remarks>Count is set to zero, and references to other objects from elements of the collection are
            released. This method does not fire any event.</remarks>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.Reset">
            <summary>
            Resets the queue to its initial state.
            </summary>
            <remarks>Count is set to zero but references to other objects from elements of the collection are not
            released(to release references call the <see cref="M:Nohros.Data.TransferQueue`1.Clear"/> method.</remarks>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.Flush">
            <summary>
            Removes all objects from the TransferQueue.
            </summary>
            <remarks>Count is set to zero, and references to other objects from elements of the collection are
            released. This method fire the OnQueueFull event.</remarks>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the TransferQueue elements to an existing one-dimensional Array, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> taht is destination of the elements copied
            from TransferQueue. The <see cref="T:System.Array"/>must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based indexin array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or index is greater than the length of the array</exception>
            <exception cref="T:System.ArgumentNullException">array is null</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source TransferQueue is greater than the
            available space from index to the end of the destination array</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Data.TransferQueue`1.GetEnumerator" -->
        <member name="M:Nohros.Data.TransferQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection</returns>
        </member>
        <member name="M:Nohros.Data.TransferQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the TransferQueue
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the TransferQueue</returns>
        </member>
        <member name="P:Nohros.Data.TransferQueue`1.Count">
            <summary>
            Gets the number of elements contained in the TransferQueue.
            </summary>
        </member>
        <member name="T:Nohros.Collections.InOrderVisitor`1">
            <summary>
            A visitor that visits single objects in order.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
            <remarks>This class only wraps the methods of the <see cref="T:Nohros.Collections.IVisitor`1"/>.
            It is useful for classes that could be traversed in different
            orders(PreOrder, PostOrder, InOrder, ...)</remarks>
        </member>
        <member name="T:Nohros.Collections.IVisitor`1">
            <summary>
            Provides an interface for visitors that visits single objects.
            </summary>
        </member>
        <member name="M:Nohros.Collections.IVisitor`1.Visit(`0,System.Object)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
            <param name="state">
            A user-defined object that qualifies or contains information about the
            visitor's current state.
            </param>
        </member>
        <member name="P:Nohros.Collections.IVisitor`1.IsCompleted">
            <summary>
            Gets a value indicating whether the visitor is done performing your work.
            </summary>
            <value>
            <c>true</c> if the visitor is done performing your work; otherwise
            <c>false</c>.
            </value>
            <remarks>
            This property is typically used in collection traversal operations. In
            some situations a collection need to be traversed(in some order) and
            the traversal operation must be stoped at some point. A visitor could
            inform the visited collection about the stop point, by setting the
            value of this property to false. The visited collection can check the
            value of this property for each visited element and then determine when
            the traversal operation must be stoped.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.InOrderVisitor`1.#ctor(Nohros.Collections.IVisitor{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:InOrderVisitor"/> class by
            using the specified visitor.
            </summary>
            <param name="visitor">The visitor to use when visiting the object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is
            a null reference.</exception>
        </member>
        <member name="M:Nohros.Collections.InOrderVisitor`1.Visit(`0,System.Object)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
            <param name="state">A user-defined object that qualifies or contains
            information about the visitor's
            current state.</param>
        </member>
        <member name="P:Nohros.Collections.InOrderVisitor`1.IsCompleted">
            <summary>
            Gets a value indicating whether the visitor is done performing your
            work.
            </summary>
            <value><c>true</c> if the visitor is done performing your work;
            otherwise <c>false</c>.</value>
            <remarks>
            This property is typically used in collection traversal operations.
            In some situations a collection need to be traversed(in some order) and
            the traversal operation must be stoped at some point. A visitor could
            inform the visited collection about the stop point by setting the
            value of this property to false. The visited collection can check the
            value of this property for each visited element and then determine
            when the traversal operation must be stoped.
            </remarks>
        </member>
        <member name="T:Nohros.Collections.InOrderVisitor`2">
            <summary>
            A visitor that visits compound objects in order. Compound objects are
            objects that are identified by more than one object.<example>A node
            within a <see cref="T:System.Collections.Generic.IDictionary`2"/></example>
            </summary>
            <typeparam name="T1">The type of objects to be visited.</typeparam>
            <remarks>This class only wraps the methods of the
            <see cref="T:Nohros.Collections.IVisitor`1"/>. It is useful for classes that could be
            traversed in different orders(PreOrder, PostOrder, InOrder, ...).
            </remarks>
        </member>
        <member name="T:Nohros.Collections.IVisitor`2">
            <summary>
            Provides an interface for visitors that visits compound objects. That is,
            bjects that are identified by more than one object.
            <example>
            A node within a <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </example>
            </summary>
        </member>
        <member name="M:Nohros.Collections.IVisitor`2.Visit(`0,`1,System.Object)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj1">
            The first component of the object to visit.
            </param>
            <param name="obj2">
            The second component of the object to visit.
            </param>
            <param name="state">
            A user-defined object that qualifies or contains information about the
            visitor's current state.
            </param>
        </member>
        <member name="P:Nohros.Collections.IVisitor`2.IsCompleted">
            <summary>
            Gets a value indicating whether the visitor is done performing your
            work.
            </summary>
            <value>
            <c>true</c> if the visitor is done performing your work; otherwise
            <c>false</c>.</value>
            <remarks>
            This property is typically used in collection traversal operations. In
            some situations a collection need to be traversed(in some order) and
            the traversal operation must be stoped at some point. A visitor could
            inform the visited collection about the stop point, by setting the
            value of this property to false. The visited collection can check the
            value of this property for each visited element and then determine when
            the traversal operation must be stoped.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.InOrderVisitor`2.#ctor(Nohros.Collections.IVisitor{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.InOrderVisitor`1"/> class
            by using the specified visitor.
            </summary>
            <param name="visitor">The visitor to use when visiting the object.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is
            a null reference.</exception>
        </member>
        <member name="M:Nohros.Collections.InOrderVisitor`2.Visit(`0,`1,System.Object)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj1">The first component of the object to visit.</param>
            <param name="obj2">The second component of the object to visit.</param>
            <param name="state">A user-defined object that qualifies or contains
            information about the visitor's current state.</param>
        </member>
        <member name="P:Nohros.Collections.InOrderVisitor`2.IsCompleted">
            <summary>
            Gets a value indicating whether the visitor is done performing your
            work.
            </summary>
            <value><c>true</c> if the visitor is done performing your work;
            otherwise <c>false</c>.</value>
            <remarks>
            This property is typically used in collection traversal operations. In
            some situations a collection need to be traversed(in some order) and
            the traversal operation must be stoped at some point. A visitor could
            inform the visited collection about the stop point, by setting the
            value of this property to false. The visited collection can check the
            value of this property for each visited element and then determine when
            the traversal operation must be stoped.
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.SerialExecutorState`1">
            <summary>
            A <see cref="T:Nohros.Concurrent.ExecutorState`1"/> that encapsulates a
            <see cref="T:Nohros.RunnableDelegate"/> and a <see cref="T:Nohros.Concurrent.ExecutorState`1"/>.
            </summary>
            <remarks>
            A <see cref="T:Nohros.Concurrent.SerialExecutorState`1"/> is a class that encapsulates the
            executor delegate and its associated state, so it can be used by an
            executor to serialize the execution of an task. It can also be used like
            an generic parameter to delegates that requires only one parameter such
            as <see cref="T:System.Threading.ParameterizedThreadStart"/> delegate.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.ExecutorState`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.ExecutorState`1"/>
            class using the specified state.
            </summary>
        </member>
        <member name="P:Nohros.Concurrent.ExecutorState`1.Runner">
            <summary>
            Gets or sets the object that delegates the execution of a method, that
            is the method caller.
            </summary>
            <value>The object that delgates the execution of the method, taht is,
            the method caller.</value>
            <remarks> If this property is not set before the execution of the
            delegate, it will be set to the <see cref="!:IExecutor&lt;T&gt;"/> object that
            is currently running the delegate.
            </remarks>
        </member>
        <member name="P:Nohros.Concurrent.ExecutorState`1.State">
            <summary>
            Gets an user-defined object that qualifies or contains information
            about the method delegate that a <see cref="!:IExecutor&lt;T&gt;"/> will run.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.SerialExecutorState`1.#ctor(Nohros.RunnableDelegate,Nohros.Concurrent.ExecutorState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.SerialExecutorState`1"/>
            by using the specified executor delegate and its associated state.
            </summary>
            <param name="runnable"></param>
            <param name="state"></param>
        </member>
        <member name="P:Nohros.Concurrent.SerialExecutorState`1.Runnable">
            <summary>
            Gets an <see cref="!:IExecutor&lt;T&gt;"/> that was encapsulated by this
            instance.
            </summary>
        </member>
        <member name="T:Nohros.Logging.ILoggerFactory">
            <summary>
            A factory used to create instances of the <see cref="T:Nohros.Logging.ILogger"/> class.
            </summary>
            <remarks>
            This interfaces implies a constructor taht receive no parameters or
            a constructor that receives a parameter of type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            <para>
            When instances of the <see cref="T:Nohros.Logging.ILoggerFactory"/> is dynamically created
            you need to try to build it using the constructor that receives a
            parameter of type <see cref="T:Nohros.Configuration.IConfiguration"/> first, and if it fails
            falls back to the constructor that receives no parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Logging.ILoggerFactory.CreateLogger(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Logging.ILogger"/> class using the
            specified provider node.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> object that contains the
            options for the logger to be created.
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Logging.ILogger"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Data.Json.IJsonCollectionFactory">
            <summary>
            A factory used to create instances of the <see cref="T:Nohros.Data.Json.IJsonCollection"/>
            class.
            </summary>
            <remarks>
            This interface implies a constructor that receives a
            <see cref="T:Nohros.Configuration.IConfiguration"/> object or a constructor with no
            parameters. The constructor that receives a
            <see cref="T:Nohros.Configuration.IConfiguration"/> should be the preferred constructor to
            be use for instantiate the <see cref="T:Nohros.Data.Json.IJsonCollectionFactory"/> class.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.IJsonCollectionFactory.CreateJsonCollection(System.String,System.Data.IDataReader)">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Data.Json.IJsonCollection"/> object by
            using the specified <paramref name="name"/> and
            <paramref name="reader"/>.
            </summary>
            <param name="name">
            A string that identifies the name of the json collection to be created.
            The meaning of this argument is factory specific.
            </param>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> object that contains the data that will be
            used to populate the <see cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Data.Json.IJsonCollection"/> populated with the
            data readed from the <paramref name="reader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.IJsonCollectionFactory.CreateJsonCollection(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Data.Json.IJsonCollection"/> object by
            using the specified collection <paramref name="name"/>.
            </summary>
            <param name="name">
            A string that identifies the name of the json collection to be created.
            The meaning of this argument is factory specific.
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Data.Json.IJsonCollection"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Data.DataFieldDouble">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Double"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldDouble.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldDouble"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldDouble.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Double"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Double"/> at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldDouble.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldDouble"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldDouble.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Double"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Logging.ForwardingLogger">
            <summary>
            An implementation of the <see cref="T:Nohros.Logging.ILogger"/> which forwards all
            its methods to another <see cref="T:Nohros.Logging.ILogger"/> object.
            </summary>
        </member>
        <member name="T:Nohros.Logging.IForwardingLogger">
            <summary>
            An implementation of the <see cref="T:Nohros.Logging.ILogger"/> interface which forwards
            all its methods to another <see cref="T:Nohros.Logging.ILogger"/> object.
            </summary>
        </member>
        <member name="P:Nohros.Logging.IForwardingLogger.Logger">
            <summary>
            Gets the backing logger instance that methods are forwarder to.
            </summary>
        </member>
        <member name="F:Nohros.Logging.ForwardingLogger.logger">
            <summary>
            The backing logger.
            </summary>
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.#ctor(Nohros.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Logging.ForwardingLogger"/> using
            the specified <see cref="T:Nohros.Logging.ILogger"/> as backing logger.
            </summary>
            <param name="logger">
            The logger instance that methods are forwarder to.
            </param>
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Debug(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Fatal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Fatal(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Info(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nohros.Logging.ForwardingLogger.Warn(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.IsDebugEnabled">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.IsErrorEnabled">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.IsFatalEnabled">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.IsInfoEnabled">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.IsWarnEnabled">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.IsTraceEnabled">
            <inheritdoc />
        </member>
        <member name="P:Nohros.Logging.ForwardingLogger.Logger">
            <summary>
            Gets the backing logger instance that methods are forwarder to.
            </summary>
        </member>
        <member name="T:Nohros.Data.DoubleMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Double"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.DoubleMapType.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DoubleMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Configuration.SkippedFile">
            <summary>
            Contains information about a file that was skipped during scanning along
            with a text describing the reason why the file was skipped.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.SkippedFile.FilePath">
            <summary>
            The full path to the file that was skipped
            </summary>
        </member>
        <member name="P:Nohros.Configuration.SkippedFile.SkipReason">
            <summary>
            Description of the reason why this file was skipped
            </summary>
        </member>
        <member name="T:Nohros.Configuration.AssemblyScanner">
            <summary>
            Helpers for assembly scanning operations.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AssemblyScanner.#ctor">
            <summary>
            Creates a new scanner that will scan the base directory of the current
            appdomain
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AssemblyScanner.#ctor(System.String)">
            <summary>
            Creates a scanner for the given directory
            </summary>
            <param name="base_directory_to_scan"></param>
        </member>
        <member name="M:Nohros.Configuration.AssemblyScanner.GetScannableAssemblies">
            <summary>
            Traverses the specified base directory including all sub-directories,
            generating a list of assemblies that can be scanned, a list of
            skipped files, and a list of errors that occurred while scanning.
            Scanned files may be skipped when they're not a .NET assembly.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.AssemblyScanner.ThrowExceptions">
            <summary>
            Determines if the scanner should throw exceptions or not
            </summary>
        </member>
        <member name="T:Nohros.Caching.UnsetValueReference`1">
            <summary>
            Placeholder. Indicates that the value hasn't been set yet.
            </summary>
        </member>
        <member name="T:Nohros.Caching.IValueReference`1">
            <summary>
            A reference to a value.
            </summary>
            <typeparam name="T">The type of the object that this instance reference.
            </typeparam>
        </member>
        <member name="M:Nohros.Caching.IValueReference`1.WaitForValue">
            <summary>
            Waits for a value that still be loading. Unlike <see cref="P:Nohros.Caching.IValueReference`1.Value"/>,
            this method can block(in the case of FutureValueReference).
            </summary>
            <returns></returns>
            <exception cref="T:System.TypeLoadException"> if the loading thread throws an
            exception.</exception>
        </member>
        <member name="P:Nohros.Caching.IValueReference`1.Value">
            <summary>
            Gets the referenced value.
            </summary>
            <remarks>This property should not block ot throw exceptions.</remarks>
        </member>
        <member name="P:Nohros.Caching.IValueReference`1.IsLoading">
            <summary>
            Gets a value indicating if a new value is currently loading,
            regardless or not there is an existing value. It is assumed that the
            return value of this method is constant for any given instance
            <see cref="T:Nohros.Caching.IValueReference`1"/> instance.
            </summary>
        </member>
        <member name="P:Nohros.Caching.IValueReference`1.IsActive">
            <summary>
            Gets a value indicating if this reference contains an active value.
            </summary>
            <remarks>
            An active value is the one that is still considered present in the
            cache. Active values consist of live values, which are returned by
            cache lookups. Non-active values consist strictly of loading values,
            though during refresh a value may be both active and loading.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.UnsetValueReference`1.Nohros#Caching#IValueReference{T}#WaitForValue">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.UnsetValueReference`1.IsLoading">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.UnsetValueReference`1.Nohros#Caching#IValueReference{T}#Value">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.UnsetValueReference`1.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Thrower">
            <summary>
            Defines a internal class used to throw expections.
            The main purpose is to reduce code size.
            
            The common way to throw exception generates quite a lot IL code and
            assembly code. Following is an example:
            <code>
                C# source
                    throw new ArgumentNullException("key", Resources.ArgumentNull_Key)
                IL code:
                    IL_0000:     ldstr   "key"
                    IL_0005:     call   Nohros.Resources::get_ArgumentNull_Key()
                    IL_000a:     newobj instance_ void System.ArgumentNullException::.ctor(string, string)
                    IL_000f:     throw
                which is 16 bytes in IL
            
            So we want to get rid of the ldstr and call to Resources.get_xxx in IL.
            In Order to do that, two enums are created: ExceptionResource, ExceptionArgument to represent the
            argument name and resource in a small integer. The source code will be changed to
            
                C# source
                    Thrower.ThrowArgumentNullException(ExceptionArgument.key, ExceptionResource.ArgumentNull_Key);
                IL code:m
                    IL_0000:    ldc.i4.0
                    IL_0001:    ldc.i4.0
                    IL_0002:    call        void Nohros.Thrower::ThrowArgumentNullException(valuetype Nohros.ExceptionArgument, valuetype ExceptionResource)
                    IL_0007:    ret
                which is 8 bytes in IL
            
            This will also reduce the Jitted code size a lot.
            
            It is very important we do this for generic classes because we can easily
            generate the same code multiple times for diferrent instantiations.
            
            Some methods produce the same Jited size as the common way to through
            exceptions and their exists here only to avoid duplicated code.
            </code>
            </summary>
        </member>
        <member name="M:Nohros.Thrower.GetArgumentName(Nohros.ExceptionArgument)">
            <summary>
            Converts an <see cref="T:Nohros.ExceptionArgument"/> enum value to the argument name string
            </summary>
            <param name="argument">The <see cref="T:Nohros.ExceptionArgument"/> to convert</param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Thrower.GetResourceByName(Nohros.ExceptionResource)">
            <summary>
            Converts an <see cref="T:Nohros.ExceptionResource"/> enum value to the resource string.
            </summary>
            <param name="resource">The <see cref="T:Nohros.ExceptionResource"/> to convert</param>
            <returns>A string representation of the specified <see cref="T:Nohros.ExceptionResource"/></returns>
        </member>
        <member name="M:Nohros.Thrower.ThrowConfigurationException(System.String,System.String)">
            <summary>
            Throws a <see cref="T:System.Configuration.ConfigurationErrorsException"/> and logs the exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="source">A string representing the exception source.</param>
            <remarks>
            The exception is logged by using the <see cref="!:FileLogger"/> class.
            </remarks>
        </member>
        <member name="M:Nohros.Thrower.ThrowInvalidCastException(System.String,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="from_type">
            The original type.
            </param>
            <param name="to_type">
            The type which the type <paramref name="from_type"/> was failed to cast.
            </param>
        </member>
        <member name="T:Nohros.ExceptionArgument">
            <summary>
            The convention for this enum is using the argument name as the enum name.
            </summary>
        </member>
        <member name="T:Nohros.ExceptionResource">
            <summary>
            The convention for this enum is using resource name as the enum name.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.AbstractConfigurationLoader`1">
            <summary>
            A class used to build a <see cref="T:Nohros.Configuration.IConfiguration"/> object from a XML
            file.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IConfigurationLoader`1">
            <summary>
            A class used to build a <see cref="T:Nohros.Configuration.IConfiguration"/> object from a XML
            file.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationLoader`1.LoadAndWatch">
            <summary>
            Loads the configuration values based on the application's configuration
            settings and watch it for modifications.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended.
            <para>This file is XML and calling this function prompts the loader to
            look in that file for a key named [NohrosConfigurationFile] that
            contains the path for the configuration file.
            </para>
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The xml document must constains at leats one node with name euqlas to
            "nohros" that is descendant of the root node.
            </para>
            </remarks>
            <para>
            This methods watches the nohros configuration file for modifications
            and when it is modified the configuration values is reloaded.
            </para>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationLoader`1.LoadAndWatch(System.String)">
            <summary>
            Loads the configuration values based on the application's configuration
            settings and watch it for modifications.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended. This file is XML and
            calling this function prompts the loader to look in that file for a key
            named [NohrosConfigurationFile] that contains the path for the
            configuration file.
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The configuration file must be valid XML. It must contain at least one
            element called <paramref name="root_node_name"/> that contains the
            configuration data. Note that a element with name "nohros" must
            exists some place on the root nodes tree.
            </para>
            <para>
            This methods watches the nohros configuration file for modifications
            and when it is modified the configuration values is reloaded.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationLoader`1.Load">
            <summary>
            Loads the configuration values based on the application's configuration
            settings.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended.
            <para>This file is XML and calling this function prompts the loader to
            look in that file for a key named [NohrosConfigurationFile] that
            contains the path for the configuration file.
            </para>
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The xml document must constains at leats one node with name euqlas to
            "nohros" that is descendant of the root node.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.IConfigurationLoader`1.Load(System.String)">
            <summary>
            Loads the configuration values based on the application's configuration
            settings.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended. This file is XML and
            calling this function prompts the loader to look in that file for a key
            named [NohrosConfigurationFile] that contains the path for the
            configuration file.
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The configuration file must be valid XML. It must contain at least one
            element called <paramref name="root_node_name"/> that contains the
            configuration data. Note that a element with name "nohros" must
            exists some place on the root nodes tree.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationLoader`1.Location">
            <summary>
            Gets the directory path where the configuration file is stored.
            </summary>
            <returns>
            An string that represents the location of the configuration file or the
            application base directory if the location could not be retrieved.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.IConfigurationLoader`1.Version">
            <summary>
            Gets the date and time when one of the Load methods was last called.
            </summary>
        </member>
        <member name="F:Nohros.Configuration.AbstractConfigurationLoader`1.builder">
            <summary>
            The <see cref="T:Nohros.Configuration.IConfigurationBuilder`1"/> object specified on
            constructor or a <see cref="T:Nohros.Configuration.IConfigurationBuilder`1"/> object that
            throws an exception when its
            <see cref="M:Nohros.Configuration.IConfigurationBuilder`1.Build"/> method is called. NOTE
            that is always safe to pass this object to the
            <see cref="T:Nohros.Configuration.Configuration"/> class constructor, even on the later case (
            When the bulder throws an exceotion when <c>Build</c> is called).
            </summary>
        </member>
        <member name="F:Nohros.Configuration.AbstractConfigurationLoader`1.element">
            <summary>
            The raw XML element used to load the configuration.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Configuration.AbstractConfigurationLoader`1"/>.
            </summary>
            <remarks>
            This class uses a builder that throws an exception when the
            <see cref="M:Nohros.Configuration.IConfigurationBuilder`1.Build"/> is called and
            should not be used to build an instance of <see cref="!:T"/> directly.
            However, it is safe to pass it to the <see cref="T:Nohros.Configuration.Configuration"/>
            constructor.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.#ctor(Nohros.Configuration.IConfigurationBuilder{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Configuration.AbstractConfigurationLoader`1"/> class that load the values
            of a XML file into a instance of <typeparamref name="T"/>
            created using the specified <paramref name="builder"/>.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.LoadAndWatch">
            <summary>
            Loads the configuration values based on the application's configuration
            settings and watch it for modifications.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended.
            <para>This file is XML and calling this function prompts the loader to
            look in that file for a key named [NohrosConfigurationFile] that
            contains the path for the configuration file.
            </para>
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The xml document must constains at leats one node with name euqlas to
            "nohros" that is descendant of the root node.
            </para>
            </remarks>
            <para>
            This methods watches the nohros configuration file for modifications
            and when it is modified the configuration values is reloaded.
            </para>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.LoadAndWatch(System.String)">
            <summary>
            Loads the configuration values based on the application's configuration
            settings and watch it for modifications.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended. This file is XML and
            calling this function prompts the loader to look in that file for a key
            named [NohrosConfigurationFile] that contains the path for the
            configuration file.
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The configuration file must be valid XML. It must contain at least one
            element called <paramref name="root_node_name"/> that contains the
            configuration data. Note that a element with name "nohros" must
            exists some place on the root nodes tree.
            </para>
            <para>
            This methods watches the nohros configuration file for modifications
            and when it is modified the configuration values is reloaded.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Load">
            <summary>
            Loads the configuration values based on the application's configuration
            settings.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended.
            <para>This file is XML and calling this function prompts the loader to
            look in that file for a key named [NohrosConfigurationFile] that
            contains the path for the configuration file.
            </para>
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The xml document must constains at leats one node with name euqlas to
            "nohros" that is descendant of the root node.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Load(System.String)">
            <summary>
            Loads the configuration values based on the application's configuration
            settings.
            </summary>
            <remarks>
            Each application has a configuration file. This has the same name as
            the application whith ' .config ' appended. This file is XML and
            calling this function prompts the loader to look in that file for a key
            named [NohrosConfigurationFile] that contains the path for the
            configuration file.
            <para>
            The value of the [NohrosConfigurationFile] must be absolute or relative
            to the application base directory.
            </para>
            <para>
            The configuration file must be valid XML. It must contain at least one
            element called <paramref name="root_node_name"/> that contains the
            configuration data. Note that a element with name "nohros" must
            exists some place on the root nodes tree.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Load(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Load(System.IO.FileInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Load(System.Xml.XmlElement)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.LoadAndWatch(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.LoadAndWatch(System.IO.FileInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.CreateConfiguration(Nohros.Configuration.IConfigurationBuilder{`0})">
            <summary>
            Creates an instance of the <see cref="!:T"/> using the configuration
            information contained in <paramref name="builder"/>.
            </summary>
            <param name="builder">
            A <see cref="T:Nohros.Configuration.Builders.ConfigurationBuilder"/> class that contains the configured
            data loaded from a XML file.
            </param>
            <returns>
            The newly created object.
            </returns>
            <remarks>
            This method is called from the Load method in order to create and
            instance of the type <typeparamref name="T"/>. The default
            implementation just call the
            <see cref="M:Nohros.Configuration.IConfigurationBuilder`1.Build"/> method.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.GetConfigurationElement(System.String)">
            <summary>
            Gets a <see cref="T:System.Xml.XmlElement"/> named <paramref name="element_name"/>
            from the loaded configuration file.
            </summary>
            <param name="element_name">
            The name of the xml element to get.
            </param>
            <returns>
            A <see cref="T:System.Xml.XmlElement"/> which name is
            <paramref name="element_name"/>.
            </returns>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            A <see cref="T:System.Xml.XmlElement"/> named <paramref name="element_name"/> does
            not exists in the configuration file.
            </exception>
            <remarks>
            This is a convenient wrapper for <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectElement(System.Xml.XmlNode,System.String)"/> which uses
            the the <see cref="F:Nohros.Configuration.AbstractConfigurationLoader`1.element"/> as the node parameter.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.GetConfigurationElement(System.String,System.Xml.XmlElement@)">
            <summary>
            Gets a <see cref="T:System.Xml.XmlElement"/> named <paramref name="element_name"/>
            from the loaded configuration file.
            </summary>
            <param name="element_name">
            The name of the xml element to get.
            </param>
            <param name="element">
            A <see cref="T:System.Xml.XmlElement"/> which name is
            <paramref name="element_name"/> if it is found; otwherwise, null.
            </param>
            <returns>
            <c>true</c> when a element whose name is
            <paramref name="element_name"/> is found; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            A <see cref="T:System.Xml.XmlElement"/> named <paramref name="element_name"/> does
            not exists in the configuration file.
            </exception>
            <remarks>
            This is a convenient wrapper for <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectElement(System.Xml.XmlNode,System.String)"/> which uses
            the the <see cref="F:Nohros.Configuration.AbstractConfigurationLoader`1.element"/> as the node parameter.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectNode(System.Xml.XmlNode,System.String)">
            <summary>
            Selects the first sibling <see cref="T:System.Xml.XmlNode"/> of the specified node
            that matches the specified name.
            </summary>
            <param name="node">
            The parent node.
            </param>
            <param name="xpath">
            The xpath of the node to search for.
            </param>
            <returns>
            The first sibling <see cref="T:System.Xml.XmlNode"/> of the <paramref name="node"/>
            whose name matches the specified name or null if no matching node is
            found.
            </returns>
            <remarks>
            Exists a bug into the .NET framework that causes the
            <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String)"/> to work incorrectly.
            When a XML document is explicit bounded to a schema(xmlns="shcema"),
            the following code will return null:
            <para>
              <code>
                doc.SelectSingleNode("/sibling-node");
              </code>
            </para>
            This bug could be worked around by using a
            <see cref="T:System.Xml.XmlNamespaceManager"/> and the
            <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)"/>
            method overload.
            <para>
              <code>
                nsmgr = new XmlNamespaceManager(doc.NameTable);
                nsmgr.AddNamespace("tns", xpath);
                doc.SelectSingleNode("/tns:xpath", nsmgr);
              </code>
            </para>
            <para>
            However, we need to add the prefix "tns" before every element in the
            XPath string,
            <example>/tns:xpath</example>. This is not good, and cause a lot of
            problems.
            </para>
            <para>
            The <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectNode(System.Xml.XmlNode,System.String)"/> method works like the
            <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String)"/> except for the above.
            <list type="bullet">
            <term>
            The namespaces are ignored while selecting a node
            </term>
            <term>
            The "/" is the only recognized token. Any other
            token(., .., //, @, etc) will be considered as part of the node name.
            </term>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectElement(System.Xml.XmlNode,System.String)">
            <summary>
            Selects the first sibling <see cref="T:System.Xml.XmlNode"/> of the specified
            node that matches the specified name and is a xml element.
            </summary>
            <param name="node">
            The parent xml node.
            </param>
            <param name="xpath">
            The xpath of the xml element to search for.
            </param>
            <returns>
            The first sibling <see cref="T:System.Xml.XmlNode"/> of the
            <paramref name="node"/> whose name matches the specified name or null
            if no matching node is found or if a match is found but the found node
            does not represents an xml element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> or <paramref name="xpath"/> is a null
            reference.
            </exception>
            <remarks>
            Exists a bug into the .NET framework that causes the
            <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String)"/> to work incorrectly.
            When a XML document is explicit bounded to a schema(xmlns="shcema"),
            the following code will return null:
            <para>
              <code>
                doc.SelectSingleNode("/sibling-node");
              </code>
            </para>
            This bug could be worked around by using a
            <see cref="T:System.Xml.XmlNamespaceManager"/> and the
            <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)"/>
            method overload.
            <para>
              <code>
                nsmgr = new XmlNamespaceManager(doc.NameTable);
                nsmgr.AddNamespace("tns", xpath);
                doc.SelectSingleNode("/tns:xpath", nsmgr);
              </code>
            </para>
            <para>
            However, we need to add the prefix "tns" before every element in the
            XPath string,
            <example>/tns:xpath</example>. This is not good, and cause a lot of
            problems.
            </para>
            <para>
            The <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectElement(System.Xml.XmlNode,System.String)"/> method works like the
            <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String)"/> except for the above.
            <list type="bullet">
            <term>
            The namespaces are ignored while selecting a node
            </term>
            <term>
            The "/" is the only recognized token. Any other
            token(., .., //, @, etc) will be considered as part of the node name.
            </term>
            <term>
            Only xml nodes whose node type is XmlElement will be returned.
            </term>
            </list>
            </para>
            <para>
            If a xml node (that is not a xml element) and xml element with equals
            names exists in the specified xpath, this method ignores the xml node
            and returns the xml element.
            </para>
            </remarks>
            <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.SelectNode(System.Xml.XmlNode,System.String)"/>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Watch(System.IO.FileInfo)">
            <summary>
            Monitor the configuration file for changes and reload the
            configuration values if a change is detected.
            </summary>
            <param name="config_file_info">
            The XML configuration file to watch.
            </param>
            <remarks>
            The config file will be monitored using a
            <see cref="T:System.IO.FileSystemWatcher"/> and is dependant on the behavior of
            that class.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Watcher_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.Watch(System.IO.FileInfo)"/>
            </summary>
            <param name="source">
            The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.
            </param>
            <param name="e">
            The argument indicates the file that caused the event to be fired.
            </param>
            <remarks>
            This handler reloads the configuration from the file when the event
            is fired.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Watcher_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="M:Nohros.Configuration.AbstractConfigurationLoader`1.Watch(System.IO.FileInfo)"/>
            </summary>
            <param name="source">
            The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.
            </param>
            <param name="e">
            The argument indicates the file that caused the event to be fired.
            </param>
            <remarks>
            This handler reloads the configuration from the file when the event is
            fired.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.GetRootNode(System.Xml.XmlElement)">
            <summary>
            Gets the configuration root node that is the first node whose name is
            "nohros" and is child of the <paramref name="element"/> node.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.Parse(System.Xml.XmlElement)">
            <summary>
            Parses the configuration node using the nohros schema.
            </summary>
            <param name="element">
            A Xml element representing the configuration root node.
            </param>
            <remarks>
            The <paramref name="element"/> does not need to be the nohros
            configuration node, but a node with name "nohros" must exists on the
            node hierarchy.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.GetLogLevel(System.Xml.XmlElement)">
            <summary>
            Gets the configured log level.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.OnLoadComplete(`0)">
            <summary>
            Raises the <see cref="E:Nohros.Configuration.AbstractConfigurationLoader`1.LoadComplete"/> event.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.OnParseComplete(Nohros.Configuration.IConfigurationLoader{`0})">
            <summary>
            Raises the <see cref="E:Nohros.Configuration.AbstractConfigurationLoader`1.ParseComplete"/> event.
            </summary>
            <param name="loader">
            The loader that raises the event.
            </param>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.ParseProperties(System.Xml.XmlElement,`0)">
            <summary>
            Load the configuration values by parsing a DOM tree of XML elements.
            </summary>
            <param name="element">
            The Xml element to parse.
            </param>
            <param name="configuration">
            The object to set the properties.
            </param>
            <remarks>
            This method is used to assign values from the root attributes
            to the configuration properties dynamically.
            <para>
            If <paramref name="configuration"/> contains a property whose name are
            equals to the name of an XML attribute of the <paramref name="element"/>
            node and if the property is writtable and it type is a ValueType or a
            String, we will try to set the value of this property to the value of
            the XML attribute. If the value of the XML attribute could not be
            converted to the ValueType of the property the property value will not
            be set.
            </para>
            <para>
            By default the character "-" will be removed from the attribute name
            before property search operation. This behavior could be changed by
            set the value of the <see cref="P:Nohros.Configuration.AbstractConfigurationLoader`1.RemoveHyphenFromAttributeNames"/> to
            false.
            </para>
            <para>
            The dynamic property assignment behavior could be changed by set the
            value of the property <see cref="P:Nohros.Configuration.AbstractConfigurationLoader`1.UseDynamicPropertyAssignment"/> to
            false.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.ParseProperties(System.Xml.XmlElement)">
            <summary>
            Load the configuration values by parsing a DOM tree of XML elements.
            </summary>
            <param name="element">
            The Xml element to parse.
            </param>
            <remarks>
            This method is used to assign values from the root attributes
            to the configuration properties dynamically.
            <para>
            If a derived class contains a property whose name are equals to the
            name of an XML attribute of the <paramref name="element"/> node and if
            the property is writtable and it type is a ValueType or a String, we
            will try to set the value of this property to the value of the XML
            attribute. If the value of the XML attribute could not be converted to
            the ValueType of the property the property value will not be set.
            </para>
            <para>
            We do not want to throw an exception inside a protected method. So, the
            caller must ensure that the elelement is a valid XML element. If the
            specified XML element is a null refrence this method returns silently.
            </para>
            <para>
            By default the character "-" will be removed from the attribute name
            before property search operation. This behavior could be changed by
            set the value of the <see cref="P:Nohros.Configuration.AbstractConfigurationLoader`1.RemoveHyphenFromAttributeNames"/> to
            false.
            </para>
            <para>
            The dynamic property assignment behavior could be changed by set the
            value of the property <see cref="P:Nohros.Configuration.AbstractConfigurationLoader`1.UseDynamicPropertyAssignment"/> to
            false.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.AbstractConfigurationLoader`1.TryGetProperty(System.Reflection.PropertyInfo[],System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Try to find a property which name is equals to the specified property
            name.
            </summary>
            <param name="properties">The properties array to search for.</param>
            <param name="property_name">The name of the property to find.</param>
            <param name="property">When this method returns contains a property
            whose name is <paramref name="property_name"/>. If a property with
            name <see cref="!:property_name"/> could not be found, the
            <paramref name="property_name"/> will contains null.</param>
            <returns>true if a property with name <paramref name="property_name"/>
            is found; otherwise, false.</returns>
        </member>
        <member name="P:Nohros.Configuration.AbstractConfigurationLoader`1.Location">
            <summary>
            Gets the directory path where the configuration file is stored.
            </summary>
            <returns>
            An string that represents the location of the configuration file or the
            application base directory if the location could not be retrieved.
            </returns>
        </member>
        <member name="P:Nohros.Configuration.AbstractConfigurationLoader`1.Version">
            <summary>
            Gets the date and time when one of the Load methods was last called.
            </summary>
        </member>
        <member name="E:Nohros.Configuration.AbstractConfigurationLoader`1.LoadComplete">
            <summary>
            Occurs when the configuration load finish.
            </summary>
            <remarks>
            <para>
            This event is raised only if the configuration file is loaded
            succesfully.
            </para>
            <para>
            Note that if a error occurs while the configuration file is parsed,
            this event will not be raised.
            </para>
            </remarks>
        </member>
        <member name="E:Nohros.Configuration.AbstractConfigurationLoader`1.ParseComplete">
            <summary>
            Occurs when the configuration loader finish the parsing step.
            </summary>
            <remarks>
            The end of the parsing step occurs right before the configuration
            class is builded.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.AbstractConfigurationLoader`1.UseDynamicPropertyAssignment">
            <summary>
            Gets a value indicating if the dynamic property assignment feature must
            be used or not.
            </summary>
            <value>true to use the dynamic property assignment feature; otherwise,
            false.</value>
        </member>
        <member name="P:Nohros.Configuration.AbstractConfigurationLoader`1.RemoveHyphenFromAttributeNames">
            <summary>
            Gets a value indicating if the hyphen sign("_") should be removed from
            the attribute name before find for a property with equals name.
            </summary>
            <value>true to remove the hyphen; otherwise, false.</value>
        </member>
        <member name="T:Nohros.Configuration.AbstractConfigurationLoader`1.LoadCompleteEventHandler">
            <summary>
            Defines a method to handle the
            <see cref="E:Nohros.Configuration.AbstractConfigurationLoader`1.LoadComplete"/> events.
            </summary>
            <param name="configuration">The <see cref="T:Nohros.Configuration.IConfiguration"/> that
            has been loaded.</param>
        </member>
        <member name="T:Nohros.Configuration.AbstractConfigurationLoader`1.LoaderFactoryDelegate">
            <summary>
            A delegate that acts as a factory and is used to create an instance of
            <typeparamref name="T"/>.
            </summary>
            <param name="loader">The <see cref="T:Nohros.Configuration.AbstractConfigurationLoader`1"/>
            that is executing the delegate.</param>
            <param name="builder">
            A <see cref="T:Nohros.Configuration.Builders.ConfigurationBuilder"/> object that contains the
            already loaded configuration data.
            </param>
            <returns></returns>
        </member>
        <member name="T:Nohros.Configuration.AbstractConfigurationLoader`1.ParseCompleteEventHandler">
            <summary>
            Defines a method to handle the <see cref="!:AbstractConfigurationLoader&lt;T&gt;.ParseComple"/> event.
            </summary>
            <param name="loader">
            The <see cref="T:Nohros.Configuration.IConfigurationLoader`1"/> associated with the event.
            </param>
        </member>
        <member name="M:Nohros.ExpiringMemoizingSupplier`1.#ctor(Nohros.ISupplier{`0},System.Int64,Nohros.TimeUnit)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.ExpiringMemoizingSupplier`1"/> using the specified
            supplier, duration and duration unit.
            </summary>
            <param name="supplier">A <see cref="M:Nohros.ISupplier`1.Supply"/> that is
            used to create the first instance of the type <typeparamref name="T"/>
            </param>
            <param name="duration">The length of time after a value is created
            that it should be stop beign returned by subsequent
            <see cref="M:Nohros.ISupplier`1.Supply"/> calls.</param>
            <param name="unit">The unit that duration is expressed in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> is not positive.</exception>
        </member>
        <member name="M:Nohros.ExpiringMemoizingSupplier`1.Supply">
            <summary>
            Gets a <typeparamref name="T"/> object and cache it until the specified
            time has not passed.
            </summary>
            <remarks>
            Subsequent calls to <see cref="M:Nohros.ISupplier`1.Supply"/> return the
            cached value if the expiration time has not passed. After the
            expiration time, a new value is retrieved, cached, and returned.
            <para>
            The returned supplier is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.Ensure">
            <summary>
            A collection of useful methods to eval preconditions.
            </summary>
        </member>
        <member name="T:Nohros.Collections.RingQueue`1">
            <summary>
            Represents a first-in, first-out cyclic collection of objects.
            </summary>
            <remarks>
            This class is not thread safe.
            </remarks>
        </member>
        <member name="T:Nohros.Collections.AbstractRingQueue`1">
            <summary>
            Represents a first-in, first-out cyclic collection of objects.
            </summary>
            <remarks>
            This class is not thread safe.
            </remarks>
        </member>
        <member name="T:Nohros.Collections.IRingQueue`1">
            <summary>
            Represents a first-in, first-out cyclic collection of objects.
            </summary>
        </member>
        <member name="M:Nohros.Collections.IRingQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the queue.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:Nohros.Collections.RingQueue`1"/>. The value can
            be <c>null</c> for reference types.
            </param>
            <remarks>
            <para>
            When a queue is full and <see cref="M:Nohros.Collections.IRingQueue`1.Enqueue(`0)"/> method is called, an
            exception could be throwed or not, depending on the implementation.
            </para>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.IRingQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the
            <see cref="T:Nohros.Collections.RingQueue`1"/>.
            </summary>
            <returns>
            The object that is removed from the beginning of the
            <see cref="T:Nohros.Collections.RingQueue`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Nohros.Collections.RingQueue`1"/> is empty.
            </exception>
            <remarks>
            This method is similar to the <see cref="M:Nohros.Collections.IRingQueue`1.Peek"/> method, but
            <see cref="M:Nohros.Collections.IRingQueue`1.Peek"/> does not modify the <see cref="T:Nohros.Collections.RingQueue`1"/>.
            <para>
            If type <typeparamref name="T"/> is a reference type, <c>null</c> can
            be added to th <see cref="T:Nohros.Collections.RingQueue`1"/> as a value.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Collections.IRingQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:Nohros.Collections.RingQueue`1"/>
            without removing it.
            </summary>
            <returns>
            Th object at the beginning of the <see cref="T:Nohros.Collections.RingQueue`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Nohros.Collections.RingQueue`1"/> is empty.
            </exception>
            <remarks>
            This method is similar to the <see cref="M:Nohros.Collections.IRingQueue`1.Dequeue"/> method, but
            <see cref="M:Nohros.Collections.IRingQueue`1.Dequeue"/> does not modify the <see cref="T:Nohros.Collections.RingQueue`1"/>.
            <para>
            If type <typeparamref name="T"/> is a reference type, <c>null</c> can
            be added to th <see cref="T:Nohros.Collections.RingQueue`1"/> as a value.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.AbstractRingQueue`1"/> class that
            is empty and has the specified size.
            </summary>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.AbstractRingQueue`1"/> class that
            contains elements copied from the specified collection and has the same
            size as the number of elements copied.
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.Enqueue(`0)">
            <inheritdoc/>
            <remarks>
            If the queue if full the first unconsumed element will be overritten.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the
            <see cref="T:Nohros.Collections.AbstractRingQueue`1"/>.
            </summary>
            <returns>
            The object that is removed from the beginning of the
            <see cref="T:Nohros.Collections.AbstractRingQueue`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Nohros.Collections.AbstractRingQueue`1"/> is empty.
            </exception>
            <remarks>
            This method is similar to the <see cref="M:Nohros.Collections.AbstractRingQueue`1.Peek"/> method, but
            <see cref="M:Nohros.Collections.AbstractRingQueue`1.Peek"/> does not modify the <see cref="T:Nohros.Collections.AbstractRingQueue`1"/>.
            <para>
            If type <typeparamref name="T"/> is a reference type, <c>null</c> can
            be added to th <see cref="T:Nohros.Collections.AbstractRingQueue`1"/> as a value.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:Nohros.Collections.AbstractRingQueue`1"/>
            without removing it.
            </summary>
            <returns>
            Th object at the beginning of the <see cref="T:Nohros.Collections.AbstractRingQueue`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Nohros.Collections.AbstractRingQueue`1"/> is empty.
            </exception>
            <remarks>
            This method is similar to the <see cref="M:Nohros.Collections.AbstractRingQueue`1.Dequeue"/> method, but
            <see cref="M:Nohros.Collections.AbstractRingQueue`1.Dequeue"/> does not modify the <see cref="T:Nohros.Collections.AbstractRingQueue`1"/>.
            <para>
            If type <typeparamref name="T"/> is a reference type, <c>null</c> can
            be added to th <see cref="T:Nohros.Collections.AbstractRingQueue`1"/> as a value.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AbstractRingQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <remarks>
            <see cref="P:Nohros.Collections.AbstractRingQueue`1.Count"/> is set to zero and references to other objects from
            elements of the collection are also relesead.
            <para>
            This method is a O(n) operation, where n is <see cref="P:Nohros.Collections.AbstractRingQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Collections.AbstractRingQueue`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Collections.RingQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.RingQueue`1"/> class that
            is empty and has the specified size.
            </summary>
        </member>
        <member name="M:Nohros.Collections.RingQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.RingQueue`1"/> class that
            contains elements copied from the specified collection and has the same
            size as the number of elements copied.
            </summary>
            <param name="elements"></param>
        </member>
        <member name="T:Nohros.Collections.IForwardOnlyEnumerable`1">
            <summary>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that supports only fetching the elements
            serially from the start to the end of the collection.
            </summary>
            <remarks>
            A <see cref="T:Nohros.Collections.IForwardOnlyEnumerable`1"/> is tipically used for
            collections that performs a lazy-load of its elements. The elements are
            not loaded until they are fetched.
            </remarks>
        </member>
        <member name="T:Nohros.Data.DataFieldShort">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Int16"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldShort.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldShort"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldShort.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Int16"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Int16"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Data.LongMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Int64"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.LongMapType.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.LongMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Data.DecimalMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Single"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.DecimalMapType.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DecimalMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> class that uses the namespace
            of the type <typeparamref name="T"/> as the class name prefix.
            </summary>
            <param name="data_rader_type">
            The type of the <see cref="T:System.Data.IDataReader"/> that should be used to
            search for the Get(...) methods.
            </param>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> class using the specified
            class name prefix.
            </summary>
            <param name="prefix">
            </param>
            <param name="data_rader_type">
            The type of the <see cref="T:System.Data.IDataReader"/> that should be used to
            search for the Get...(int i) methods.
            </param>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Builds a dynamic <see cref="T:Nohros.Data.DataReaderMapper`1"/> for the type
            <typeparamref source="T"/> using the specified
            properties.
            </summary>
            <param name="mapping">
            An <see cref="T:System.Collections.Generic.KeyValuePair`2"/> containing the mapping
            between source columns and destination properties.
            </param>
            <remarks>
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is used as the source
            column name and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is
            used as the destination property name.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Nohros.Data.ITypeMap}})">
            <summary>
            Builds a dynamic <see cref="T:Nohros.Data.DataReaderMapper`1"/> for the type
            <typeparamref source="T"/> using the specified
            properties.
            </summary>
            <param name="mapping">
            An <see cref="T:System.Collections.Generic.KeyValuePair`2"/> containing the mapping
            between source columns and destination properties.
            </param>
            <remarks>
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is used as the source
            column name and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is
            used as the destination property name.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.String)">
            <summary>
            Maps the source column <paramref source="source"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="source">
            The source of the source column.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the column
            <paramref name="source"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the column <paramref source="source"/>
            to the property named <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map``1(System.String,System.String)">
            <summary>
            Maps the source column <paramref source="source"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="source">
            The source of the source column.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the column
            <paramref name="source"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the column <paramref source="source"/>
            to the property named <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.String,System.Type)">
            <summary>
            Maps the source column <paramref source="source"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="source">
            The source of the source column.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the column
            <paramref name="source"/>.
            </param>
            <param name="type">
            The type of source column.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the column <paramref source="source"/>
            to the property named <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.Int32)">
            <summary>
            Maps the constant value <see cref="!:value"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="value">
            The value that should be returned when by the interface property
            <paramref name="destination"/>.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the value
            <paramref name="value"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the constant value
            <paramref source="value"/> to the property named
            <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.Int16)">
            <summary>
            Maps the constant value <see cref="!:value"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="value">
            The value that should be returned when by the interface property
            <paramref name="destination"/>.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the value
            <paramref name="value"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the constant value
            <paramref source="value"/> to the property named
            <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.Int64)">
            <summary>
            Maps the constant value <see cref="!:value"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="value">
            The value that should be returned when by the interface property
            <paramref name="destination"/>.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the value
            <paramref name="value"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the constant value
            <paramref source="value"/> to the property named
            <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.Single)">
            <summary>
            Maps the constant value <see cref="!:value"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="value">
            The value that should be returned when by the interface property
            <paramref name="destination"/>.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the value
            <paramref name="value"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the constant value
            <paramref source="value"/> to the property named
            <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,System.Decimal)">
            <summary>
            Maps the constant value <see cref="!:value"/> to the interface
            property <paramref source="destination"/>.
            </summary>
            <param name="value">
            The value that should be returned when by the interface property
            <paramref name="destination"/>.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the value
            <paramref name="value"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the constant value
            <paramref source="value"/> to the property named
            <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map(System.String,Nohros.Data.ITypeMap)">
            <summary>
            Maps the constant <see cref="!:value"/> to the interface property
            <paramref source="destination"/>.
            </summary>
            <param name="value">
            The value that should be returned when by the interface property
            <paramref name="destination"/>.
            </param>
            <param name="destination">
            The source of the property that will be mapped to the value
            <paramref name="value"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of type
            <typeparamref source="T"/> and mapping the constant value
            <paramref source="value"/> to the property named
            <paramref source="destination"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Maps the source column <see cref="!:source"/> to a object property.
            </summary>
            <typeparam name="TProperty">
            The type of the property to be mapped
            </typeparam>
            <param name="expression">
            A <see cref="T:System.Linq.Expressions.Expression`1"/> that describes the property to
            be mapped.
            </param>
            <param name="source">
            The name of the source column to be mapped.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that builds an object of
            type <typeparamref source="T"/> and mapping the value of the source
            column <paramref name="source"/> to the property described by
            the <paramref name="expression"/> object.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Type)">
            <summary>
            Maps the source column <see cref="!:source"/> to a object property.
            </summary>
            <typeparam name="TProperty">
            The type of the property to be mapped
            </typeparam>
            <param name="expression">
            A <see cref="T:System.Linq.Expressions.Expression`1"/> that describes the property to
            be mapped.
            </param>
            <param name="source">
            The name of the source column to be mapped.
            </param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Map``2(System.Linq.Expressions.Expression{System.Func{`0,``1}},System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Maps the source column <see cref="!:source"/> to a object property.
            </summary>
            <typeparam name="TProperty">
            The type of the property to be mapped
            </typeparam>
            <param name="expression">
            A <see cref="T:System.Linq.Expressions.Expression`1"/> that describes the property to
            be mapped.
            </param>
            <param name="source">
            The name of the source column to be mapped.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.AutoMap">
            <summary>
            Automatically maps the properties defined by the type
            <typeparamref name="T"/>.
            </summary>
            <remarks>
            The properties that has no mapping defined will be mapped to the
            field that has the same name as the mapped property.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.SetFactory(Nohros.CallableDelegate{`0})">
            <summary>
            Defines the factory that shoud be used to create an instance of the
            <typeparamref name="T"/> class.
            </summary>
            <param name="factory">
            A <see cref="T:Nohros.CallableDelegate`1"/> that should be used to create an
            instance of the <typeparamref name="T"/> class.
            </param>
            <remarks>
            If the class <typeparamref name="T"/> does not has a constructor that
            receives no parameters, the <see cref="M:Nohros.Data.DataReaderMapperBuilder`1.SetFactory(Nohros.CallableDelegate{`0})"/> method should be
            called to define the factory that should be used to create an instance
            of the <typeparamref name="T"/> class, falling to define this will
            causes the <see cref="M:Nohros.Data.DataReaderMapperBuilder`1.Build"/> method to throw an exception.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Build">
            <summary>
            Builds a dynamic type that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> interface.
            </summary>
            <returns>
            A instance of the dynamically created class.
            </returns>
            <remarks>
            <see cref="M:Nohros.Data.DataReaderMapperBuilder`1.Build"/> will create a dynamic type that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> for the type
            <typeparamref source="T"/> only if the type does not exists already. If
            the type already exists <see cref="M:Nohros.Data.DataReaderMapperBuilder`1.Build"/> will only create an
            instance of that class.
            <para>
            If the dynamic class already exists the mapping defined for the first
            build will be used.
            </para>
            <para>
            If you need to map the <typeparamref name="T"/> using distinct ways,
            you should create a <see cref="T:Nohros.Data.DataReaderMapperBuilder`1"/> that
            uses distinct prefixes.
            </para>
            </remarks>
            <seealso cref="T:Nohros.Data.DataReaderMapperBuilder`1"/>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.TryGetDynamicType(System.Type@)">
            <summary>
            Gets the dynamic type for <typeparamref name="T"/>.
            </summary>
            <param name="type">
            When this method returns contains the type that was dynamically
            created for the type <typeparamref name="T"/>, or <c>null</c> is
            a dynamic type for <typeparamref name="T"/> does not exists.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.TryGetDynamicType(System.String,System.Type@)">
            <summary>
            Gets the dynamic type for <typeparamref name="T"/>.
            </summary>
            <param name="type">
            When this method returns contains the type that was dynamically
            created for the type <typeparamref name="T"/>, or <c>null</c> is
            a dynamic type for <typeparamref name="T"/> does not exists.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.GetDynamicType">
            <summary>
            Gets the dynamic type for <typeparamref source="T"/>.
            </summary>
            <returns>
            The dynamic type for <typeparamref source="T"/>.
            </returns>
            <remarks>
            If the dynamic type does not already exists, it will be created.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.GetDynamicType(System.String)">
            <summary>
            Gets the dynamic type for <typeparamref source="T"/>.
            </summary>
            <returns>
            The dynamic type for <typeparamref source="T"/>.
            </returns>
            <remarks>
            If the dynamic type does not already exists, it will be created.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.Ignore(System.String)">
            <summary>
            Ignores a destination property, by not including it in the map.
            </summary>
            <param name="destination">
            The name of the destination property to be ignored.
            </param>
            <remarks>
            Ignored properties thrown an NotImplemented exception when an attempt
            to access is performed.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.MakeDynamicType(System.String)">
            <summary>
            Generates the dynamic type for <typeparamref source="T"/>.
            </summary>
            <returns>
            The dynamic type for <typeparamref source="T"/>.
            </returns>
            <remarks>
            The type is dynamically created and added to the current
            <see cref="T:System.AppDomain"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderMapperBuilder`1.EmitConstructor(System.Reflection.Emit.TypeBuilder,Nohros.Data.DataReaderMapperBuilder{`0}.MappingResult)">
            <summary>
            Emit the constuctor code.
            </summary>
        </member>
        <member name="E:Nohros.Data.DataReaderMapperBuilder`1.PreCreateType">
            <summary>
            Raised before the dynamic type is created.
            </summary>
        </member>
        <member name="T:Nohros.Data.CharMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Char"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.CharMapType.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.CharMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Configuration.ProviderNode">
            <summary>
            Serves as the base class for custom <see cref="T:Nohros.Configuration.IProviderNode"/>.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IProviderNode">
            <summary>
            Defines the methods and properties that all the configuration nodes that
            are related with some type of provider should implements.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.IProviderNode.Group">
            <summary>
            Gets a string that identifies the group that a provider belongs to.
            </summary>
            <remarks>
            If a provider is not associated with any group, this property returns
            a empty string.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Nohros.Configuration.IProviderNode.Options" -->
        <member name="P:Nohros.Configuration.IProviderNode.Aliases">
            <summary>
            Gets a collection of strings that can be used to identify the provider.
            </summary>
            <remarks>
            <see cref="P:Nohros.Configuration.IProviderNode.Aliases"/> provides a way to identify the same provider by
            more than one name. This property is useful when you need to
            implement distinct provider behavior within a single class and do not
            want to couple the distinct behaviors within a single definition.
            <example>
            <code>
            public interface ISomeRepository {
              string SomeProperty { get; }
            }
            <para>
            <code>
            public interface ISomeOtherRepository {
              string SomeOtherProperty { get; }
            }
            </code>
            </para>
            <para>
            <code>
            public SqlDataProvider : ISomeRepository, ISomeOtherRepository {
            }
            </code>
            </para>
            </code>
            </example>
            The SqlDataProvider could be referenced in the configuration file
            using a single provider node and two alias.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            An attempt to set the value of the property to null was performed.
            </exception>
        </member>
        <member name="F:Nohros.Configuration.ProviderNode.options_">
            <summary>
            The options_ configured for this provider.
            </summary>
            <remarks>
            This should never be a <c>null</c> reference. If a provider does
            not have any configured options_ this dictionary should be empty.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProviderNode"/> class by
            using the specified provider name and type.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <param name="type">
            The assembly-qualified name of the provider type.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProviderNode"/> class by
            using the specified provider name, type and assembly location.
            </summary>
            <param name="name">
            A string that uniquely identifies a provider within an collection.
            </param>
            <param name="type">
            The provider's assembly-qualified name.
            </param>
            <param name="location">
            The path to the directory where the provider assembly file is stored.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Clone(System.String)">
            <summary>
            Creates a deep copy of the current <see cref="T:Nohros.Configuration.ProviderNode"/>.
            </summary>
            <returns>
            A deep copy of the current <see cref="T:Nohros.Configuration.ProviderNode"/>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Parse(System.Xml.XmlElement,System.String,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlElement"/> element into a
            <see cref="T:Nohros.Configuration.ProviderNode"/> object.
            </summary>
            <param name="element">
            A Xml element that contains the provider configuration data.
            </param>
            <param name="base_directory">
            The base directory to use when resolving the providers's location.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.ProviderNode"/> containing the configured provider.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            The <paramref name="element"/> contains invalid configuration data.
            </exception>
        </member>
        <member name="P:Nohros.Configuration.ProviderNode.Type">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Configuration.ProviderNode.Location">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Configuration.ProviderNode.Options">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Configuration.ProviderNode.Group">
            <summary>
            Gets the group that this provider belongs to.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.ProviderNode.Aliases">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Configuration.ProviderNode.Builder">
            <summary>
            A builder for <see cref="T:Nohros.Configuration.ProviderNode"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Builder.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProviderNode.Builder"/> class by
            using the provider name and type.
            </summary>
            <param name="name">
            A string that uniquely identifies the provider within an application.
            </param>
            <param name="type">
            The provider's fully qualified assembly name.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Builder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ProviderNode.Builder"/> class by
            using the provider name and type.
            </summary>
            <param name="name">
            A string that uniquely identifies the provider within an application.
            </param>
            <param name="type">
            The provider's fully qualified assembly name.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Builder.SetLocation(System.String)">
            <summary>
            Sets the path of the location where the provider assembly can be
            found.
            </summary>
            <param name="location">
            The path of the location where the provider assembly can be
            found.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.ProviderNode.Builder"/> that builds a provider that can be found at
            path <paramref name="location"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="location"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Builder.SetGroup(System.String)">
            <summary>
            Sets the name of the group on which the provider belongs to.
            </summary>
            <param name="group">
            The name of the group which the provider belongs to.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.ProviderNode.Builder"/> that builds a provider that belongs to the
            group <paramref name="group"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="group"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Builder.SetOptions(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the provider's options.
            </summary>
            <param name="options">
            The provider's options.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.ProviderNode.Builder"/> that builds a provider that is associated
            with the <paramref name="options"/> collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.ProviderNode.Builder.Build">
            <summary>
            Builds a new <see cref="T:Nohros.Configuration.ProviderNode"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nohros.StringValue">
            <summary>
            Represents a string value
            </summary>
        </member>
        <member name="M:Nohros.StringValue.#ctor(System.String)">
            <summary>
            Initializes a new instance_ of the StringValue class.
            </summary>
        </member>
        <member name="T:Nohros.Data.IDataTransferObject">
            <summary>
            Represents an class that can be serialized using the json format. Classes
            that implement this interface is usually used to transfer json encoded
            data from the data access layer to another layer (usually a web
            front-end).
            </summary>
        </member>
        <member name="M:Nohros.Data.IDataTransferObject.AsJsonArray">
            <summary>
            Gets a json-compliant string of characters that represents the
            underlying class and is formatted like a json array element.
            </summary>
            <example>
            The example uses the AsJsonArray to serialize the MyDataTransferObject
            to a string that represents an json array.
            <code>
              class MyDataTransferObject : IDataTransferObject {
                string first_name_, las_name;
                
                public MyDataTransferObject(string first_name, string last_name) {
                  first_name_ = first_name;
                  last_name_ = last_name;
                }
            
                public string AsJsonArray() {
                  return "['" + first_name + "','" + last_name + "']"
                }
              }
            </code>
            </example>
            <returns>
            A json compliant string of characters formatted like a json array
            element.
            </returns>
        </member>
        <member name="M:Nohros.Data.IDataTransferObject.AsJsonObject">
            <summary>
            Gets a json-compliant string of characters that represents the
            underlying class and is formatted like a json object.
            </summary>
            <example>
            The example uses the AsJsonObject method to serialize the
            MyDataTransferObject to a string that represents an json object.
            <code>
              class MyDataTransferObject : IDataTransferObject {
                string first_name_, las_name;
                
                public MyDataTransferObject(string first_name, string last_name) {
                  first_name_ = first_name;
                  last_name_ = last_name;
                }
            
                public string AsJsonObject() {
                  return "{\"first_name\":\"" + first_name + "\",\"last_name\":\"" + last_name + "\"}";
                }
              }
            </code>
            </example>
            <returns>
            A json compliant string of characters formatted like a json object.
            </returns>
        </member>
        <member name="M:Nohros.Data.CacheEntry.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nohros.Data.CacheEntry.#ctor(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance_ onf the CacheEntry class by using the specified item key and value and
            expiration police.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The item to be added to the cache.</param>
            <param name="utcAbsoluteExpiration">The time at which the added object expires and is removed
            from the cache. If the sliding expiration will be used, the <paramref name="utcAbsoluteExpiration"/>
            parameter must be <see cref="F:Nohros.Data.CacheEntry.NoAbsoluteExpiration"/>
            </param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed
            and the time at which that object expires. If the <paramref name="utcAbsoluteExpiration"/> is defined
            the <paramref name="slidingExpiration"/> parametr must be <see cref="F:Nohros.Data.CacheEntry.NoSlidingExpiration"/></param>
        </member>
        <member name="P:Nohros.Data.CacheEntry.SlidingExpiration">
            <summary>
            Gets the interval between the time the added object was last accessed and the time at which that object
            expires.
            </summary>
        </member>
        <member name="P:Nohros.Data.CacheEntry.UtcCreated">
            <summary>
            Gets the date and time at which the object was created.
            </summary>
        </member>
        <member name="P:Nohros.Data.CacheEntry.UtcExpires">
            <summary>
            Gets the date and time at which the object expires.
            </summary>
        </member>
        <member name="P:Nohros.Data.CacheEntry.UtcLastUsageUpdate">
            <summary>
            Gets the date and time at which the object was last accessed.
            </summary>
        </member>
        <member name="P:Nohros.Data.CacheEntry.Value">
            <summary>
            Gets the object related which this instance_.
            </summary>
        </member>
        <member name="T:Nohros.Collections.ParameterizedStringPartParameterCollection">
            <summary>
            Represents a collections of parameters associated with a
            <see cref="T:Nohros.ParameterizedString"/>.
            </summary>
            <remarks>
            A <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> class was designed to
            handle a small number of parameters and it uses classes that does not
            performs well when the number of elements is greater than 10 elements.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedStringPartParameterCollection.
            </summary>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.Add(Nohros.ParameterizedStringPartParameter)">
            <summary>
            Adds the specified <see cref="T:Nohros.ParameterizedStringPartParameter"/>
            object to this <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>.
            </summary>
            <param name="part">
            The <see cref="T:Nohros.ParameterizedStringPartParameter"/> to add to the
            collection.
            </param>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:Nohros.ParameterizedStringPart"/> specified is already added to
            this <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.Clear">
            <summary>
            Removes all the <see cref="T:Nohros.ParameterizedStringPart"/> objects from
            the <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>.
            </summary>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.Contains(Nohros.ParameterizedStringPartParameter)">
            <summary>
            Determines whether the specified <see cref="T:Nohros.ParameterizedStringPart"/>
            is in the <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>.
            </summary>
            <param name="part">
            The <see cref="T:Nohros.ParameterizedStringPart"/>value to verify.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>
            contains the <paramref name="part"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.CopyTo(Nohros.ParameterizedStringPartParameter[],System.Int32)">
            <summary>
            Copies all elements of the current
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> to the specified
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> array starting at the
            specified destination index.
            </summary>
            <param name="array">
            The <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> array that is the
            destination of the elements copied from the current
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>
            </param>
            <param name="index">
            A 32-bit integer that represents the index in the
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> at which copying
            starts.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is  <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> is greater than the
            available space from <paramref name="index"/> to the end of the
            destination array.
            </exception>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.Remove(Nohros.ParameterizedStringPartParameter)">
            <summary>
            Removes the specified <see cref="T:Nohros.ParameterizedStringPart"/> from the
            collection.
            </summary>
            <param name="part">
            A <see cref="T:Nohros.ParameterizedStringPart"/> object to remove from the
            colletion.
            </param>
            <returns>
            <c>true</c> if the parameter is successfully removed; othewise,
            <c>false</c>.
            </returns>
            <remarks>
            If part is not in the list, the
            <see cref="!:Remove(ParameterizedStringPart)"/> method will do nothing.
            In particular, it does not throws an exception.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.System#Collections#Generic#IEnumerable{Nohros#ParameterizedStringPartParameter}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>
            </summary>
            <returns>
            An IEnumerator of <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>
            </returns>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>
            </summary>
            <returns>
            An IEnumerator of <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>.
            </returns>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.AddIfAbsent(Nohros.ParameterizedStringPartParameter)">
            <summary>
            Adds the specified <see cref="T:Nohros.ParameterizedStringPartParameter"/>
            object to this <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> if it
            is not added yet.
            </summary>
            <param name="part">
            The <see cref="T:Nohros.ParameterizedStringPartParameter"/> to add to the
            collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the specified
            <see cref="T:Nohros.ParameterizedStringPart"/> with the specified name.
            </summary>
            <param name="name">
            The case-insensitive name of the <see cref="T:Nohros.ParameterizedStringPart"/>
            to find.
            </param>
            <returns>
            The zero-based location of the specified
            <see cref="T:Nohros.ParameterizedStringPart"/> with the specified
            case-insensitive name. Returns -1 when the object does not exists in
            the collection.
            </returns>
        </member>
        <member name="M:Nohros.Collections.ParameterizedStringPartParameterCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:Nohros.ParameterizedStringPart"/> with name
            <paramref name="name"/> from the collection.
            </summary>
            <param name="name">
            The name of the parameter.
            </param>
            <returns><c>true</c> if the parameter is successfully removed;
            othewise, <c>false</c>.
            </returns>
            <remarks>
            If a parameter with name <paramref name="name"/> could not be found,
            the <see cref="M:Nohros.Collections.ParameterizedStringPartParameterCollection.Remove(System.String)"/> method will
            do nothing. In particular, it does not throws an exception, only
            returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Nohros.Collections.ParameterizedStringPartParameterCollection.Count">
            <summary>
            Returns an integer that contains the number of elements in the
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>.
            </summary>
        </member>
        <member name="P:Nohros.Collections.ParameterizedStringPartParameterCollection.System#Collections#Generic#ICollection{Nohros#ParameterizedStringPartParameter}#IsReadOnly">
            <summary>
            Gets a value that indicates whether the
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/> is read-only.
            </summary>
            <value>
            Returns true if the <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>is
            read only; otherwise, false.
            </value>
        </member>
        <member name="P:Nohros.Collections.ParameterizedStringPartParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Nohros.ParameterizedStringPart"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the parameter to retrieve.
            </param>
            <returns>
            The <see cref="T:Nohros.ParameterizedStringPart"/> at the specified index.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index does not exists.
            </exception>
        </member>
        <member name="P:Nohros.Collections.ParameterizedStringPartParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Nohros.ParameterizedStringPart"/> with the specified name.
            </summary>
            <param name="name">
            The name of the parameter to retrieve.
            </param>
            <returns>
            The <see cref="T:Nohros.ParameterizedStringPart"/> with the specified name.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="name"/> is not found or is invalid.
            </exception>
            <remarks>
            The <paramref name="name"/> is used to look up the index
            value in the underlying
            <see cref="T:Nohros.Collections.ParameterizedStringPartParameterCollection"/>. If the
            <paramref name="name"/> is not found or if it is not valid,
            an <see cref="T:System.IndexOutOfRangeException"/> will be throw.
            </remarks>
        </member>
        <member name="T:Nohros.Caching.LoadingCache`1">
            <summary>
            A generic implementation of the <see cref="T:Nohros.Caching.ILoadingCache`1"/> interface
            that uses the pluggable cache mechanins provided by the
            <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> interface.
            </summary>
            <seealso cref="T:Nohros.Caching.Providers.ICacheProvider"/>
        </member>
        <member name="T:Nohros.Caching.ILoadingCache`1">
            <summary>
            A semi-persistent mapping from keys to values that uses the pluggable
            cache mechanism provided by the <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> interface.
            </summary>
            <remarks>
            Cache entries are automatically loaded by the cache, and are stored in
            the cache until either evicted or manually invalidated.
            <para>Implementations of this interface are expected to the
            thread-safe, and can be safely accessed by multiple concurrent threads.
            </para>
            </remarks>
            <typeparam name="T">The type of objects that the cache can store.
            </typeparam>
        </member>
        <member name="T:Nohros.Caching.ICache`1">
            <summary>
            A semi-persistent mapping from keys to values that uses the pluggable
            cache mechanism provided by the <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> interface.
            </summary>
            <remarks>
            Cache entries are manually added using
            <see cref="!:Get(string, CacheLoader&lt;T&gt;"/> or
            <see cref="M:Nohros.Caching.ICache`1.Put(System.String,`0)"/> and are stored in the cache until either
            evicted or manually invalidated.
            <para>
            Implementations of this interface are expected to the thread-safe, and
            can be safely accessed by multiple concurrent threads.
            </para>
            <typeparam name="T">
            The type of the object that will be stored in cache.
            </typeparam>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.ICache`1.Get(System.String,Nohros.Caching.CacheLoader{`0})">
            <summary>
            Gets the value associated with the given key, creating or retrieving
            that value if necessary.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.
            </param>
            <param name="loader">
            A <see cref="T:Nohros.Caching.CacheLoader`1"/> object that could be used to create the
            value if it is not present in the cache.</param>
            <exception cref="T:Nohros.ExecutionException">
            A failure occur while loading the item using the specified loader
            delegate.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <remarks>
            No observable state associated with the cache is modified until loading
            is complete. This method provides a simple substitute for the
            conventional "if cached, return; otherwise create, cache and return"
            pattern.
            <para>
            Warning: <paramref name="loader"/> must not return null; it will
            may either return a non-null value or throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.ICache`1.GetIfPresent(System.String)">
            <summary>
            Gets the value associated with the <paramref name="key"/> in cache, or
            the default value of type <typeparamref name="T"/> if there is no
            cached value for <paramref name="key"/>.
            </summary>
            <param name="key">
            The identifier for the cache item to retrieve.
            </param>
            <returns>
            The value associated with the <paramref name="key"/> in cache,
            or the default value of type <typeparamref name="T"/> if there is no
            cached value for <paramref name="key"/>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Caching.ICache`1.GetIfPresent(System.String,`0@)">
            <summary>
            Gets the value associated with the <paramref name="key"/> in cache if
            the given key exists in cache.
            </summary>
            <param name="key">
            The identifier for the cache item to retrieve.
            </param>
            <param name="value">
            When this method returns contains the value associated with the key
            <paramref name="key"/> if taht key is found; otherwise, the default
            value for <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if the given key exists in cache and the value associated
            with it is successfully retrieved, otherwise, false.
            </returns>
        </member>
        <member name="M:Nohros.Caching.ICache`1.Put(System.String,`0)">
            <summary>
            Associates <paramref name="value"/> with <paramref name="key"/> in this
            cache. If the cache previously contained a value associated with
            <paramref name="key"/>, the old values is replaced by
            <paramref name="value"/>.
            </summary>
            <param name="key">
            The identifier for the cache item to retrieve.
            </param>
            <param name="value">
            The value to be associated with the <paramref name="key"/> in the
            cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> or <paramref name="value"/> is <c>null</c> (
            for reference exceptions).
            </exception>
        </member>
        <member name="M:Nohros.Caching.ICache`1.Remove(System.String)">
            <summary>
            Discards any cached value for the key <paramref name="key"/>, so that
            future invocation of <c>Get(...)</c> will result in a cache miss and
            reload.
            </summary>
            <param name="key">
            The identifier for the cache item to retrieve.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <remarks>
            If a value with the given key does not exists in cache this method
            fails silently.
            </remarks>
        </member>
        <member name="P:Nohros.Caching.ICache`1.Size">
            <summary>
            Gets the approximate number of entries in this cache.
            </summary>
        </member>
        <member name="M:Nohros.Caching.ILoadingCache`1.Get(System.String)">
            <summary>
            Gets the value associated with <paramref name="key"/> in this cache,
            first loading that value if necessary. No observable state associated
            with this cache is modified until loading completes.
            </summary>
            <param name="key">The key that will be associated with the cached
            value.</param>
            <returns>The value associated with <paramref name="key"/>.</returns>
            <exception cref="T:System.TypeLoadException">A failure occur while loading
            the item using the specified loader delegate.</exception>
            <remarks>If another call to <see cref="M:Nohros.Caching.ILoadingCache`1.Get(System.String)"/> is currently
            loading the value for <paramref name="key"/>, simple waits for that
            thread to finish and returns its loaded value. Note that multiple
            threads can concurrently load values for distinct key.
            <para>Caches loaded by a <see cref="T:Nohros.Caching.CacheLoader`1"/> will call
            <see cref="M:Nohros.Caching.CacheLoader`1.Load(System.String)"/> to load new values into cache. Newly
            loaded values are added to the cache only if <paramref name="key"/>
            is not already associated with a value.</para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.ILoadingCache`1.Refresh(System.String)">
            <summary>
            Loads a new value for key <see cref="!:key"/>, possibly asynchronously.
            </summary>
            <param name="key">
            The value associated with the value to get.
            </param>
            <remarks>
            While the new value is loading the previous value(if any) will continue
            to be returned by <see cref="M:Nohros.Caching.ILoadingCache`1.Get(System.String)"/> unless it is evicted. If
            the new value is loaded successfully it will replace the previous
            value in the cache; if an exception is thrown while refreshing the
            previous value will remain, and the exception will be logged (using
            <see cref="!:MustLogger"/>) and swallowed.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.#ctor(Nohros.Caching.Providers.ICacheProvider,Nohros.Caching.CacheBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LoadingCache`1"/> class
            by using the specified cache provider and builder.
            </summary>
            <param name="provider">
            A <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> that is used to cache object.
            </param>
            <param name="builder">
            A <see cref="T:Nohros.Caching.CacheBuilder`1"/> object that contains information about
            the cache configuration.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="provider"/> or <paramref name="builder"/> are
            <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.#ctor(Nohros.Caching.Providers.ICacheProvider,Nohros.Caching.CacheBuilder{`0},Nohros.Caching.CacheLoader{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LoadingCache`1"/> using the
            specified cache provider, builder and automatic loader.
            </summary>
            <param name="provider">
            A <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> that is used to cache object.
            </param>
            <param name="builder">
            A <see cref="T:Nohros.Caching.CacheBuilder`1"/> object that contains information about
            the cache configuration.
            </param>
            <param name="loader">
            An <see cref="T:Nohros.Caching.CacheLoader`1"/> that is used to automatically load new
            items in cache when an item for a given key does not exists or is
            expired.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="provider"/>, <paramref name="builder"/> or
            <paramref name="loader"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.GetIfPresent(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.GetIfPresent(System.String,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.Put(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.Get(System.String,Nohros.Caching.CacheLoader{`0})">
            <summary>
            Gets the value associated with the given key, creating or retrieving
            that value if necessary.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.
            </param>
            <param name="loader">A <see cref="T:Nohros.Caching.CacheLoader`1"/> object that could
            be used to create the value if it is not present in the cache.</param>
            <remarks>
            No state associated with this cache is modified until loading is
            complete.
            </remarks>
            <exception cref="T:Nohros.ExecutionException">A failure occur while loading
            the item using the specified loader delegate.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or
            <paramref name="loader"/> are <c>null</c>.</exception>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.Remove(System.String)">
            <summary>
            Discards any cached value for the key <paramref name="key"/>, so that
            future invocation of <c>Get(...)</c> will result in a cache miss and
            reload.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.
            </param>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.Refresh(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.CacheKey(System.String)">
            <summary>
            Generates a string that uniquely identifies the key within a cache
            provider.
            </summary>
            <param name="key">The key that should be unyfied.</param>
            <returns>A string that is globally unique.</returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.LockedGetOrLoad(System.String,Nohros.Caching.CacheLoader{`0})">
            <summary>
            Atomically get or loads and get the value for the specified key.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <param name="loader">
            A <see cref="T:Nohros.Caching.CacheLoader`1"/> that could be used to load the value
            for the key <paramref name="key"/>.
            </param>
            <returns>
            A object of type <typeparamref name="T"/> that is associated with the
            key <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.GetLiveValue(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.Int64,`0@)">
            <summary>
            Gets the value associated with the given entry.
            </summary>
            <param name="entry">
            The entry to get the value from.
            </param>
            <param name="now">
            The date and time to use as reference while checking for expiration.
            </param>
            <param name="value">
            The value associated with the specified entry if it is valid(not
            expired or loading).
            </param>
            <returns>
            <c>false</c> if entry is invalid, loading, or expired; otherwise,
            <c>true</c>.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.GetLiveEntry(System.String,System.Int64)">
            <summary>
            Gets the entry associated with the given key.
            </summary>
            <param name="key">
            The key associated with the value to get.
            </param>
            <param name="now">
            The time used as reference for expiration check.
            </param>
            <returns>
            A <see cref="T:Nohros.Caching.IValueReference`1"/> associated with the key
            <paramref name="key"/> if it is not expired.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.RecordWrite(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.Int64)">
            <summary>
            Records the time the entry was written.
            </summary>
            <param name="entry">
            The entry to update the write time.
            </param>
            <param name="now">
            The time that the entry was written.
            </param>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.RecordRead(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.Int64)">
            <summary>
            Records the time the entry was accessed.
            </summary>
            <param name="entry">The accessed entry.</param>
            <param name="now">The time taht <paramref name="entry"/> was
            last accessed.</param>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.ScheduleRefresh(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.String,`0,System.Int64,Nohros.Caching.CacheLoader{`0})">
            <summary>
            Schedule a refresh for an entry.
            </summary>
            <param name="entry">
            The entry to be refreshed.
            </param>
            <param name="key">
            The key associated with the entry to be refreshed.
            </param>
            <param name="old_value">
            The old value of the entry.
            </param>
            <param name="now">
            The current time, it is used to check if the entry needs a refresh.
            </param>
            <param name="loader">
            A <see cref="T:Nohros.Caching.CacheLoader`1"/> object that is used to load the new
            value for the entry.
            </param>
            <returns>
            The refreshed value if a refresh was performed; otherwise, the old
            value.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.Refresh(System.String,Nohros.Caching.CacheLoader{`0},`0@)">
            <summary>
            Refreshes the value associated with <paramref name="key"/>, unless
            another thread is already doing so.
            </summary>
            <param name="key">
            The key associated with the value to refresh.
            </param>
            <param name="loader">
            A <see cref="T:Nohros.Caching.CacheLoader`1"/> that is used to refresh the value.
            </param>
            <param name="value">
            The newly refreshed value associated with <paramref name="key"/> if
            the value was refreshed inline, or the default value of
            <typeparamref name="T"/> if another thread is performing the refresh or
            if a error occurs during refresh.
            </param>
            <returns>
            <c>true</c> if the value was refreshed and <c>false</c> if another
            thread is performing the refresh or if a error has been occured during
            the refresh.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.InsertLoadingValueReference(System.String)">
            <summary>
            Creates a new <see cref="T:Nohros.Caching.LoadingValueReference`1"/> and inserts it on
            the cache by using the <paramref name="key"/>.
            </summary>
            <param name="key">The key that will be associated with the newly
            created <see cref="T:Nohros.Caching.LoadingValueReference`1"/>.</param>
            <returns>The newly inserted <see cref="T:Nohros.Caching.LoadingValueReference`1"/>, or
            null if the live value reference is already loading.</returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.WaitForLoadingValue(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.String,Nohros.Caching.IValueReference{`0})">
            <summary>
            Blocks while waiting for the value to load.
            </summary>
            <param name="entry">
            The entry that references the loading value reference.</param>
            <param name="key">
            The key associated with the cache entry.
            </param>
            <param name="value_reference">
            
            </param>
            <returns>
            The loaded value.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.GetUninterruptibly(System.String,Nohros.Caching.LoadingValueReference{`0},Nohros.Concurrent.IFuture{`0})">
            <summary>
            Waits uninterruptibly for <paramref name="new_value"/> to be loaded.
            </summary>
            <param name="key">The key associated with the laoding value.</param>
            <param name="loading_value_reference"></param>
            <param name="new_value"></param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.StoreLoadedValue(System.String,Nohros.Caching.LoadingValueReference{`0},`0)">
            <summary>
            Store the loaded value in cache.
            </summary>
            <param name="key">
            The key associated with the value.
            </param>
            <param name="old_value_reference">
            A <see cref="T:Nohros.Caching.LoadingValueReference`1"/> that was used to load the
            value.
            </param>
            <param name="new_value">
            The value to be stored in cache.
            </param>
            <returns>
            <c>true</c> if the value was successfully stored in cache; otherwise,
            false.
            </returns>
            <remarks>
            This method is called to store the result of the loading computation.
            If the value was sucessfully loaded it will be stored in cache using
            the given key.
            <para>
            This method fails to store the value if a value for the given key was
            already replaced by another item, while it is loading.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.SetValue(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.String,`0,System.Int64)">
            <summary>
            Sets a new value of an entry and add that entry in cache.
            </summary>
            <param name="entry">
            The entry to set the new value.
            </param>
            <param name="key">
            The key for the entry.
            </param>
            <param name="now">
            The date and time where the value was created.
            </param>
            <param name="value">
            The value set.
            </param>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.IsNull(`0)">
            <summary>
            Checks if the given value is represents a <c>null</c> reference.
            </summary>
            <param name="value">
            The value to check for nullability.
            </param>
            <returns>
            <c>true</c> if the the given value is a reference type and is null;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method always returns true for value types, even if it is equals
            to the default value for <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.RemoveLoadingValue(System.String,Nohros.Caching.LoadingValueReference{`0})">
            <summary>
            Remove the loading value reference from the cache.
            </summary>
            <param name="key">The key associated with the loading value.</param>
            <param name="value_reference">The value reference to be removed from
            the cache.</param>
            <returns>
            <c>true</c> if the value is succesfully removed from the cache;
            otherwise, false.
            </returns>
            <remarks>
            If a loading value reference has an active value means that the loading
            process has failed and the old valud is still valid, in that case this
            method will replace the loading value reference with the old value.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.IsExpired(Nohros.Caching.LoadingCache{`0}.CacheEntry{`0},System.Int64)">
            <summary>
            Gets a value indicating if a entry is expired or not.
            </summary>
            <returns><c>true</c> if the entry is expired; otherwise, false.
            </returns>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.Refreshes">
            <summary>
            Gets a value indicating if the cache allows items to be refreshed.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.ExpireAfterAccess">
            <summary>
            Gets a value indicating if the expiry after access expiration police is
            enabled.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.ExpireAfterWrite">
            <summary>
            Gets a value indicating if the expiry after write expiration police is
            enabled.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.RecordsAccess">
            <summary>
            Gets a value indicating if the entry's access operation should be
            recorded.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.RecordsWrite">
            <summary>
            Gets a value indicating if the entry's write operation should be
            recorded.
            </summary>
        </member>
        <member name="T:Nohros.Caching.LoadingCache`1.CacheEntry`1">
            <summary>
            An entry in the cache, consisting of a key, value and attributes.
            </summary>
            <remarks>This class is used as a wrapper arround the cached value by
            the <see cref="!:AbstractCache&lt;T&gt;"/> class. It is used to decorate
            the cached value with some attributes, such as write access time
            and read access time.
            <para> Entries in the cache can be in the following states:
            <para>Valid</para>
            <list type="bullet">
            <term>Live: valid key/value are set.</term>
            <term>Loading: loading is pending.</term>
            </list>
            <para>
            Invalid
            <list type="bulltet">
            <term>Expired: time expired (key/value may still be set).</term>
            </list>
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.LoadingCache`1.CacheEntry`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LoadingCache`1.CacheEntry`1"/> class
            by using the specified key and value.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.CacheEntry`1.Key">
            <summary>
            Gets the key for this entry.
            </summary>
            <value>The key for this entry.</value>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.CacheEntry`1.ValueReference">
            <summary>
            Gets or sets the value reference from this entry.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.CacheEntry`1.WriteTime">
            <summary>
            Gets or sets the time that this entry was last written, in ns.
            </summary>
            <remarks>
            Any operation performed on this property(get or set) is atomic.
            </remarks>
        </member>
        <member name="P:Nohros.Caching.LoadingCache`1.CacheEntry`1.AccessTime">
            <summary>
            Gets or sets the time that this entry was last accessed, in ns.
            </summary>
            <remarks>
            Any operation performed on this property(get or set) is atomic.
            </remarks>
        </member>
        <member name="T:Nohros.Clock">
            <summary>
            An abstraction for how the time passes.
            </summary>
        </member>
        <member name="P:Nohros.Clock.NanoTime">
            <summary>
            Gets the current value of the most precise available system timer, in
            nanoseconds.
            </summary>
            <remarks>
            This method should be used only to measure elapsed time
            and is not related to any other notion of system or wall-clock time.
            The value returned represents nanoseconds since some fixed but
            arbitrary time(perhaps in the future, so values may be negative). This
            method provides nanoseconds precision, but not necessarily nanoseconds
            accurancy.No guarantees are made about how frequently values changes,
            and while its return value is nanoseconds, the update interval is
            typically only microseconds(10ms or 15ms on windows).
            </remarks>
        </member>
        <member name="P:Nohros.Clock.CurrentTimeMilis">
            <summary>
            Gets the current time in milliseconds.
            </summary>
            <value>The diferrence</value>
            <remarks>This method should be used only to measure elapsed time
            and is not related to any other notion of system or wall-clock time.
            The value returned represents miliseconds since some fixed but
            arbitrary time(perhaps in the future, so values may be negative). This
            method provides miliseconds precision, but not necessarily miliseconds
            accurancy.No guarantees are made about how frequently values changes,
            and while its return value is miliseconds, the update interval is
            typically only microseconds(10ms or 15ms on windows).
            </remarks>
        </member>
        <member name="P:Nohros.Clock.Tick">
            <summary>
            Gets the current time tick.
            </summary>
            <value>
            The current time tick.
            </value>
            <remarks>
            The smallest unit of time is the tick, which is equals to 100
            nanoseconds.
            <para>
            This method should be used only to measure elapsed time
            and is not related to any other notion of system or wall-clock time.
            The value returned represents nanoseconds since some fixed but
            arbitrary time(perhaps in the future, so values may be negative). This
            method provides nanoseconds precision, but not necessarily nanoseconds
            accurancy.No guarantees are made about how frequently values changes,
            and while its return value is nanoseconds, the update interval is
            typically only microseconds(10ms or 15ms on windows).
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.StringSet.Hash(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Computes the hash code of the string consisting of the joined string
            of the <paramref name="strs"/> collection.
            </summary>
            <returns>
            The hash code of the string consisting of the joined string
            of the <paramref name="strs"/> collection.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringSet.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates all the elements of <paramref name="strs"/>, using the
            specified separator between each element.
            </summary>
            <returns>
            A string that consists of the elements in the <paramref name="strs"/>
            delimited by the <paramref name="separator"/> string. If
            <paramref name="strs"/> does not contain any element, the method returns
            <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.StringSet.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.StringBuilder)">
            <summary>
            Concatenates all the elements of <paramref name="strs"/>, using the
            specified separator between each element.
            </summary>
            <remarks>
            A string that consists of the elements in the <paramref name="strs"/>
            delimited by the <paramref name="separator"/> will be appended to
            the given <see cref="T:System.Text.StringBuilder"/> object.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.Providers.GetProviderNode(Nohros.Configuration.IProvidersNode,System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> whose anme is <paramref name="name"/>
            and belongs to the unamed providers group.
            </summary>
            <param name="providers">
            A <see cref="T:Nohros.Configuration.IProvidersNode"/> taht contains a group whose name is
            <see cref="F:System.String.Empty"/>.
            </param>
            <param name="name">
            The name of the provider to get.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Providers.GetProviderNode(Nohros.Configuration.IProvidersNode,System.String,Nohros.Configuration.IProviderNode@)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> whose anme is <paramref name="name"/>
            and belongs to the unamed providers group.
            </summary>
            <param name="providers">
            A <see cref="T:Nohros.Configuration.IProvidersNode"/> taht contains a group whose name is
            <see cref="F:System.String.Empty"/>.
            </param>
            <param name="name">
            The name of the provider to get.
            </param>
            <returns></returns>
        </member>
        <member name="T:Nohros.Data.IStateByNameQuery">
            <summary>
            Represents a query that gets a state that is associated with a given
            name.
            </summary>
        </member>
        <member name="M:Nohros.Data.IStateByNameQuery.Execute(System.String)">
            <summary>
            Gets the state that is associate with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <returns>
            The state that is associated with the given <paramref name="name"/>.
            </returns>
            <exception cref="T:Nohros.NoResultException">
            There is no state associated with the given <paramref name="name"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateByNameQuery.Execute(System.String,System.String@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <c>null</c> if  <paramref name="name"/>
            is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.IStateByNameQuery.Execute(System.String,System.Int32@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to an signed 32-bit integer.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <c>-1</c> if  <paramref name="name"/>
            is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an signed 32-bit integer value.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateByNameQuery.Execute(System.String,System.Guid@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to a <see cref="T:System.Guid"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <see cref="F:System.Guid.Empty"/>
            <paramref name="name"/> is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an <see cref="T:System.Guid"/>
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateByNameQuery.Execute(System.String,System.DateTime@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <see cref="F:System.DateTime.MinValue"/> if
            <paramref name="name"/> is not found.
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an <see cref="T:System.DateTime"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.IStateByNameQuery.Execute(System.String,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            Try to get the state that is associated with the given
            <paramref name="name"/> and convert it to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="name">
            The name of the state to get.
            </param>
            <param name="state">
            When this method returns contains the state that is associated with the
            given <paramref name="name"/>; or <see cref="F:System.DateTime.MinValue"/> if
            <paramref name="name"/> is not found.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the
            style elements that can be present in the "state" for the parse
            operation to succeed, and that defines how to interpret the parsed
            date in relation to the current time zone or the current date. A
            typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>
            </param>
            <returns>
            <c>true</c> is a <paramref name="name"/> is found; otherwise
            <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The state associated with <paramref name="name"/> cannot be converted
            to an <see cref="T:System.DateTime"/>.
            </exception>
        </member>
        <member name="T:Nohros.Caching.CacheLoader`1">
            <summary>
            Computes an retrieve values, based on a key, for use in populating a
            <see cref="T:Nohros.Caching.ICache`1"/>
            </summary>
            <typeparam name="T">The type of the objects that is loaded.
            </typeparam>
        </member>
        <member name="M:Nohros.Caching.CacheLoader`1.From(Nohros.Caching.CacheLoaderDelegate{`0})">
            <summary>
            Returns a <see cref="T:Nohros.Caching.CacheLoader`1"/> which creates values by
            applying a <see cref="T:Nohros.Caching.CacheLoaderDelegate`1"/> using a key.
            </summary>
            <param name="loader">A <see cref="T:Nohros.Caching.CacheLoaderDelegate`1"/> that
            is used to compute the value from the key.</param>
            <returns>A <see cref="T:Nohros.Caching.CacheLoader`1"/> wich creates values by
            applying the <paramref name="loader"/> to the key.</returns>
        </member>
        <member name="M:Nohros.Caching.CacheLoader`1.Load(System.String)">
            <summary>
            Computes or retrieves the value correspnoding to
            <paramref name="key"/>.
            </summary>
            <param name="key">The key whose value should be loaded; will never
            be null.</param>
            <returns>The value associated with <paramref name="key"/>; may not be
            null.</returns>
        </member>
        <member name="M:Nohros.Caching.CacheLoader`1.Reload(System.String,`0)">
            <summary>
            Computes or retrieves a replacement value corresponding to an
            already-cached <paramref name="key"/>.
            </summary>
            <param name="key">
            The non-null key whose value should be loaded.
            </param>
            <param name="old_value">
            The non-null old value corresponding to <see cref="!:key"/>.
            </param>
            <returns>The future new value associated with <see cref="!:key"/>;
            must not be or return null(for reference types).</returns>
            <remarks>
            This method is called when an existing cache entry is refreshed by
            <see cref="M:Nohros.Caching.CacheBuilder`1.RefreshAfterWrite(System.TimeSpan)"/>, or through a call to
            cache refresh method.
            <para>
            This implementation synchronously delegates to <see cref="M:Nohros.Caching.CacheLoader`1.Load(System.String)"/>. It
            is recommended that it be overridden with an asynchronous
            implementation when using
            <see cref="M:Nohros.Caching.CacheBuilder`1.RefreshAfterWrite(System.TimeSpan)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.CacheLoader`1.CacheLoaderDelegateToCacheLoader`1.#ctor(Nohros.Caching.CacheLoaderDelegate{`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Caching.CacheLoader`1.CacheLoaderDelegateToCacheLoader`1"/>
            class by using the specified <see cref="T:Nohros.Caching.CacheLoaderDelegate`1"/>
            </summary>
            <param name="loader">The loader that is used to load instances of
            type <typeparamref name="T"/></param>
        </member>
        <member name="M:Nohros.Caching.CacheLoader`1.CacheLoaderDelegateToCacheLoader`1.Load(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.MessageQueue.IMessageMiddleware`1">
            <summary>
            Defines the concept of a message queue middleware. That is the place
            where the messages are send to and received from.
            </summary>
        </member>
        <member name="T:Nohros.MessageQueue.IMessageMiddleware">
            <summary>
            Defines the concept of a message queue middleware. That is the place
            where the messages are send to and received from.
            </summary>
        </member>
        <member name="M:Nohros.MessageQueue.IMessageMiddleware.Enqueue(Nohros.MessageQueue.IMessage,Nohros.MessageQueue.IOperationData)">
            <summary>
            Put a message into the queue.
            </summary>
            <param name="data">The parameters needed to put a message in the
            queue.</param>
            <returns>true if the message is successfully enqueued; otherwise,
            false. If the middleware does not know if the message was enqueued or
            not, this method should return true.</returns>
        </member>
        <member name="M:Nohros.MessageQueue.IMessageMiddleware.Dequeue(Nohros.MessageQueue.IOperationData)">
            <summary>
            Removes and returns a message from the queue.
            </summary>
            <param name="data">The parameters needed to remove the message from
            the queue.</param>
            <returns>true if a message is removed from the queue; otherwise,
            false.</returns>
        </member>
        <member name="M:Nohros.MessageQueue.IMessageMiddleware`1.Enqueue(`0,Nohros.MessageQueue.IOperationData)">
            <summary>
            Put a message into the queue.
            </summary>
            <param name="data">The parameters needed to put a message in the
            queue.</param>
            <returns>true if the message is successfully enqueued; otherwise,
            false. If the middleware does not know if the message was enqueued or
            not, this method should return true.</returns>
        </member>
        <member name="M:Nohros.MessageQueue.IMessageMiddleware`1.Dequeue(Nohros.MessageQueue.IOperationData)">
            <summary>
            Removes and returns a message from the queue.
            </summary>
            <param name="data">The parameters needed to remove the message from
            the queue.</param>
            <returns>true if a message is removed from the queue; otherwise,
            false.</returns>
        </member>
        <member name="T:Nohros.Logging.LogLevel">
            <summary>
            The supported logging levels. Not all loggin libraries support all the
            levels and when is the case the related <see cref="T:Nohros.Logging.ILogger"/> object will
            always return false for the Is"LogLevel"Enabled.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.All">
            <summary>
            All logging levels.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Trace">
            <summary>
            A TRACE logging level.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Debug">
            <summary>
            A DEBUG logging level.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Info">
            <summary>
            A INFO loggin level.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Warn">
            <summary>
            A WARN logging level.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Error">
            <summary>
            A ERROR logging level.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Fatal">
            <summary>
            A FATAL logging level.
            </summary>
        </member>
        <member name="F:Nohros.Logging.LogLevel.Off">
            <summary>
            Do not log anything.
            </summary>
        </member>
        <member name="T:Nohros.Providers.ProviderFactory`1">
            <summary>
            A class used to instantiate others factories using information defined
            on a <see cref="T:Nohros.Configuration.IProviderNode"/> object.
            </summary>
            <remarks>
            The <typeparam name="T"> is usually a interface or an abstract class that
            the factory should implement or derive from.</typeparam>
            <para>
            The type that is instantiated should be defined in the
            <see cref="T:Nohros.Configuration.IProviderNode"/> object and should have a constructor with no
            parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Providers.ProviderFactory`1.GetProviderFactoryType(Nohros.Configuration.IProviderNode)">
            <summary>
            Gets the <see cref="T:System.Type"/> of a provider, using the specified provider
            node.
            </summary>
            <param name="node">A <see cref="T:Nohros.Configuration.IProviderNode"/> object that contains
            information about the type <typeparamref name="T"/></param>
            <returns>The type instance that represents the exact runtime type of
            the specified provider or null if the type could not be loaded.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is a
            null reference.</exception>
            <remarks>
            If the location of the assemlby is specified on the configuration node
            we will try load the assembly using this location and them get the type
            from the loaded assembly.
            </remarks>
        </member>
        <member name="M:Nohros.Providers.ProviderFactory`1.CreateProviderFactoryNoException(Nohros.Configuration.IProviderNode,System.Object[])">
            <summary>
            Creates a new instance of the <typeparamref name="T"/> class by using
            the type that is defined on the configuration node.
            </summary>
            <param name="node">A <see cref="T:Nohros.Configuration.IProviderNode"/> object that contains
            information about the type <typeparamref name="T"/></param>
            <param name="args">An array of arguments that match in number, order,
            and type the parameters of the constructor to invoke. If args is an
            empty array or null, the constructor that takes no parameters(the
            default constructor) is invoked.</param>
            <returns>An instance of the <typeparamref name="T"/> class.
            or null if a class of the type <typeparamref name="T"/> could not be
            created.</returns>
            <remarks>
            A exception is never raised by this method. If a exception is raised
            by the object constructor it will be catched and <c>null</c> will be
            returned. If you need to know about the exception use the method
            <see cref="M:Nohros.Providers.ProviderFactory`1.CreateProviderFactory(Nohros.Configuration.IProviderNode,System.Object[])"/>.
            </remarks>
            <seealso cref="M:Nohros.Providers.ProviderFactory`1.CreateProviderFactory(Nohros.Configuration.IProviderNode,System.Object[])"/>
            <seealso cref="T:Nohros.Configuration.IProviderNode"/>
        </member>
        <member name="M:Nohros.Providers.ProviderFactory`1.CreateProviderFactoryFallback(Nohros.Configuration.IProviderNode,System.Object[])">
            <summary>
            Creates a new instance of the <typeparamref name="T"/> class by using
            the type defined by the <paramref name="node"/> and the specified
            arguments, falling back to the default constructor.
            </summary>
            <param name="node">
            A <see cref="T:Nohros.Configuration.IProviderNode"/> object that contains information about
            the type <typeparamref name="T"/>
            </param>
            <param name="args">
            An array of arguments that match in number, order,
            and type the parameters of the constructor to invoke. If args is an
            empty array or null, the constructor that takes no parameters(the
            default constructor) is invoked.
            </param>
            <returns>
            An instance of the <typeparamref name="T"/> class.
            </returns>
            <remarks>
            If a constructor that match in number, order and type the specified
            array of arguments is not found, this method try to create an instance
            of the type <typeparamref name="T"/> using the default constructor.
            </remarks>
            <seealso cref="M:Nohros.Providers.ProviderFactory`1.CreateProviderFactory(Nohros.Configuration.IProviderNode,System.Object[])"/>
            <seealso cref="T:Nohros.Configuration.IProviderNode"/>
        </member>
        <member name="M:Nohros.Providers.ProviderFactory`1.CreateProviderFactory(Nohros.Configuration.IProviderNode,System.Object[])">
            <summary>
            Creates a new instance of the <typeparamref name="T"/> class by using
            the type that is defined on the configuration node.
            </summary>
            <param name="node">
            A <see cref="T:Nohros.Configuration.IProviderNode"/> object that contains information about
            the type <typeparamref name="T"/>.
            </param>
            <param name="args">
            An array of arguments that match in number, order, and type the
            parameters of the constructor to invoke. If args is an empty array or
            null, the constructor that takes no parameters(the default constructor)
            is invoked.
            </param>
            <returns>
            An instance of the <typeparamref name="T"/> class.
            </returns>
            <exception cref="T:Nohros.ProviderException">
            A instance of the specified type could not be created.
            </exception>
        </member>
        <member name="T:Nohros.StringMap">
            <summary>
            Implements a <see cref="T:System.Collections.Generic.IDictionary`2"/> with the key and the value strongly typed
            to be strings rather than object.
            </summary>
        </member>
        <member name="M:Nohros.StringMap.#ctor">
            <summary>
            Initializes a new instance_ of the StringMap class that is empty, has the default initial capacity, and uses
            the default string equality comparer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.StringMap.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})" -->
        <member name="M:Nohros.StringMap.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance_ of the StringMap class that is empty, has the default initial capacity, and use the
            specified <see cref="!:IEqualityComparer&lt;string&gt;"/>.
            </summary>
            <param name="comparer">The <see cref="!:IEqualityComparer&lt;string&gt;"/>. implementation to use when comparing
            keys, or null to use the default string <see cref="!:EqualityComparer&lt;string&gt;"/>.</param>
        </member>
        <member name="M:Nohros.StringMap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance_ of the StringMap class that is empty, has the specified
            initial capacity, and uses the default string comparer.
            </summary>
            <param name="capacity">The initial number of strings that the <see cref="!:IDictionary&lt;string,string&gt;"/> can contain.</param>
        </member>
        <member name="M:Nohros.StringMap.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance_ of the StringMap class that contains elements copied from the specified <see cref="!:IDictionary&gt;,&lt;"/>
            and uses the specified <see cref="!:IEqualityComparer&gt;string&lt;"/>
            </summary>
            <param name="dictionary">The <see cref="!:IDictionary&gt;string,string&lt;"/> whose elements are copied to the new StringMap class.</param>
            <param name="comparer">The <see cref="!:IEqualityComparer&gt;string&lt;"/> implementation to use when comparing
            keys, or null to use the default <see cref="!:EqualityComparer&gt;string&lt;"/></param>
        </member>
        <member name="M:Nohros.StringMap.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance_ of the <see cref="!:IDictionary&lt;string,string&gt;"/> class that is empty, has specified
            initial capacity, and uses the specified <see cref="!:IEqualityComparer&lt;string&gt;"/>.
            </summary>
            <param name="capacity">The initial number of strings that the StringMap can contain.</param>
            <param name="comparer">The <see cref="!:IEqualityComparer&gt;string&lt;"/> implementation to use when comparing
            keys, or null to use the default <see cref="!:EqualityComparer&lt;string&gt;"/></param>
        </member>
        <member name="M:Nohros.StringMap.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, a null reference. This parameter is passed uninitialized.</param>
            <returns></returns>
        </member>
        <member name="P:Nohros.StringMap.Item(System.String)">
            <summary>
            Gets or sets a string associated with the specified key.
            </summary>
            <param name="key">The key value to get or set.</param>
            <returns>The value associated with the specified key.If the specified key is not found attempt to get
            the value of this property returns null and attempt to set the value of this property creates a new element
            with the specified key.</returns>
        </member>
        <member name="M:Nohros.ParameterizedStringPartParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.ParameterizedStringPartParameter"/> class by using the
            specified parameter name.
            </summary>
            <param name="name">
            A string that uniquely identifies the paramter within a parameterized
            string.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.ParameterizedStringPartParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.ParameterizedStringPartParameter"/> class by using the
            specified parameter name and value.
            </summary>
            <param name="name">
            A string that uniquely identifies the parameter within a parameterized
            string.
            </param>
            <param name="value">
            The paramter's value. This value will replace the parameteron the final
            parameterized string.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is a empty string or a sequence of spaces.
            </exception>
        </member>
        <member name="M:Nohros.ParameterizedStringPartParameter.Equals(Nohros.ParameterizedStringPartLiteral)">
            <summary>
            Gets a value that indicates whether the provided object is equal to
            this object.
            </summary>
            <param name="other">
            A  <see cref="T:Nohros.ParameterizedStringPartLiteral"/> object.
            </param>
            <returns>
            <c>true</c> if the provided object is equals to this object; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Nohros.ParameterizedStringPartParameter.Equals(System.Object)">
            <summary>
            Gets a value that indicates whether the provided object is equal to
            this object.
            </summary>
            <param name="obj">
            An object that can be cast to a <see cref="T:Nohros.ParameterizedStringPartLiteral"/>
            object.
            </param>
            <returns>
            <c>true</c> if the provided object is equals to this object; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Nohros.ParameterizedStringPartParameter.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <remarks>
            This method overrides the <see cref="M:System.Object.GetHashCode"/> and more
            complete documentation might be available in that topic.
            </remarks>
        </member>
        <member name="P:Nohros.ParameterizedStringPartParameter.IsParameter">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.RunnableDelegate">
            <summary>
            Represents a method that returns nothing and receives no parameters.
            </summary>
            <remarks>
            A delegate is a type that defines a signature, that is, the return value
            type and parameter list types for a method. The delegate can be used to
            declare a variable that can refer to any method with the same signature
            as the delegate.
            <para>
            This delegate defines a method that does not return a value and have no
            arguments.
            </para>
            <para>
            <see cref="T:Nohros.RunnableDelegate"/> is similar to the delegate
            <see cref="T:System.EventHandler`1"/> but does not requires a event
            argument do not impose an obligation to use a object to identify the
            method runner('sender'), which is useless in most cases.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.UniqueConstraintViolationException">
            <summary>
            Exception thrown when an action would violate a constraint on repostiory
            structure. For example, when an attempt is made to persistently add an
            item to a repository that would violate that repository's constraint.
            </summary>
        </member>
        <member name="M:Nohros.UniqueConstraintViolationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.UniqueConstraintViolationException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.UniqueConstraintViolationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.UniqueConstraintViolationException"/> class.
            </summary>
            <param name="message">
            A message describing why this
            <see cref="T:Nohros.UniqueConstraintViolationException"/>was throw.
            </param>
        </member>
        <member name="M:Nohros.UniqueConstraintViolationException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.UniqueConstraintViolationException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this
            <see cref="T:Nohros.UniqueConstraintViolationException"/> to be throw.
            </param>
        </member>
        <member name="M:Nohros.UniqueConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the
            <see cref="T:Nohros.UniqueConstraintViolationException"/> class.
            </summary>
            <param name="info">
            The object that holds the information to deserialize.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Nohros.UniqueConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.ConstraintViolationException"/> class.
            </summary>
            <param name="message">
            A message describing why this
            <see cref="T:Nohros.UniqueConstraintViolationException"/> was throw.
            </param>
            <param name="inner_exception">
            The exception that caused this
            <see cref="T:Nohros.UniqueConstraintViolationException"/>to be throw.
            </param>
        </member>
        <member name="T:Nohros.Configuration.DataServerConfig">
            <summary>
            Defines the configuration for a data server.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.DataServerConfig.Name">
            <summary>
            Gets or set the name of the data sever.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.DataServerConfig.ConnectionStringName">
            <summary>
            Gets or set the name of the connection string that is associated with
            the data server.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.DataServerConfig.ServerId">
            <summary>
            Gets or set a <see cref="T:System.Guid"/> that uniquely identifies the server.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.DataServerConfig.SupressDTC">
            <summary>
            Gets or sets a value that indicates if the connections to the data
            server should supress the ambient transaction context.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AssemblyScannerResultsExtensions.ForAllTypes``1(System.Collections.Generic.IEnumerable{System.Type},System.Action{System.Type})">
            <summary>
            Applies the given action to all the scanned types that can be assigned
            to <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AssemblyScannerResultsExtensions.ForAllTypes``1(Nohros.Configuration.AssemblyScannerResults,System.Action{System.Type})">
            <summary>
            Applies the given action to all the scanned types that can be assigned
            to <typeparamref name="T" />.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.AssemblyScannerResults">
            <summary>
            Holds <see cref="M:Nohros.Configuration.AssemblyScanner.GetScannableAssemblies"/> results.
            Contains list of errors and list of scannable assemblies.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.AssemblyScannerResults.#ctor">
            <summary>
            Constructor to initialize AssemblyScannerResults
            </summary>
        </member>
        <member name="P:Nohros.Configuration.AssemblyScannerResults.Assemblies">
            <summary>
            List of successfully found and loaded assemblies
            </summary>
        </member>
        <member name="P:Nohros.Configuration.AssemblyScannerResults.SkippedFiles">
            <summary>
            List of files that were skipped while scanning because they were:
            <para>
            a) explicitly excluded by the user
            </para>
            <para>
            b) not a .NET DLL
            </para>
            </summary>
        </member>
        <member name="P:Nohros.Configuration.AssemblyScannerResults.ErrorsThrownDuringScanning">
            <summary>
            True if errors where encountered during assembly scanning
            </summary>
        </member>
        <member name="P:Nohros.Configuration.AssemblyScannerResults.Types">
            <summary>
            List of types.
            </summary>
        </member>
        <member name="T:Nohros.Caching.StrongValueReference`1">
            <summary>
            References a string value.
            </summary>
            <typeparam name="T">
            The type of the value that is referenced.
            </typeparam>
        </member>
        <member name="M:Nohros.Caching.StrongValueReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="!:StrongValueReference"/>
            class by using the specified referent value.
            </summary>
            <param name="referent"></param>
        </member>
        <member name="M:Nohros.Caching.StrongValueReference`1.WaitForValue">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.StrongValueReference`1.Value">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.StrongValueReference`1.IsLoading">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.StrongValueReference`1.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Caching.LoadingValueReference`1">
            <summary>
            A <see cref="T:Nohros.Caching.IValueReference`1"/> that indicates that the value is
            loading.
            </summary>
            <typeparam name="T">The type of the object that this instance reference.
            </typeparam>
        </member>
        <member name="M:Nohros.Caching.LoadingValueReference`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LoadingValueReference`1"/>
            with a unset value.
            </summary>
        </member>
        <member name="M:Nohros.Caching.LoadingValueReference`1.#ctor(Nohros.Caching.IValueReference{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LoadingValueReference`1"/>
            class by using the specified old value.
            </summary>
            <param name="old_value"></param>
        </member>
        <member name="M:Nohros.Caching.LoadingValueReference`1.Set(`0)">
            <summary>
            Sets the value of this loading value.
            </summary>
            <param name="value">The value this reference should hold.</param>
            <returns><c>true</c> if the value is successfully set, or <c>false</c>
            if the value has already been set or if the loading was cancelled.
            </returns>
        </member>
        <member name="M:Nohros.Caching.LoadingValueReference`1.SetException(System.Exception)">
            <summary>
            Sets the loading value to having failed with the given exception.
            </summary>
            <param name="exception">
            The exception this reference  should hold.
            </param>
            <returns><c>true</c> if the exception is succesfully set, <c>false</c>
            if the exception has already been set or if the loading was cancelled.
            </returns>
            <remarks>The exception will be wrapped in a
            <see cref="T:Nohros.ExecutionException"/> and thrown from the get methods.
            </remarks>
        </member>
        <member name="P:Nohros.Caching.LoadingValueReference`1.IsLoading">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.LoadingValueReference`1.Value">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Caching.LoadingValueReference`1.Elapsed">
            <summary>
            Gets the total elapsed time since the future starts computing its
            value.
            </summary>
        </member>
        <member name="P:Nohros.Caching.LoadingValueReference`1.ElapsedNanos">
            <summary>
            Gets the total elapsed time since the future starts computing its
            value in nanoseconds.
            </summary>
        </member>
        <member name="T:Nohros.FundamentalValue">
            <summary>
            Represents the simple fundamental types of values.
            </summary>
        </member>
        <member name="M:Nohros.FundamentalValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance_ of the FundamentalCalss by using the specified boolean value.
            </summary>
            <param name="in_value">The underlying value</param>
        </member>
        <member name="M:Nohros.FundamentalValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance_ of the FundamentalCalss by using the specified boolean value.
            </summary>
            <param name="in_value">The underlying value</param>
        </member>
        <member name="M:Nohros.FundamentalValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance_ of the FundamentalCalss by using the specified boolean value.
            </summary>
            <param name="in_value">The underlying value</param>
        </member>
        <member name="M:Nohros.FundamentalValue.GetAsBoolean(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.FundamentalValue.GetAsInteger(System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.FundamentalValue.GetAsReal(System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.FundamentalValue.GetAsBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.FundamentalValue.GetAsInteger">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.FundamentalValue.GetAsReal">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.ParameterizedString">
            <summary>
            Represents a string that has embedded parameters.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Nohros.ParameterizedString.flat_string">
            <summary>
            The original version of parameterized string.
            </summary>
        </member>
        <member name="F:Nohros.ParameterizedString.use_space_as_terminator">
            <summary>
            A value that indicates if spaces should be used to terminate paramter
            parsing.
            </summary>
        </member>
        <member name="M:Nohros.ParameterizedString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.ParameterizedString"/>
            class.
            </summary>
            <remarks>
            Implementors should initialize the <see cref="F:Nohros.ParameterizedString.flat_string"/> member.
            </remarks>
        </member>
        <member name="M:Nohros.ParameterizedString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.ParameterizedString"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.ParameterizedString.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.ParameterizedString"/>
            class by using the specified parameterized string and parameter
            delimiter.
            </summary>
            <param name="str">A string that contains literal text and paramters
            delimited by <paramref name="delimiter"/>.</param>
            <param name="delimiter">A string that delimits a parameter within the
            given <paramref name="str"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> or
            <paramref name="delimiter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Nohros.ParameterizedString.FromParameterizedStringPartCollection(System.Collections.Generic.IEnumerable{Nohros.ParameterizedStringPart},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.ParameterizedString"/>
            class by using the provided list of
            <see cref="T:Nohros.ParameterizedStringPart"/>
            </summary>
            <param name="parts">A list of <see cref="T:Nohros.ParameterizedStringPart"/>
            objects that compose this instance.</param>
            <param name="delimiter">The delimiter used to delimits the parameters.
            within the string.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parts"/> or
            <paramref name="delimiter"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parts"/> contains one or more <c>null</c> elements.
            </exception>
        </member>
        <member name="M:Nohros.ParameterizedString.Parse">
            <summary>
            Parses a string extracting the paramters and literal parts.
            </summary>
        </member>
        <member name="M:Nohros.ParameterizedString.NextDelimiterPos(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the
            <paramref name="delimiter"/> in the <paramref name="str"/>.The search
            starts at a specified character position.
            </summary>
            <param name="str">
            The string to seek.
            </param>
            <param name="delimiter"></param>
            <param name="current_position">
            The search starting positon.
            </param>
            <param name="use_space_as_delimiter">
            </param>
            <returns>
            The zero-based index position of the first character of
            <paramref name="delimiter"/> if that string is found, or -1 if it is
            not.
            </returns>
        </member>
        <member name="M:Nohros.ParameterizedString.ToString">
            <summary>
            Serializes this instance into a string object.
            </summary>
            <returns>
            A string representation of this instance.
            </returns>
            <remarks>
            If the parameterized string is not parsed yet a empty string will be
            returned.
            </remarks>
        </member>
        <member name="P:Nohros.ParameterizedString.Parameters">
            <summary>
            Gets a collection of parameters associated with this instance.
            </summary>
        </member>
        <member name="P:Nohros.ParameterizedString.UseSpaceAsTerminator">
            <summary>
            Gets a value indicating if the space should be used as the parameter
            terminator in conjuction with the specified delimiter.
            </summary>
            <remarks>
            When this property is set to true a parameter will be identified by
            a string enclosed between two delimiters or a delimiter and a space.
            The "name" and "name_with_space" of the string above is considered
            parameters when this property is true:
            <para>
              "The $name$ is a parameter and $name_with_space is a a parameter too."
            </para>
            <para>
            Note that the space is used only as parameter terminator delimiter.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.Collections.Visitor`1">
            <summary>
            A implementation of the <see cref="T:Nohros.Collections.IVisitor`1"/> that forwards the
            <see cref="M:Nohros.Collections.Visitor`1.Visit(`0,System.Object)"/> method call to a <see cref="T:Nohros.Collections.VisitorCallback`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nohros.Collections.Visitor`1.#ctor(Nohros.Collections.VisitorCallback{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.Visitor`1"/> class
            by using the specified <see cref="T:Nohros.Collections.VisitorCallback`1"/>.
            </summary>
            <param name="callback">
            A <see cref="T:Nohros.Collections.VisitorCallback`1"/> to forwards the <see cref="M:Nohros.Collections.Visitor`1.Visit(`0,System.Object)"/>
            method.
            </param>
        </member>
        <member name="M:Nohros.Collections.Visitor`1.Visit(`0,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Collections.Visitor`1.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Collections.Visitor`2">
            <summary>
            A implementation of the <see cref="T:Nohros.Collections.IVisitor`2"/> that forwards the
            <see cref="M:Nohros.Collections.Visitor`2.Visit(`0,`1,System.Object)"/> method call to a <see cref="T:Nohros.Collections.VisitorCallback`2"/>.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Nohros.Collections.Visitor`2.#ctor(Nohros.Collections.VisitorCallback{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.Visitor`1"/> class
            by using the specified <see cref="T:Nohros.Collections.VisitorCallback`1"/>.
            </summary>
            <param name="callback">
            A <see cref="T:Nohros.Collections.VisitorCallback`1"/> to forwards the <see cref="M:Nohros.Collections.Visitor`2.Visit(`0,`1,System.Object)"/>
            method.
            </param>
        </member>
        <member name="M:Nohros.Collections.Visitor`2.Visit(`0,`1,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Collections.Visitor`2.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.DataFieldString">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.String"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldString.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldString"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldString.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a string
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a string
            at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldString.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldString"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldString.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.String"/> at the field position.
            </param>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.ContainsKeys``1(System.Collections.Generic.IDictionary{System.String,``0},System.String[])">
            <summary>
            Checks if the specified options keys exists in the options dictionary.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to check for key existence.
            </param>
            <param name="keys">
            THe options keys to check for existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is a null reference.
            </exception>
            <returns>
            <c>true</c> if all the specified keys exists in the given 
            <paramref name="options"/> dictionary; otherwise, <c>false</c>. If no
            keys is specified this method returns <c>true</c>.
            </returns>
            <remarks>
            This method checks for existence for each specified key and if one
            of them does not exists returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.ContainsKeys(System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            Checks if the specified options keys exists in the options dictionary.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to check for key existence.
            </param>
            <param name="keys">
            THe options keys to check for existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is a null reference.
            </exception>
            <returns>
            <c>true</c> if all the specified keys exists in the given 
            <paramref name="options"/> dictionary; otherwise, <c>false</c>. If no
            keys is specified this method returns <c>true</c>.
            </returns>
            <remarks>
            This method checks for existence for each specified key and if one
            of them does not exists returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetString(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Gets the string value associated with the specified key.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to search for
            <paramref name="key"/>.
            </param>
            <param name="key">
            The key of the value to get.
            </param>
            <param name="default_value">
            The value to be returned if the <paramref name="key"/> is not found.
            </param>
            <returns>
            A string containing the value for the specified option key, or the
            value of <paramref name="default_value"/> if <paramref name="key"/>
            is not found.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.TryGetInteger``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32@)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its 32-bit signed
            integer equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="value">
            When this method returns contains the value associated with the key
            <paramref name="key"/> converted to a 32-bit integer - or- the default
            value for the integer type if the key is not found or cannot be
            converted to an integer.
            </param>
            <returns>
            <c>true</c> if the value associated with the key
            <paramref name="key"/> is found and is convertible to an 32-bit integer;
            otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetInteger(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its 32-bit signed
            integer equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default_value">
            A 32-bit integer that will be returned when the key
            <paramref name="key"/> is not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default_value"/> if the key was not found.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.TryGetLong(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int64@)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its 64-bit signed
            integer equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="value">
            When this method returns contains the value associated with the key
            <paramref name="key"/> converted to a 32-bit integer - or- the default
            value for the integer type if the key is not found or cannot be
            converted to an integer.
            </param>
            <returns>
            <c>true</c> if the value associated with the key
            <paramref name="key"/> is found and is convertible to an 32-bit integer;
            otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetLong(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int64)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its 64-bit signed
            integer equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default_value">
            A 64-bit integer that will be returned when the key
            <paramref name="key"/> is not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default_value"/> if the key was not found.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.TryGetBoolean(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean@)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its boolean
            equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="value">
            When this method returns contains the value associated with the key
            <paramref name="key"/> converted to a boolean - or- the default
            value for the bool type if the key is not found or cannot be
            converted to an boolean.
            </param>
            <returns>
            <c>true</c> if the value associated with the key
            <paramref name="key"/> is found and is convertible to an boolean;
            otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetBoolean(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Gets the string value associated with the key
            <paramref name="key"/> and try to convert it to its boolean equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default">
            A boolean that will be returned when the key
            <paramref name="key"/> is not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default"/> if the key was not found.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetString(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Gets the string value associated with the key <paramref name="key"/>
            from the <paramref name="options"/>.
            </summary>
            <param name="options">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> to search for the key
            <paramref name="key"/>.
            </param>
            <param name="key">
            The key to search for.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetValue``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
            Gets the value associated with the key <paramref name="key"/>
            from the <paramref name="options"/>.
            </summary>
            <param name="options">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> to search for the key
            <paramref name="key"/>.
            </param>
            <param name="key">
            The key to search for.
            </param>
            <param name="default_value">
            A value that will be returned when the key <paramref name="key"/> is
            not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.ProviderOptions.GetValue``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            Gets the value associated with the key <paramref name="key"/>
            from the <paramref name="options"/>.
            </summary>
            <param name="options">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> to search for the key
            <paramref name="key"/>.
            </param>
            <param name="key">
            The key to search for.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/>.
            </returns>
        </member>
        <member name="T:Nohros.NotNullConstraintViolationException">
            <summary>
            Exception thrown when an action would violate a NOT NULL constraint on
            repostiory. For example, when an attempt is made to persistently add an
            item to a repository that would violate that repository's NOT NULL
            constraint.
            </summary>
        </member>
        <member name="M:Nohros.NotNullConstraintViolationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.NotNullConstraintViolationException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.NotNullConstraintViolationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.NotNullConstraintViolationException"/> class.
            </summary>
            <param name="message">
            A message describing why this
            <see cref="T:Nohros.NotNullConstraintViolationException"/>was throw.
            </param>
        </member>
        <member name="M:Nohros.NotNullConstraintViolationException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.NotNullConstraintViolationException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this
            <see cref="T:Nohros.NotNullConstraintViolationException"/> to be throw.
            </param>
        </member>
        <member name="M:Nohros.NotNullConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the
            <see cref="T:Nohros.NotNullConstraintViolationException"/> class.
            </summary>
            <param name="info">
            The object that holds the information to deserialize.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Nohros.NotNullConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.NotNullConstraintViolationException"/> class.
            </summary>
            <param name="message">
            A message describing why this
            <see cref="T:Nohros.NotNullConstraintViolationException"/> was throw.
            </param>
            <param name="inner_exception">
            The exception that caused this
            <see cref="T:Nohros.NotNullConstraintViolationException"/>to be throw.
            </param>
        </member>
        <member name="T:Nohros.Data.Json.JsonDouble">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that maps a
            <see cref="T:System.Double"/> type to a json number token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonDouble.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDouble"/> class
            that uses the general number format("G") to convert this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDouble.#ctor(System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDouble"/> class
            that uses <paramref name="format"/> to converts this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            The format to use when converting this instance to a string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDouble.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonDouble.op_Explicit(System.Double)~Nohros.Data.Json.JsonDouble">
            <summary>
            Explicit converts an <see cref="T:System.Double"/> object to a
            <see cref="T:Nohros.Data.Json.JsonDouble"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Double"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonDouble"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.NetworkException">
            <summary>
            Thrown if there is a network communication failure.
            </summary>
        </member>
        <member name="M:Nohros.NetworkException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NetworkException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.NetworkException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NetworkException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NetworkException"/>was throw</param>
        </member>
        <member name="M:Nohros.NetworkException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NetworkException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this <see cref="T:Nohros.NetworkException"/> to be
            throw.
            </param>
        </member>
        <member name="M:Nohros.NetworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the <see cref="T:Nohros.NetworkException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NetworkException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NetworkException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.NetworkException"/>to be throw.</param>
        </member>
        <member name="T:Nohros.Data.IMapper`1">
            <summary>
            Provides a means of mapping a result to a object.
            </summary>
            <typeparam name="T">
            The type of the object to map.
            </typeparam>
        </member>
        <member name="M:Nohros.Data.IMapper`1.Map">
            <summary>
            Maps a element of a query result to a object of type
            <typeparamref name="T"/>.
            </summary>
            <returns>
            A object of type <typeparamref name="T"/> containing the data of the
            current element of a record set.
            </returns>
        </member>
        <member name="T:Nohros.Data.ByteMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Byte"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.ByteMapType.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.ByteMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Concurrent.NonReentrantSchedule">
            <summary>
            Defines a way to schedule a task in a non-reentrant manner.
            </summary>
            <remarks>
            The <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/> is non-reentrant. When a task
            is running the <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/> wait it to finish
            before start a new one. After a task is finished the
            <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/> waits a predefined 
            interval and start the task again.
            <para>
            The tasks runs in a background thread.
            </para>
            <para>
            Any unhandled exception is catched and published through the
            <see cref="E:Nohros.Concurrent.NonReentrantSchedule.ExceptionThrown"/> event. If that are no subscribers to the
            <see cref="E:Nohros.Concurrent.NonReentrantSchedule.ExceptionThrown"/> event, the exception will be logged
            through the configured <see cref="T:Nohros.Logging.MustLogger"/> and swallowed.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/>
            class by using the given interval.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.Every(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/> class than run a task
            at every <see cref="!:interval"/>.
            </summary>
            <param name="interval">
            The interval to schedule a task.
            </param>
            <returns>
            A <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/> object that runs a task at every
            <see cref="!:interval"/>.
            </returns>
            <remarks>
            The returned <see cref="T:Nohros.Concurrent.NonReentrantSchedule"/> will use a dedicated
            thread to run the task.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.Runnable(System.Action,System.Boolean)">
            <summary>
            Defines the action that should run at the associated interval.
            </summary>
            <param name="task">
            The action that should run at the associated interval.
            </param>
            <param name="use_thread_pool">
            A value that inidcates if the task should be executed in a thread
            from the <see cref="T:System.Threading.ThreadPool"/> or in a dedicated thread; should
            be <c>true</c> to use threads from <see cref="T:System.Threading.ThreadPool"/> and
            <c>false</c> to use a dedicated thead. Default to <c>false</c>
            </param>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.Run(System.Action,System.Boolean)">
            <summary>
            Defines the action that should run at the associated interval.
            </summary>
            <param name="task">
            The action that should run at the associated interval.
            </param>
            <param name="use_thread_pool">
            A value that inidcates if the task should be executed in a thread
            from the <see cref="T:System.Threading.ThreadPool"/> or in a dedicated thread; should
            be <c>true</c> to use threads from <see cref="T:System.Threading.ThreadPool"/> and
            <c>false</c> to use a dedicated thead. Default to <c>false</c>
            </param>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.Runnable(System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Defines the action that should run at the associated interval.
            </summary>
            <param name="task">
            The action that should run at the associated interval.
            </param>
            <param name="state">
            An object containing data to be used bu the scheduled task.
            </param>
            <param name="use_thread_pool">
            A value that inidcates if the task should be executed in a thread
            from the <see cref="T:System.Threading.ThreadPool"/> or in a dedicated thread; should
            be <c>true</c> to use threads from <see cref="T:System.Threading.ThreadPool"/> and
            <c>false</c> to use a dedicated thead. Default to <c>false</c>
            </param>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.Run(System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Defines the action that should run at the associated interval.
            </summary>
            <param name="task">
            The action that should run at the associated interval.
            </param>
            <param name="state">
            An object containing data to be used bu the scheduled task.
            </param>
            <param name="use_thread_pool">
            A value that inidcates if the task should be executed in a thread
            from the <see cref="T:System.Threading.ThreadPool"/> or in a dedicated thread; should
            be <c>true</c> to use threads from <see cref="T:System.Threading.ThreadPool"/> and
            <c>false</c> to use a dedicated thead. Default to <c>false</c>
            </param>
        </member>
        <member name="M:Nohros.Concurrent.NonReentrantSchedule.Stop">
            <summary>
            Stops scheduling tasks and returns an <seealso cref="T:System.Threading.WaitHandle"/> that
            can be used to monitor when the pending task finish.
            </summary>
            <remarks>
            If there is no task running <seealso cref="M:System.Threading.WaitHandle.WaitOne"/>
            overloads returns imediatelly.
            </remarks>
        </member>
        <member name="E:Nohros.Concurrent.NonReentrantSchedule.ExceptionThrown">
            <summary>
            Raised when an exception is thrown while executing the scheduled
            task.
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.Executors">
            <summary>
            Factory methods for <see cref="T:Nohros.Concurrent.IExecutor"/>.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.Executors.SameThreadExecutor">
            <summary>
            Creates an executor that runs each task in the thread that invokes
            <see cref="M:Nohros.Concurrent.IExecutor.Execute(Nohros.RunnableDelegate)"/>.
            </summary>
            <returns>
            An executor that runs each task in the thread that invokes
            <see cref="M:Nohros.Concurrent.IExecutor.Execute(Nohros.RunnableDelegate)"/>.
            </returns>
            <remarks>
            Tasks are immediately executed in the thread that submitted the task.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Executors.ThreadPoolExecutor">
            <summary>
            Creates an <see cref="T:Nohros.Concurrent.IExecutor"/> that executes each submitted task
            using a thread from <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <returns>
            An <see cref="T:Nohros.Concurrent.IExecutor"/> that executes each submitted task using a
            thread from <see cref="T:System.Threading.ThreadPool"/>.
            </returns>
        </member>
        <member name="T:Nohros.Pointer">
            <summary>
            Logical representation of a pointer, but in fact a byte array reference and a position in it. This
            is used to read logical units (bytes, shorts, integers, domain names etc.) from a byte array, keeping
            the pointer updated and positioning to the next record. This type of pointer can be considered the logical
            equivalent of an (unsigned char*) in C++;
            </summary>
        </member>
        <member name="T:Nohros.IPointer">
            <summary>
            Logical representation of a pointer, but in fact a byte array reference
            and a position in it. This is used to read logical units (bytes, shorts,
            integers, domain names etc.) from a byte array, keeping the pointer
            updated and positioning to the next record. This type of pointer can be
            considered the logical equivalent of an (unsigned char*) in C++;
            </summary>
        </member>
        <member name="M:Nohros.IPointer.Copy">
            <summary>
            Creates and returns an identical copy of the current permission.
            </summary>
            <returns>A copy of the current pointer.</returns>
        </member>
        <member name="M:Nohros.IPointer.GetByte">
            <summary>
            Reads a single byte at the current position, advancing the pointer.
            </summary>
            <returns>the byte at the current position.</returns>
            <remarks>If the current position is the end of the message array, the pointer will not be advanced and
            the last byte will be returned.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.IPointer.GetShort">
            <summary>
            Reads a single short(2 bytes) at the current position, advancing pointer.
            </summary>
            <returns>the short at the current position</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.IPointer.GetInt">
            <summary>
            Reads a single int(4 bytes) from the current position, advancing the pointer.
            </summary>
            <returns>the int at the current position.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.IPointer.GetChar">
            <summary>
            Reads a single byte as a char at the current position, advancing the pointer.
            </summary>
            <returns>the char at the current position.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.IPointer.Peek">
            <summary>
            Reads a single byte at the current pointer, does not advance pointer
            </summary>
            <returns>the byte at the current position.</returns>
        </member>
        <member name="P:Nohros.IPointer.Item(System.Int32)">
             <summary>
             Reads a single byte at the specified position, does not advance the pointer.
             </summary>
             <param name="position"></param>
             <returns>The byte at the specified position.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The specified position is outside the bounds of the underlying message array.</exception>
        </member>
        <member name="P:Nohros.IPointer.Position">
            <summary>
            Gets the current pointer position.
            </summary>
        </member>
        <member name="F:Nohros.Pointer.message_">
            <summary>
            The pointer message.
            </summary>
        </member>
        <member name="F:Nohros.Pointer.length_">
            <summary>
            The message length.
            </summary>
        </member>
        <member name="F:Nohros.Pointer.position_">
            <summary>
            An index within the [message] representing the current pointer position.
            </summary>
        </member>
        <member name="M:Nohros.Pointer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance_ of the Pointer class by using the specified message and position.
            </summary>
            <param name="message">An sequence of bytes that represents/contains the pointer.</param>
            <param name="position">An index within the <paramref name="message"/> the is the begging of the pointer.</param>
        </member>
        <member name="M:Nohros.Pointer.Copy">
            <summary>
            Creates and returns an identical copy of the current pointer object.
            </summary>
            <returns>A copy of the current pointer.</returns>
        </member>
        <member name="M:Nohros.Pointer.op_Addition(Nohros.Pointer,System.Int32)">
            <summary>
            Overloads the + operator to allow advancing the pointer by so many bytes.
            </summary>
            <param name="pointer">the initial pointer.</param>
            <param name="offset">the offset to add to the pointer in bytes.</param>
            <returns>a reference to a new pointer moved forward by offset bytes.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer by <paramref name="offset"/> bytes
            past the related message array bounds.</exception>
        </member>
        <member name="M:Nohros.Pointer.op_Increment(Nohros.Pointer)">
            <summary>
            Overloads the ++ operator to allow pointer increment.
            </summary>
            <param name="pointer">the initial pointer.</param>
            <returns>a reference to a new pointer moved backward by one byte.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer by <paramref name="offset"/> bytes
            past the related message array bounds.</exception>
        </member>
        <member name="M:Nohros.Pointer.op_Subtraction(Nohros.Pointer,System.Int32)">
            <summary>
            Overloads the - operator to allow advancing the pointer by so many bytes.
            </summary>
            <param name="pointer">the initial pointer.</param>
            <param name="offset">the offset to add to the pointer in bytes.</param>
            <returns>a reference to a new pointer moved forward by offset bytes.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer by <paramref name="offset"/> bytes
            past the related message array bounds.</exception>
        </member>
        <member name="M:Nohros.Pointer.op_Decrement(Nohros.Pointer)">
            <summary>
            Overloads the -- operator to allow pointer decrement.
            </summary>
            <param name="pointer">the initial pointer.</param>
            <returns>a reference to a new pointer moved backward by one byte.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Moving the pointer by one byte
            back past the related message array bounds.</exception>
        </member>
        <member name="M:Nohros.Pointer.ToBase64String(Nohros.Pointer)">
            <summary>
            Converts the underlying message to its equivalent System.String representation encoded with base 64 digits.
            </summary>
            <param name="pointer">A <see cref="T:Nohros.Pointer"/>object.</param>
            <returns>The string representation, in base 64, of the underlying message.</returns>
            <remarks>
            The bytes of the underlying message ate taken as a numeric value and converted to a string representation that
            is encoded with base-64 digits.
            <para>
            The base-64 digits in ascending order from zero are the upercase characters "A" to "Z", the lowercase characters
            "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character "=", is used for tailing
            padding.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Pointer.FromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes a Pointer object as base-64 digits, to an
            equivalent Pointer object.
            </summary>
            <param name="s">The string representation of a pointer object to convert.</param>
            <returns>A pointer object that is equivalent to <paramref name="s"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
            <exception cref="T:System.FormatException">The length of <paramref name="s"/>, ignoring white-space characters, is not zero or
            a multiple of 4. -or- The format of <paramref name="s"/> is invalid. <paramref name="s"/> contains a non-base-64 character
            , more than two padding characters, or a non-white space-cheracter among the padding characters.</exception>
            <remarks>
            <paramref name="s"/> is composed of base-64 digits, white-space characters, and trailing padding characters.
            The base-64 digits in ascending order from zero are the upercase characters "A" to "Z", the lowercase characters
            "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".
            <para>
            The white-space character, and their Unicode names and hexadecimal code points, are tab(CHARACTER TABULATION, U+0009),
            newline(LINE FEED, U+000A), carriage return(CARRIAGE RETURN, U+000D), and blank(SPACE, U+0020). An arbitrary number
            of white spaces characters can appear in <paramref name="s"/> because all white-space characters are ignored.
            </para>
            <para>
            The valueless character "=", is used for tailing padding. The end of <paramref name="s"/> can consist of zero, one,
            or two padding characters.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Pointer.GetByte">
            <summary>
            Reads a single byte at the current position, advancing the pointer.
            </summary>
            <returns>the byte at the current position.</returns>
            <remarks>If the current position is the end of the message array, the pointer will not be advanced and
            the last byte will be returned.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.Pointer.GetShort">
            <summary>
            Reads a single short(2 bytes) at the current position, advancing pointer.
            </summary>
            <returns>the short at the current position</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.Pointer.GetInt">
            <summary>
            Reads a single int(4 bytes) from the current position, advancing the pointer.
            </summary>
            <returns>the int at the current position.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.Pointer.GetChar">
            <summary>
            Reads a single byte as a char at the current position, advancing the pointer.
            </summary>
            <returns>the char at the current position.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Advancing the pointer past the bounds of the underlying message
            array.</exception>
        </member>
        <member name="M:Nohros.Pointer.Peek">
            <summary>
            Reads a single byte at the current pointer, does not advance pointer
            </summary>
            <returns>the byte at the current position.</returns>
        </member>
        <member name="P:Nohros.Pointer.Item(System.Int32)">
             <summary>
             Reads a single byte at the specified position, does not advance the pointer.
             </summary>
             <param name="position"></param>
             <returns>The byte at the specified position.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The specified position is outside the bounds of the underlying message array.</exception>
        </member>
        <member name="P:Nohros.Pointer.Position">
            <summary>
            Gets the current pointer position.
            </summary>
        </member>
        <member name="P:Nohros.Pointer.Message">
            <summary>
            Gets the underlying message as a byte array.
            </summary>
        </member>
        <member name="T:Nohros.Data.JSONReader">
            <summary>
            A JSON parser. Converts strings of JSON into a
            http://www.w3.org/TR/2001/CR-css3-selectors-20011113/
            
            Known limitations/derivations from the RFC:
            - Only knows how to parse ints within the range of signed 32 bits int and
              decimal numbers within double.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.json_">
            <summary>
            The input string.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.json_pos_">
            <summary>
            Thecurrent position in the input string.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.json_length_">
            <summary>
            The length of the input string.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.allow_trailing_comma_">
            <summary>
            A parser flag that allows trailing comma in objects and arrays.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.stack_depth_">
            <summary>
            Used to keep track of how many trailing commas in objects and arrays.
            </summary>
        </member>
        <member name="M:Nohros.Data.JSONReader.ReadInt(Nohros.Data.JSONReader.Token,System.Boolean)">
            <summary>
            A helper method for ParseNumberToken. It reads an int from the end of the
            token. The method returns false if there is no valid integer at the end of
            the token.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Data.JSONReader.JsonToValue(System.String,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Nohros.Data.JSONReader.BuildValue(System.Boolean)" -->
        <member name="M:Nohros.Data.JSONReader.ParseNumberToken">
            <summary>
            Parses a sequence of characters into a Token.TokenType.NUMBER. If the sequence of
            characters is not a valid number, returns a Token.TokenType.INVALID_TOKEN. Note
            that the string will not be converted to a number.
            </summary>
        </member>
        <member name="M:Nohros.Data.JSONReader.DecodeNumber(Nohros.Data.JSONReader.Token)">
            <summary>
            Try and convert a substring that token holds into their an int or a double.
            </summary>
            <param name="token">A token that holds the substring to be converted.</param>
            <returns>A Value object containing the converted number if the substring that token holds was
            converted successfully.</returns>
        </member>
        <member name="M:Nohros.Data.JSONReader.ParseStringToken">
            <summary>
            Parses a sequence of characters into a <see cref="F:Nohros.Data.JSONReader.Token.TokenType.STRING"/>. If the
            sequence of characters is not a valid string, returns a <see cref="!:Token.TokenType::INVALID_TOKEN"/>.
            </summary>
            <returns>A Token of the type <see cref="F:Nohros.Data.JSONReader.Token.TokenType.STRING"/> containing the parsed
            seuence of characters.</returns>
        </member>
        <member name="M:Nohros.Data.JSONReader.DecodeString(Nohros.Data.JSONReader.Token)">
            <summary>
            Converts the substring that token holds into a <see cref="T:Nohros.Value"/> string.
            This should always succeed( otherwise ParseStringToken() would have failed ).
            </summary>
            <param name="token">The token that holds the substring to convert.</param>
            <returns>The converted <see cref="T:Nohros.Value"/> string.</returns>
        </member>
        <member name="M:Nohros.Data.JSONReader.ParseToken">
            <summary>
            Grabs the next token in the json stream. This does not increment the
            stream so it can be used to look ahead at the next token.
            </summary>
            <returns>A token class containing information about the next token in
            the json stream</returns>
        </member>
        <member name="M:Nohros.Data.JSONReader.NextStringMatch(System.String)">
            <summary>
            Checks if a given string matches the string beginning at the |json_pos_|
            position.
            </summary>
            <param name="str">The string to match</param>
            <returns>true if the given string matches the string beginning at the
            |json_pos_| position; otherwise false.</returns>
        </member>
        <member name="M:Nohros.Data.JSONReader.EatWhitespacesAndComments">
            <summary>
            Increments |json_pos_| past leading whitespaces and comments.
            </summary>
        </member>
        <member name="M:Nohros.Data.JSONReader.EatComment">
            <summary>
            Eat comments.
            </summary>
            <returns>true if |json_pos_| is at the start of a commet; otherwise false</returns>
        </member>
        <member name="T:Nohros.Data.JSONReader.Token">
            <summary>
            A structure to hold a JSON token.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.Token.type">
            <summary>
            The token type.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.Token.begin">
            <summary>
            A index into JSONReader::json_pos_ that's the beginning of this token.
            </summary>
        </member>
        <member name="F:Nohros.Data.JSONReader.Token.length">
            <summary>
            The number of characters the token have.
            </summary>
        </member>
        <member name="M:Nohros.Data.JSONReader.Token.#ctor(Nohros.Data.JSONReader.Token.TokenType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance_ of the Token class by using the specified
            token type and length.
            </summary>
            <param name="t">The type of the token</param>
            <param name="b">The beginning position of the the token.</param>
            <param name="len">The length of the token</param>
        </member>
        <member name="T:Nohros.Collections.IInOrderVisitable`1">
            <summary>
            Defines methods and properties that allows a
            <see cref="T:Nohros.Collections.IVisitor`1"/> to visit, in order, every element contained
            within the structure. This interface is similar to the
            <see cref="T:Nohros.Collections.IVisitable`1"/> interface, but the <see cref="M:Nohros.Collections.IInOrderVisitable`1.Accept(Nohros.Collections.InOrderVisitor{`0},System.Object,System.Boolean)"/>
            expects a <see cref="T:Nohros.Collections.InOrderVisitor`1"/> insted of a
            <see cref="T:Nohros.Collections.IVisitor`1"/> method. It is useful for classes that could be
            traversed in different orders(PreOrder, PostOrder, InOrder, ...)
            </summary>
        </member>
        <member name="M:Nohros.Collections.IInOrderVisitable`1.Accept(Nohros.Collections.InOrderVisitor{`0},System.Object,System.Boolean)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">
            The visitor to accepts.
            </param>
            <param name="reverse_order">
            A value indicating if the elements will be visit in the reverse order
            or not.
            </param>
            <param name="state">
            A user-defined object that qualifies or contains information about the
            visitor's current state.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="T:Nohros.Collections.IInOrderVisitable`2">
            <summary>
            Defines methods and properties that allows a
            <see cref="T:Nohros.Collections.IVisitor`2"/> to visit, in order, every element contained
            within the structure. This interface is similar to the
            <see cref="T:Nohros.Collections.IVisitable`2"/> interface, but the <see cref="M:Nohros.Collections.IInOrderVisitable`2.Accept(Nohros.Collections.InOrderVisitor{`0,`1},System.Object,System.Boolean)"/>
            expects a <see cref="T:Nohros.Collections.InOrderVisitor`2"/> insted of a
            <see cref="T:Nohros.Collections.IVisitor`2"/> method  It is useful for classes that
            could be traversed in different orders(PreOrder, PostOrder, InOrder, ...)
            </summary>
        </member>
        <member name="M:Nohros.Collections.IInOrderVisitable`2.Accept(Nohros.Collections.InOrderVisitor{`0,`1},System.Object,System.Boolean)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">
            The visitor to accepts.
            </param>
            <param name="reverse_order">
            A value indicating if the elements will be visit in the reverse order
            or not.
            </param>
            <param name="state">
            A user-defined object that qualifies or contains information about the
            visitor's current state.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="T:Nohros.Data.Providers.IConnectionProviderFactory">
            <summary>
            A factory used to create instances of the
            <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.Providers.IConnectionProviderFactory.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> class
            by using the configured provider options.
            </summary>
            <param name="options">
            A collection of name value pairs representing the options configured
            for a specific provider.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> object.
            </returns>
            <exception cref="T:Nohros.ProviderException">
            An instance of the required provider could not be created. If a
            exception is raised dureing the provider instantiation, it should be
            wrapped in a <see cref="T:Nohros.ProviderException"/>.
            </exception>
        </member>
        <member name="T:Nohros.Caching.Providers.ICacheProvider">
            <summary>
            The purpose of the <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> is to allow users to
            choose from one to multiple implementations of a cache engine in the
            application configuration, making the cache pluggable.
            </summary>
            <remarks>
            <para>
            Implementations of this interface are expected to the thread-safe, and
            can be safely accessed by multiple concurrent threads.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Get``1(System.String)">
            <summary>
            Gets the value associated with the given key.
            </summary>
            <param name="key">
            The identifier for the item to retrieve from cache.
            </param>
            <returns>
            A value associated with the given key, ou the default value for
            <typeparamref name="T"/> if the key was not found.
            </returns>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Get``1(System.String,``0@)">
            <summary>
            Gets the value associated with the given key.
            </summary>
            <param name="key">
            The identifier for the item to retrieve from cache.
            </param>
            <param name="item">
            If a item associated with <paramref name="key"/> exists in the cache,
            the associated item; otherwise, the default value for
            <typeparamref name="T"/>
            </param>
            <returns>
            <c>true</c> if the key is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Set(System.String,System.Object)">
            <summary>
            Adds or replace the specified item to the cache.
            </summary>
            <param name="key">
            The cache key used to reference the item.
            </param>
            <param name="value">
            The item to be added to the cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> or <paramref name="value"/> are <c>null</c>.
            </exception>
            <remarks>
            The item added to the cache should never expires(although it may be
            deleted from the cache to make place or other items, depending on the
            cache provider implementation).
            </remarks>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Set(System.String,System.Object,System.Int64,Nohros.TimeUnit)">
            <summary>
            Adds or replace the specified item to the cache with expiration policy.
            </summary>
            <param name="key">
            The cache key used to reference the item.
            </param>
            <param name="value">
            The item to be added to the cache.
            </param>
            <param name="duration">
            The length of time time at which the added object expires from a point
            in time(after access or after write, depending on the cache provider
            configuration and implementation) and is removed from the cache. If
            it's is zero, the item should never expires(although it may be deleted
            from the cache to make place or other items, depending on the cache
            provider implementation).
            </param>
            <param name="unit">
            The unit that <paramref name="duration"/> is expressed in.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="key"/> or <paramref name="value"/> parameter is
            set to <c>null.</c>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            You set the <paramref name="duration"/> to a value that is less than
            zero.
            </exception>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Add(System.String,System.Object)">
            <summary>
            Adds the specified item to the cache.
            </summary>
            <param name="key">
            The cache key used to reference the item.
            </param>
            <param name="value">
            The item to be added to the cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="key"/> or <paramref name="value"/> parameter is set
            to <c>null.</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            An item with the key <paramref name="key"/> already exists in cache.
            </exception>
            <remarks>
            Calls to this method should throws a exception if an item with the same
            <paramref name="key"/> parameter is already stored in the cache. To
            overwrite an existing cache item using the same <paramref name="key"/>
            parameter, use the <see cref="M:Nohros.Caching.Providers.ICacheProvider.Set(System.String,System.Object)"/> method.
            <para>
            The item added to the cache should never expires(although it may be
            deleted from the cache to make place or other items, depending on the
            cache provider implementation).
            </para>
            </remarks>
            <seealso cref="M:Nohros.Caching.Providers.ICacheProvider.Set(System.String,System.Object)"/>
            <seealso cref="M:Nohros.Caching.Providers.ICacheProvider.Add(System.String,System.Object)"/>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Add(System.String,System.Object,System.Int64,Nohros.TimeUnit)">
            <summary>
            Adds the specified item to the cache with expiration policy.
            </summary>
            <param name="key">
            The cache key used to reference the item.
            </param>
            <param name="value">
            The item to be added to the cache.
            </param>
            <param name="duration">
            The length of time time at which the added object expires from a point
            in time(after access or after write, depending on the cache provider
            configuration and implementation) and is removed from the cache. If
            it's is zero, the item should never expires(although it may be deleted
            from the cache to make place or other items, depending on the cache
            provider implementation).
            </param>
            <param name="unit">
            The unit that <paramref name="duration"/> is expressed in.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="key"/> or <paramref name="value"/> parameter is
            set to <c>null.</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            An item with the key <paramref name="key"/> already exists in the
            cache.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            You set the <paramref name="duration"/> to a value that is less than
            zero.
            </exception>
            <remarks>
            Calls to this method should throws a exception if an item with the same
            <paramref name="key"/> parameter is already stored in the cache. To
            overwrite an existing cache item using the same <paramref name="key"/>
            parameter, use the <see cref="M:Nohros.Caching.Providers.ICacheProvider.Set(System.String,System.Object,System.Int64,Nohros.TimeUnit)"/>
            method.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Remove(System.String)">
            <summary>
            Discards any cached value for key <paramref name="key"/>, so that a
            future invocation of <see cref="!:Get(T)"/> will result in a cache miss
            and reload.
            </summary>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProvider.Clear">
            <summary>
            Discards all entries in the cache.
            </summary>
            <remarks>
            If the cache does not implement this method it shold not throw any
            exception, it should just fail silently.
            </remarks>
        </member>
        <member name="T:Nohros.Configuration.ProviderOptions">
            <summary>
            A utility class for manage provider options.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptions.CheckIfExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            Checks if the specified options keys exists in the options dictionary.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to check for key existence.
            </param>
            <param name="keys">
            THe options keys to check for existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is a null reference.
            </exception>
            <returns>
            <c>true</c> if all the specified keys exists in the given 
            <paramref name="options"/> dictionary; otherwise, <c>false</c>. If no
            keys is specified this method returns <c>true</c>.
            </returns>
            <remarks>
            This method checks for existence for each specified key and if one
            of them does not exists returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptions.GetIfExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            Checks if the specified options keys exists in the options dictionary
            and return its values.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to search for keys.
            </param>
            <param name="keys">
            The options keys to check for existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> or <paramref name="keys"/> is a null
            reference.
            </exception>
            <returns>
            An array of string containing the values for the specified option keys.
            If no keys is specified this method returns an empty array.
            </returns>
            <remarks>
            This method checks the existence of each specified key and if one
            of them does not exists returns an empty string array.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptions.GetIfExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Checks if the specified option key exists in the options dictionary
            and return its values.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to search for
            <paramref name="key"/>.
            </param>
            <param name="key">
            The option key to check for existence.
            </param>
            <param name="def_value">
            The value to be returned if the <paramref name="key"/> is not found.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> or <paramref name="key"/> is a null
            reference.
            </exception>
            <returns>
            A string containing the value for the specified option key.
            </returns>
            <remarks>
            This method checks the existence of each specified key and if it
            is not found returns <paramref name="def_value"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptions.ThrowIfNotExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            Checks if the specified options keys exists in the options dictionary
            and return its values.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to check for key existence.
            </param>
            <param name="keys">
            The options keys to check for existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> or <paramref name="keys"/> are <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A given key does not exist in the specified <paramref name="options"/>
            dictionaty.
            </exception>
            <returns>
            An array of string containing the values for the specified option keys.
            </returns>
            <remarks>
            This method checks the existence of each specified key and if one
            of them does not exists throws an <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            <para>
            If no keys is specified this method returns an empty array.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptions.TryGetInteger(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Gets the value associated with the key <paramref name="key"/> and
            try to convert the value to its 32-bit signed integer equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default_value">
            A 32-bit integer that will be returned when the key
            <paramref name="key"/> was not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default_value"/> if the key was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> or <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Nohros.Configuration.ProviderOptions.TryGetBoolean(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Gets the value associated with the key <paramref name="key"/> and
            try to convert the value to its 32-bit signed integer equivalent.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from.
            </param>
            <param name="key">
            The key that is associated with the value to get.
            </param>
            <param name="default_value">
            A 32-bit integer that will be returned when the key
            <paramref name="key"/> was not found.
            </param>
            <returns>
            The value associated with the key <paramref name="key"/> or
            <paramref name="default_value"/> if the key was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> or <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="T:Nohros.CallableDelegate`1">
            <summary>
            A task that returns a result and may throw an exception.
            </summary>
            <remarks>
            A <see cref="T:Nohros.CallableDelegate`1"/> computes a result, or throws an
            exception if unable to do so.
            </remarks>
            <typeparam name="T">
            The type of the returning object.
            </typeparam>
            <returns>
            The computed result.
            </returns>
            <exception cref="T:System.Exception">
            If unable to compute a result.
            </exception>
        </member>
        <member name="T:Nohros.Data.Providers.ITransactionContextFactory">
            <summary>
            A factory that create instances of the <see cref="T:Nohros.Data.Providers.ITransactionContext"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.Data.Providers.ITransactionContextFactory.CreateTransactionContext">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.Data.Providers.ITransactionContext"/> object.
            </summary>
            <returns>
            The newly created <see cref="T:Nohros.Data.Providers.ITransactionContext"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Data.DataParameters">
            <summary>
            Provides facilities methods for create data parameters.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataParameters.CreateParameter(System.Data.IDbCommand,System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.IDbDataParameter"/> class
            that uses the parameter name and the data type.
            </summary>
            <param name="command">
            The <see cref="T:System.Data.IDbCommand"/> object to which the created parameter
            should be associated.
            </param>
            <param name="parameter_name">
            The name of the parameter to map.
            </param>
            <param name="db_type">
            One of the <see cref="T:System.Data.DbType"/> values that best represents the value
            of the parameter.
            </param>
            <returns>
            A instance of the <see cref="T:System.Data.IDbDataParameter"/> class associated with
            the given <see cref="T:System.Data.IDbCommand"/> object.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataParameters.CreateParameter(System.Data.IDbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.IDbDataParameter"/> class
            that uses the parameter name and the data type.
            </summary>
            <param name="command">
            The <see cref="T:System.Data.IDbCommand"/> object to which the created parameter
            should be associated.
            </param>
            <param name="parameter_name">
            The name of the parameter to map.
            </param>
            <param name="db_type">
            One of the <see cref="T:System.Data.DbType"/> values that best represents the value
            of the parameter.
            </param>
            <param name="size">
            The length of the parameter.
            </param>
            <returns>
            A instance of the <see cref="T:System.Data.IDbDataParameter"/> class associated with
            the given <see cref="T:System.Data.IDbCommand"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Data.DataFieldInteger">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Int32"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldInteger.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldInteger"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldInteger.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Int32"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Int32"/> at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldInteger.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldInteger"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldInteger.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Int32"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Extensions.Configurations">
            <summary>
            Extension methods for <see cref="T:Nohros.Configuration.IConfiguration"/> classes.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProvider``2(Nohros.Configuration.IConfiguration,System.String,System.Func{``0,System.Collections.Generic.IDictionary{System.String,System.String},``1})">
            <summary>
            Creates an instance of the <see cref="!:TResult"/> class using the
            information contained in the provider node named
            <see cref="!:node_name"/>.
            </summary>
            <typeparam name="TFactory">
            The type of the factory class that is used to create instances of the
            <see cref="!:TResult"/> class.
            </typeparam>
            <typeparam name="TResult">
            The type of the class that should be created.
            </typeparam>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> class contained the list of configured
            providers.
            </param>
            <param name="node_name">
            The name of the provider node that contains the information about the
            provider to be created.
            </param>
            <param name="instantiator">
            A <see cref="T:System.Func`3"/> delegate that can be
            used to create an instance of the <see cref="!:TResult"/> class.
            </param>
            <returns>
            The <see cref="!:TFactory"/> class is created by either, using a
            constructor that accepts a <see cref="T:Nohros.Configuration.IConfiguration"/> object or a
            constructor that receives no parameters.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders(Nohros.Configuration.IConfiguration,System.Action{System.Object})">
            <summary>
            Creates an instance of all configured providers that implements the
            the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a constructor
            that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <param name="callback">
            A <see cref="T:System.Action`1"/> method that will be called for every
            provider that is sucessfully created.
            </param>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders(Nohros.Configuration.IConfiguration)">
            <summary>
            Creates an instance of all configured providers that has a factory
            that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a
            constructor that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <returns>
            A array containing all providers that was created using the configured
            factories that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> interface.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders(Nohros.Configuration.IConfiguration,System.Func{Nohros.Configuration.IProvidersNodeGroup,System.Boolean})">
            <summary>
            Creates an instance of all configured providers that has a factory
            that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a
            constructor that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <param name="predicate">
            A <see cref="T:System.Func`1"/> that is used to evaluate if we need to
            create instances of the providers associated with a given providers
            group node.
            </param>
            <returns>
            A array containing all providers that was created using the configured
            factories that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> interface.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders(Nohros.Configuration.IConfiguration,System.Func{Nohros.Configuration.IProvidersNodeGroup,Nohros.Configuration.IProviderNode,System.Boolean})">
            <summary>
            Creates an instance of all configured providers that has a factory
            that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a
            constructor that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="predicate">
            A <see cref="T:System.Func`1"/> that is used to evaluate if we need to
            create a instance of the given provider node.
            </param>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <returns>
            A array containing all providers that was created using the configured
            factories that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> interface.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders``2(Nohros.Configuration.IConfiguration,System.Func{``0,System.Collections.Generic.IDictionary{System.String,System.String},``1})">
            <summary>
            Creates an instance of all configured providers that has a factory
            that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a
            constructor that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <returns>
            A array containing all providers that was created using the configured
            factories that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> interface.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders``2(Nohros.Configuration.IConfiguration,System.Func{Nohros.Configuration.IProvidersNodeGroup,System.Boolean},System.Func{``0,System.Collections.Generic.IDictionary{System.String,System.String},``1})">
            <summary>
            Creates an instance of all configured providers that has a factory
            that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a
            constructor that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <param name="predicate">
            A <see cref="T:System.Func`1"/> that is used to evaluate if we need to
            create instances of the providers associated with a given providers
            group node.
            </param>
            <returns>
            A array containing all providers that was created using the configured
            factories that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> interface.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Configurations.CreateProviders``2(Nohros.Configuration.IConfiguration,System.Func{Nohros.Configuration.IProvidersNodeGroup,Nohros.Configuration.IProviderNode,System.Boolean},System.Func{``0,System.Collections.Generic.IDictionary{System.String,System.String},``1})">
            <summary>
            Creates an instance of all configured providers that has a factory
            that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> intrface and has a
            constructor that accepts no parameters or a single parameter of the type
            <see cref="T:Nohros.Configuration.IConfiguration"/>.
            </summary>
            <param name="predicate">
            A <see cref="T:System.Func`1"/> that is used to evaluate if we need to
            create a instance of the given provider node.
            </param>
            <param name="settings">
            A <see cref="T:Nohros.Configuration.IConfiguration"/> containing the configured providers.
            </param>
            <returns>
            A array containing all providers that was created using the configured
            factories that implements the <see cref="T:Nohros.Providers.IProviderFactory"/> interface.
            </returns>
        </member>
        <member name="T:Nohros.ConstraintViolationException">
            <summary>
            Exception thrown when an action would violate a constraint on repostiory
            structure. For example, when an attempt is made to persistently add an
            item to a repository that would violate that repository's constraint.
            </summary>
        </member>
        <member name="M:Nohros.ConstraintViolationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.ConstraintViolationException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.ConstraintViolationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.ConstraintViolationException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ConstraintViolationException"/>was throw</param>
        </member>
        <member name="M:Nohros.ConstraintViolationException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.ConstraintViolationException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this
            <see cref="T:Nohros.ConstraintViolationException"/> to be throw.
            </param>
        </member>
        <member name="M:Nohros.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the
            <see cref="T:Nohros.ConstraintViolationException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.ConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Nohros.ConstraintViolationException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ConstraintViolationException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.ConstraintViolationException"/>to be throw.</param>
        </member>
        <member name="T:Nohros.ComparisonOperatorExtensions">
            <summary>
            Extension method for <see cref="T:Nohros.ComparisonOperator"/> enum.
            </summary>
        </member>
        <member name="M:Nohros.ComparisonOperatorExtensions.Symbol(Nohros.ComparisonOperator)">
            <summary>
            Gets the symbol of a <see cref="T:Nohros.ComparisonOperator"/>.
            </summary>
            <param name="op">
            The <see cref="T:Nohros.ComparisonOperator"/> to get the symbol.
            </param>
            <returns>
            The symbol of a <see cref="T:Nohros.ComparisonOperator"/>.
            </returns>
        </member>
        <member name="T:Nohros.ComparisonOperator">
            <summary>
            Describes the operation that should be performed.
            </summary>
        </member>
        <member name="F:Nohros.ComparisonOperator.Equals">
            <summary>
            A equals comparison, such as (a == b)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Nohros.ComparisonOperator.LessThan" -->
        <member name="F:Nohros.ComparisonOperator.GreaterThan">
            <summary>
            A greater than comparison, such as (a > b)
            </summary>
        </member>
        <member name="T:Nohros.Data.ConstStringMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.String"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.ConstStringMapType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.ConstStringMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Data.CommandBuilder">
            <summary>
            A helper class used to simplify the instantiantion of objects of the type
            <see cref="T:System.Data.IDbCommand"/>.
            </summary>
            <remarks>
            The command object is created at constructor and its properties
            manipulated through this class methods. Calling any of the class
            methods will change the properties of the returned object, even after
            <see cref="M:Nohros.Data.CommandBuilder.Build"/> is called.
            <para>
            This class implements the <see cref="T:System.IDisposable"/> only to allow
            callers to dispose the associated <see cref="T:System.Data.IDbCommand"/> object. Do not
            dispose <see cref="T:Nohros.Data.CommandBuilder"/> object if you want to reuse the
            associated <see cref="T:System.Data.IDbCommand"/> after class destruction.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.#ctor(System.Data.IDbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.CommandBuilder"/> class
            by using the specified <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection">
            A <see cref="T:System.Data.IDbConnection"/> object that should be associated with
            the builded command.
            </param>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.#ctor(System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.CommandBuilder"/> class
            by using the specified <see cref="T:System.Data.IDbCommand"/>.
            </summary>
            <param name="command">
            A <see cref="T:System.Data.IDbCommand"/> object that will be used to persist the
            operations performed by the builder.
            </param>
            <remarks>
            The <paramref name="command"/> object will be modified only in response
            to a the execution of a method of the <see cref="T:Nohros.Data.CommandBuilder"/>.
            For exemple, if the <see cref="P:System.Data.IDbCommand.CommandText"/> property of
            the <paramref name="command"/> is already set and the
            <see cref="M:Nohros.Data.CommandBuilder.SetText(System.String)"/> method is not executed, the
            <see cref="P:System.Data.IDbCommand.CommandText"/> will be not modified.
            </remarks>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.Dispose">
            <summary>
            Disposes the associated command object.
            </summary>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.SetText(System.String)">
            <summary>
            Sets the command text.
            </summary>
            <param name="text">
            The command text.
            </param>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.SetType(System.Data.CommandType)">
            <summary>
            Sets the command type.
            </summary>
            <param name="type">
            The command type.
            </param>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.SetTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeout">
            The command timeout.
            </param>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.SetTransaction(System.Data.IDbTransaction)">
            <summary>
            Sets the associated transaction.
            </summary>
            <param name="transaction">
            The trasaction to associate with the command to built.
            </param>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.Set(System.Action{Nohros.Data.CommandBuilder})">
            <summary>
            Executes the given <see cref="T:System.Action`1"/> in the context of the
            current <see cref="T:Nohros.Data.CommandBuilder"/>
            </summary>
            <param name="action">
            The method to be executed.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Data.DbType)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameterWithValue(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="value">
            The value of the parameter to add.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="size">
            The size of the parameter.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="size">
            The size of the parameter.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Data.DbType,System.Data.IDbDataParameter@)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Object,System.Data.IDbDataParameter@)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="value">
            The value of the parameter to add.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.IDbDataParameter@)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="size">
            The size of the parameter.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.IDbDataParameter@)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="size">
            The size of the parameter.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.String,System.Object,System.Data.DbType,System.Data.IDbDataParameter@)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            created parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.AddParameter(System.Data.IDbDataParameter)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="parameter">
            The parameter to be added.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Data.CommandBuilder"/> that will add the
            specified parameter to the <see cref="T:System.Data.IDbCommand"/> instance that will
            be created on <see cref="M:Nohros.Data.CommandBuilder.Build"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.CreateParameter(System.String,System.Data.DbType)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <returns>
            The newly created <see cref="T:System.Data.IDbDataParameter"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.CreateParameterWithValue(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            The newly created <see cref="T:System.Data.IDbDataParameter"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.CreateParameter(System.String)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <returns>
            The newly created <see cref="T:System.Data.IDbDataParameter"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.CreateParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="size">
            The size of the parameter.
            </param>
            <returns>
            The newly created <see cref="T:System.Data.IDbDataParameter"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="size">
            The size of the parameter.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            The newly created <see cref="T:System.Data.IDbDataParameter"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> object and add it to the
            collection of parameters of the <see cref="T:System.Data.IDbCommand"/> that will
            be built.
            </summary>
            <param name="name">
            The name of the parameter to add.
            </param>
            <param name="type">
            The type of the parameter to add.
            </param>
            <param name="value">
            The value to be associated with the parameter.
            </param>
            <returns>
            The newly created <see cref="T:System.Data.IDbDataParameter"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.CommandBuilder.Build">
            <summary>
            Creates an instance of the <see cref="T:System.Data.IDbCommand"/> using the values
            configured through this builder.
            </summary>
            <returns>
            The newly created <see cref="T:System.Data.IDbCommand"/> object.
            </returns>
            <remarks>
            The command object is created at constructor and its properties
            manipulated through this class methods. Calling any of the class
            methods will change the properties of the returned object, even after
            <see cref="M:Nohros.Data.CommandBuilder.Build"/> is called.
            </remarks>
        </member>
        <member name="T:Nohros.Configuration.ConfigProperty">
            <summary>
            An extension class for parsing configuration values to .NET types.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ConfigProperty.CastTo``1(System.Object)">
            <summary>
            Cast the <paramref name="value"/> to the type <typeparamref name="T"/>
            without throwing exceptions.
            </summary>
            <typeparam name="T">
            The type to cast to.
            </typeparam>
            <param name="value">
            The value to cast.
            </param>
            <returns>
            The <paramref name="value"/> casted to the type <typeparamref name="T"/>
            or the default value for <typeparamref name="T"/> if the cast fails.
            </returns>
        </member>
        <member name="T:Nohros.Configuration.ProvidersNodeGroup">
            <summary>
            A simple implementation of the <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/> class.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.IProvidersNodeGroup">
            <summary>
            A set of <see cref="T:Nohros.Configuration.IProviderNode"/> that belongs to the same group
            </summary>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNodeGroup.GetProviderNode(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> node whose name is
            <paramref name="name"/> and is associated with the
            default group.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.IProviderNode"/> object whose name is
            <paramref name="name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A simple provider whose name is <param name="name"> was
            not found.
            </param>
            </exception>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNodeGroup.GetProviderNode(System.String,Nohros.Configuration.IProviderNode@)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> whose name is
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <param name="provider">
            When this method returns contains a <see cref="T:Nohros.Configuration.IProviderNode"/>
            object whose name is <paramref name="name"/>.
            </param>
            <returns>
            <c>true</c> when a provider whose name is
            <paramref name="name"/> is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNodeGroup.GetProvidersNode(System.String)">
            <summary>
            Gets an array of <see cref="T:Nohros.Configuration.IProviderNode"/> containing all the
            providers that belongs to the grou <paramref name="group"/>
            </summary>
            <param name="group">
            The name of the group associated with the providers.
            </param>
            <returns>
            An array of <see cref="T:Nohros.Configuration.IProviderNode"/> containing all the providers
            associated with the group <paramref name="group"/>.
            </returns>
            <remarks>
            If there are no providers associated with the group
            <paramref name="group"/> this method will returns an empty array.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNodeGroup.Add(Nohros.Configuration.IProviderNode)">
            <summary>
            Adds an <see cref="T:Nohros.Configuration.IProviderNode"/> to the
            <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/> collection.
            </summary>
            <param name="node">
            The <see cref="T:Nohros.Configuration.IProviderNode"/> to add.
            </param>
            <remarks>
            The name of the node will be used as a node key and it should be
            the node's uniquely identifier.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.IProvidersNodeGroup.Add(System.String,Nohros.Configuration.IProviderNode)">
            <summary>
            Adds an <see cref="T:Nohros.Configuration.IProviderNode"/> to the
            <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/> collection using the given provider
            name.
            </summary>
            <param name="name">
            The name to use to identify the provider node.
            </param>
            <param name="node">
            The <see cref="T:Nohros.Configuration.IProviderNode"/> to add.
            </param>
            <remarks>
            The name of the node will be used as a node key and it should be
            the node's uniquely identifier.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IProvidersNodeGroup.Item(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.Configuration.IProviderNode"/> node whose name is
            <paramref name="name"/> and is associated with the
            default group.
            </summary>
            <param name="name">
            The name of the provider.
            </param>
            <returns>
            A <see cref="T:Nohros.Configuration.IProviderNode"/> object whose name is
            <paramref name="name"/>.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            A simple provider whose name is <param name="name"> was
            not found.
            </param>
            </exception>
            <remarks>
            This method is a shortcut for the <see cref="M:Nohros.Configuration.IProvidersNodeGroup.GetProviderNode(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IProvidersNodeGroup.Count">
            <summary>
            Gets the number of elements that the <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/>
            contain.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/>
            that is not associated with any group.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.IProvidersNodeGroup"/>
            class that contains providers associated with a group whose name is
            <paramref name="group"/>.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.Add(Nohros.Configuration.IProviderNode)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.Add(System.String,Nohros.Configuration.IProviderNode)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.GetProviderNode(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.GetProviderNode(System.String,Nohros.Configuration.IProviderNode@)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.GetProvidersNode(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Configuration.ProvidersNodeGroup.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Configuration.ProvidersNodeGroup.Nohros#Configuration#IProvidersNodeGroup#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.MessageQueue.IMessage">
            <summary>
            Defines the concept of a message. That is an object that communicate
            information between two entities.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonTable">
            <summary>
            Used to transfer a collection of strings between application subsystems.
            Recommended for collections that typically contains 10 columns or less.
            </summary>
            <remarks>
            This class is recommendend for collections that contains 10 columns or
            less and should not be used for large numbers of columns if performance
            is important factor.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonTable"/> class that
            is empty and has no columns.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonTable.#ctor(System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.Data.Json.JsonTable"/> class
            that has no values and contains the specified columns.
            </summary>
            <param name="columns">
            An array of strings containing the name of the columns.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="columns"/> is a <c>null</c> reference
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="columns"/> or contains a elements that is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Data.Json.JsonTable.Nohros#Data#Json#IJsonCollection#Add(Nohros.Data.Json.IJsonToken)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="token"/> is not an instance of the class
            <see cref="T:Nohros.Data.Json.JsonArray"/>.
            </exception>
        </member>
        <member name="M:Nohros.Data.Json.JsonTable.AsJson">
            <summary>
            Gets a string of characters representing the underlying
            class and formatted like a json array.
            </summary>
            <returns>
            A string representation of the <see cref="T:Nohros.Data.Json.JsonTable"/> class
            that represents a json array.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonTable.Add(Nohros.Data.Json.JsonArray)">
            <summary>
            Adds an <see cref="T:Nohros.Data.Json.IJsonToken"/> to the
            <seealso cref="T:Nohros.Data.Json.IJsonCollection"/>.
            </summary>
            <param name="array">
            The <seealso cref="T:Nohros.Data.Json.IJsonToken"/> object to be added to the
            <see cref="T:Nohros.Data.Json.IJsonToken"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The length of the array <paramref name="array"/> is not equals to
            the number of columns.
            </exception>
        </member>
        <member name="P:Nohros.Data.Json.JsonTable.Count">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.IValidator">
            <summary>
            Defines properties_ and methods that objects that must be validate before it usage
            should implement.
            </summary>
        </member>
        <member name="M:Nohros.Data.IValidator.Validate">
            <summary>
            Evaluates the condition it checks and updates the IsValid property.
            </summary>
        </member>
        <member name="P:Nohros.Data.IValidator.ErrorMessage">
            <summary>
            Gets or sets the error message text generated when the condition beign validated fails.
            </summary>
            <returns>The error message to generate</returns>
        </member>
        <member name="P:Nohros.Data.IValidator.IsValid">
            <summary>
            Gets or sets a value indicating whether the object passes validation
            </summary>
            <returns>true if the object is valid; otherwise, false</returns>
        </member>
        <member name="T:Nohros.Data.Providers.TransactionContext">
            <summary>
            An simPle implementation of the <see cref="T:Nohros.Data.Providers.ITransactionContext"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.Providers.TransactionContext.#ctor(System.Data.IDbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Providers.TransactionContext"/>
            using the specified <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Nohros.Data.Providers.TransactionContext.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Providers.TransactionContext.Enlist(Nohros.Data.Providers.PrepareCommandDelegate,Nohros.Data.Providers.ExecuteCommandDelegate)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Providers.TransactionContext.CreateCommand">
            <summary>
            Creates a command that is related with the same connection that is
            associated with the <see cref="T:Nohros.Data.Providers.ITransactionContext"/>.
            </summary>
            <remarks>
            A <see cref="T:System.Data.IDbCommand"/> that associated with the
            <see cref="T:Nohros.Data.Providers.ITransactionContext"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Providers.TransactionContext.Enlist(System.Data.IDbCommand)">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Data.Providers.TransactionContext.Connection">
            <summary>
            Gets the <see cref="T:System.Data.IDbConnection"/> object tha is associated with the
            <see cref="T:Nohros.Data.Providers.ITransactionContext"/>.
            </summary>
        </member>
        <member name="T:Nohros.Data.Providers.IConnectionProvider">
            <summary>
            Provides an interface for getting connection to a data store.
            </summary>
        </member>
        <member name="M:Nohros.Data.Providers.IConnectionProvider.CreateConnection">
            <summary>
            Creates an instance of the <see cref="T:System.Data.IDbConnection"/> class.
            </summary>
            <returns>
            An instance of the <see cref="T:System.Data.IDbConnection"/> object.
            </returns>
        </member>
        <member name="P:Nohros.Data.Providers.IConnectionProvider.Schema">
            <summary>
            Gets an string that represents the database schema related with the
            provider.
            </summary>
            <remarks>
            A database schema is a logical data structure used to organize the
            objects from a database.
            <para>
            If the database schema is not specified this method should returns the
            default database schema.
            </para>
            <para>
            If the provider does not have the concept of schemas this method should
            returns a empty string.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldShort.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldShort"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldShort.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Int16"/> value at the field position.
            </param>
        </member>
        <member name="T:Nohros.Data.IStateDaoFactory">
            <summary>
            A factory for the <see cref="T:Nohros.Data.IStateDao"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.IStateDaoFactory.CreateStateDao(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Data.IStateDao"/> class by using the
            given collection of configured options.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing a collection of
            key/value pairs representing the provider configuration options
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Data.IStateDao"/> object.
            </returns>
        </member>
        <member name="T:Nohros.Data.IntMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Int32"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.IntMapType.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.IntMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Data.HiLoGenerator">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IHiLoGenerator"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.HiLoGenerator.#ctor(Nohros.Data.NextHighDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.HiLoGenerator"/> class
            by using the given next high delegate and max lo value.
            </summary>
            <param name="next_high">
            A <see cref="T:Nohros.CallableDelegate`1"/> that is used to get the next High
            value.
            </param>
        </member>
        <member name="M:Nohros.Data.HiLoGenerator.Generate(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.HiLoGenerator.Generate">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Concurrent.SettableFuture`1">
            <summary>
            A <see cref="T:Nohros.Concurrent.IFuture`1"/> whose result may be set by a <see cref="M:Nohros.Concurrent.SettableFuture`1.Set(`0,System.Boolean)"/>
            or <see cref="M:Nohros.Concurrent.SettableFuture`1.SetException(System.Exception,System.Boolean)"/> call. it may also be cancelled.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.SettableFuture`1.#ctor">
            <summary>
            Creates a new <see cref="T:Nohros.Concurrent.SettableFuture`1"/> in the default state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Concurrent.SettableFuture`1.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Nohros.Concurrent.SettableFuture`1"/> in the default state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Concurrent.SettableFuture`1.Set(`0,System.Boolean)">
            <summary>
            Sets the value of this future.
            </summary>
            <param name="value">The value the future should hold.</param>
            <returns><c>true</c> if the value was successfully set, or
            <c>false</c> if the future has already been set or cancelled.
            </returns>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.SettableFuture`1.SetException(System.Exception,System.Boolean)">
            <summary>
            Sets the future to having failed with the given exception.
            </summary>
            <param name="exception">
            The exception the future should hold.
            </param>
            <returns><c>true</c> if the exception was successfully set, or
            <c>false</c> if the future has already been set or cancelled.
            </returns>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.MailboxReceiveCallback`1">
            <summary>
            Represents a method to be called when a <see cref="T:Nohros.Concurrent.Mailbox`1"/> receives
            a message.
            </summary>
            <typeparam name="T">
            The type of the message.
            </typeparam>
            <param name="message">
            The message that was sent to the <see cref="T:Nohros.Concurrent.Mailbox`1"/>.
            </param>
            <remarks>
            <see cref="T:Nohros.Concurrent.MailboxReceiveCallback`1"/> represents a callback that you
            want to execute when a message is received by a
            <see cref="T:Nohros.Concurrent.Mailbox`1"/>. The delegate is executed for each received
            message respecting the arrival order.
            <para>
            The callback runs in a thread from the thread pool.
            </para>
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.AtomicLong">
            <summary>
            A long value that may be updated atomically.
            </summary>
            <remark>An <see cref="T:Nohros.Concurrent.AtomicLong"/> is used in applications such as
            atomically incremented sequence numbers, and cannot be used as a
            a replacement for a <see cref="!:Long"/>.</remark>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.AtomicLong"/> with the
            specified initial value.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.Add(System.Int64)">
            <summary>
            Adds the specified value to the current value, as an atomic operation.
            </summary>
            <param name="value">The value to be added to the current value.</param>
            <returns>A long that is the result of the sum operation.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.Exchange(System.Int64)">
            <summary>
            Set the current value to a specified value and returns the original
            value, as an atomic operation.
            </summary>
            <param name="value">The value to which the current value is set.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.Increment">
            <summary>
            Atomically increment by one the current value.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.Decrement">
            <summary>
            Atomically decrement by one the current value.
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.CompareExchange(System.Int64,System.Int64)">
            <summary>
            Atomically compare and set the current value to the specified value
            if the current value is equals to the expected value.
            </summary>
            <param name="expect">The expected value.</param>
            <param name="update">The value that replaces the current value if
            the comparison results in equality.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.CompareSet(System.Int64,System.Int64)">
            <summary>
            Atomically compare and set the current value to the specified value
            if the current value is equals to the expected value.
            </summary>
            <param name="expect">
            The expected value.
            </param>
            <param name="update">
            The value that replaces the current value if the comparison results in
            equality.
            </param>
            <returns>
            <c>true</c> if successfull.<c>false</c> indicates that the actual value
            is not equals to the expected value.
            </returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.op_Explicit(System.Int64)~Nohros.Concurrent.AtomicLong">
            <summary>
            Explict Converts the specified <c>long</c> value to an
            <see cref="T:Nohros.Concurrent.AtomicLong"/>.
            </summary>
            <param name="value">The <c>long</c> value to be converted.</param>
            <returns>A new <see cref="T:Nohros.Concurrent.AtomicLong"/> structure whose initial value
            is equals to the specified long.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.op_Explicit(Nohros.Concurrent.AtomicLong)~System.Int64">
            <summary>
            Explict Converts the specified <c>long</c> value to an
            <see cref="T:Nohros.Concurrent.AtomicLong"/>.
            </summary>
            <param name="value">The <c>long</c> value to be converted.</param>
            <returns>A new <see cref="T:Nohros.Concurrent.AtomicLong"/> structure whose initial value
            is equals to the specified long.</returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Nohros.Concurrent.AtomicLong.Equals(Nohros.Concurrent.AtomicLong)">
            <summary>
            Compare the value of <see cref="!:other"/> with the current
            <see cref="T:Nohros.Concurrent.AtomicLong"/> value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Nohros.Concurrent.AtomicLong.Value">
            <summary>
            Gets or sets the current value, as an atomic operation.
            </summary>
        </member>
        <member name="T:Nohros.Logging.NOPLogger">
            <summary>
            No-operation implementation og <see cref="T:Nohros.Logging.ILogger"/> interface.
            </summary>
            <remarks>
            Since this logger does not do anything the Is[...] methods always
            returns null and the level of the logger will be always Off, even if
            the user set it to a diferrent value.
            </remarks>
        </member>
        <member name="M:Nohros.Logging.NOPLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Logging.NOPLogger"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Debug(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Debug(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Error(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Error(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Fatal(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Fatal(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Info(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Info(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Warn(System.String)">
            <inherit />
        </member>
        <member name="M:Nohros.Logging.NOPLogger.Warn(System.String,System.Exception)">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.IsDebugEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.IsErrorEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.IsFatalEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.IsInfoEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.IsWarnEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.IsTraceEnabled">
            <inherit />
        </member>
        <member name="P:Nohros.Logging.NOPLogger.LogLevel">
            <summary>
            Gets or sets the threshold level of the logger repository.
            </summary>
            <remarks>Always return null. Even if a user set it to a
            diferent value.</remarks>
        </member>
        <member name="T:Nohros.Collections.AndersonTree`2">
            <summary>
            An implementation of a Anderson tree.
            </summary>
            <remarks>
            This class is not thread-safe.
            <see cref="!:http://user.it.uu.se/~arnea/ps/gb.pdf"/>
            </remarks>
        </member>
        <member name="F:Nohros.Collections.AndersonTree`2.root_">
            <summary>
            The top of the tree
            </summary>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.#ctor">
            <summary>
            Initializes a new instance_ of the AndersonTree.
            </summary>
            <remarks>The default comparer will be used when comparing
            items.</remarks>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new empty <see cref="T:Nohros.Collections.AndersonTree`2"/>
            class.
            </summary>
            <param name="comparer">
            The comparer to use when comparing items.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Collections.AndersonTree`2"/> class by using the specified
            <see cref="T:System.Comparison`1"/> delegate.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> to use when comparing keys.
            </param>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <param name="item">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add to the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item.Key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Clear">
            <summary>
            Removes all items from the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </summary>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether a value is in the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </summary>
            <param name="key_value_pair">
            The value to locate in the <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </param>
            <returns>
            <c>true</c> if the item is found in the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </returns>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Nohros.Collections.AndersonTree`2"/> to
            an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            elements copied from the <see cref="T:Nohros.Collections.AndersonTree`2"/>.
            The array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/>is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or-
            <paramref name="index"/> is equal to or greater than the length of the
            array.-or-The number of elements in the source
            <see cref="T:Nohros.Collections.AndersonTree`2"/>is greater than the
            available space from <paramref name="index"/> to the end of the
            destination array.-or- <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot
            be cast automatically to the type of the destination array.
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Collections.AndersonTree`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" -->
        <member name="M:Nohros.Collections.AndersonTree`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Collections.AndersonTree`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" -->
        <member name="M:Nohros.Collections.AndersonTree`2.Accept(Nohros.Collections.InOrderVisitor{`0,`1},System.Object,System.Boolean)">
            <summary>
            Accepts the specified visitor and allow it to visit every node of the
            tree.
            </summary>
            <param name="visitor">
            The visitor to accepts.
            </param>
            <param name="reverse">
            A value indicating if the elements will be visit in the reverse order
            or not.
            </param>
            <param name="state">
            An object that contains the <paramref name="visitor"/> state.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Accept(Nohros.Collections.InOrderVisitor{`1},System.Object,System.Boolean)">
            <summary>
            Accepts the specified visitor and allow it to visit every node of the
            tree.
            </summary>
            <param name="visitor">The visitor to accepts.</param>
            <param name="reverse">A value indicating if the elements will be visit
            in the reverse order or not.</param>
            <param name="state">A user-defined object that qualifies or contains
            information about the visitor's current state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is
            a null reference</exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Accept(Nohros.Collections.InOrderVisitor{`0,`1},System.Boolean)">
            <summary>
            Accepts the specified visitor and allow it to visit every node of the
            tree.
            </summary>
            <param name="visitor">
            The visitor to accepts.
            </param>
            <param name="reverse">
            A value indicating if the elements will be visit in the reverse order
            or not.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Accept(Nohros.Collections.InOrderVisitor{`1},System.Boolean)">
            <summary>
            Accepts the specified visitor and allow it to visit every node of the
            tree.
            </summary>
            <param name="visitor">
            The visitor to accepts.
            </param>
            <param name="reverse">
            A value indicating if the elements will be visit in the reverse order
            or not.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/> is a<c>null</c> reference.
            </exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Skew(Nohros.Collections.AndersonTreeNode{`0,`1}@)">
            <summary>
            Performs a skew operation over a node.
            </summary>
            <param name="node">the node to skew</param>
            <remarks>Skew is a right rotation when an insertion or deletion creates
            a left horizontal link. No changes are needed to the levels after a
            skew because the operation simply turns a left horizontal link into a
            right horizontal link.</remarks>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Split(Nohros.Collections.AndersonTreeNode{`0,`1}@)">
            <summary>
            Performs a split operation over a node.
            </summary>
            <param name="node">The node to split</param>
            Split performs a left rotation operation on a node when an inserion
            or deletion creates a consecutive horizontal links.
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.FindNode(`0)">
            <summary>
            Retrieves a <see cref="T:Nohros.Collections.AndersonTreeNode`2"/> object in the
            <see cref="T:Nohros.Collections.AndersonTree`2"/> associated with the specified key.
            </summary>
            <param name="key">The key of the node to search for</param>
            <returns>The AndersonTreeNode associated with the specified key, if the
            key is found; otherwise an AndersonTreeNode with level zero - sentinel_
            node.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.InOrderTreeWalk(Nohros.Collections.TreeWalkAction{`0,`1})">
            <summary>
            Performs in-order traversal on the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </summary>
            <param name="action">
            A method used to perform some action with each node in the tree.
            </param>
            <remarks>
            The <paramref name="action"/> must returns <c>true</c> in order to
            allows the traversal to continue.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.ReverseInOrderTreeWalk(Nohros.Collections.TreeWalkAction{`0,`1})">
            <summary>
            Performs reverse in-order traversal on the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </summary>
            <param name="action">
            A method used to perform some action with each node in the tree.
            </param>
            <remarks>
            The <paramref name="action"/> must return <c>true</c> in order to
            allows the traversal to continue.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Insert(`0,`1,System.Boolean)">
            <summary>
            Inserts an item to the AndersonTree
            </summary>
            <param name="key">
            The key of the value to insert into the tree.
            </param>
            <param name="value">
            The value to insert in the tree.
            </param>
            <param name="add">
            A value indicating when the item will be added or modified.
            </param>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/>that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the tree.
            </summary>
            <param name="key">
            The value of the element to add. The value can be <c>null</c> for
            reference types.
            </param>
            <param name="value">
            The key of the element to add.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <remarks>
            <paramref name="key"/> cannot be <c>null</c>, but
            <paramref name="value"/> can be, if <typeparamref name="TValue"/> is
            a reference type.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Nohros.Collections.AndersonTree`2"/>
            constains and element with the specified key.
            </summary>
            <param name="key">The key to locate in the
            <see cref="T:Nohros.Collections.AndersonTree`2"/></param>
            <returns>true if the <see cref="T:Nohros.Collections.AndersonTree`2"/>
            constains an element with the key; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.Remove(`0)">
            <summary>
            Removes the element with the specified <paramref name="key"/> from the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            <c>true</c> if the element is successfully removed; otherwise,
            <c>false</c>. This method also returns <c>false</c> if key was not
            found in the tree.
            </returns>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get</param>
            <param name="value">When this method returns, contain the value
            associated with the specified key, if the is found; otherwise, the
            default value for the type of the <paramref name="value"/> parameter.
            This parameter is passed uninitialized</param>
            <returns>true if the AndersonTree contains an element with the
            specified key; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.AndersonTree`2.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Nohros.Collections.AndersonTree`2"/> to
            a new array.
            </summary>
            <returns>
            An array containing copies of the elements of the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>.
            </returns>
            <remarks>
            This method is an O(n) operation, where n is <see cref="P:Nohros.Collections.AndersonTree`2.Count"/>.
            </remarks>
        </member>
        <member name="P:Nohros.Collections.AndersonTree`2.Count">
            <summary>
            Gets the number of nodes contained in the
            <see cref="T:Nohros.Collections.AndersonTree`2"/>
            </summary>
        </member>
        <member name="P:Nohros.Collections.AndersonTree`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:Nohros.Collections.AndersonTree`2"/> object is read-only
            </summary>
        </member>
        <member name="P:Nohros.Collections.AndersonTree`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key
            </summary>
            <param name="key">
            The key whose value to get or set.
            </param>
            <returns>
            The value associated with the specified key. If the specified key is
            not found, attempting to get it throws a
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it creates a
            new element with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            key is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key does not exists in the tree.
            </exception>
        </member>
        <member name="P:Nohros.Collections.AndersonTree`2.First">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> associated with the
            least key in the tree, or a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            where <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> and
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> contains the default
            values of it's types if the tree is empty.
            </summary>
            <remarks>
            Retrieving the value of this property is a O(log(n)) operation.
            </remarks>
        </member>
        <member name="P:Nohros.Collections.AndersonTree`2.Last">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> associated with the
            greatest key in the tree, or a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            where <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> and
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> contains the default
            values of it's types if the tree is empty.
            </summary>
            <remarks>
            Retrieving the value of this property is a O(log(n)) operation.
            </remarks>
        </member>
        <member name="T:Nohros.Configuration.ProviderType">
            <summary>
            An enumeration used on the providers parsing.
            </summary>
        </member>
        <member name="F:Nohros.Configuration.ProviderType.Data">
            <summary>
            A data provider.
            </summary>
        </member>
        <member name="F:Nohros.Configuration.ProviderType.Simple">
            <summary>
            A simple provider.
            </summary>
        </member>
        <member name="T:Nohros.Data.DataReaders">
            <summary>
            Utility methods for <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataReaders.GetOrdinals(System.Data.IDataReader,System.String[])">
            <summary>
            Return the indexes of the named fields.
            </summary>
            <param name="data_reader">
            A <see cref="T:System.Data.IDataReader"/> containing the fileds to get the ordinals.
            </param>
            <param name="column_names">
            A string array containing the names of the fields to find.
            </param>
            <returns>
            An array containing the indexes of the specified column
            names within the <paramref name="data_reader"/>. The indexes is
            returned in the same order they appear on column names array.
            </returns>
            <remarks>
            Ordinal-based lookups are more efficient than name lookups, it
            is inefficient to call <see cref="!:IDataReader.GetOrdinal"/> within a
            loop. This method provides a convenient way to call the
            <see cref="!:IDataReader.GetOrdinal"/> method for a set of columns
            defined within a <paramref name="data_reader"/> and reduce the
            code len used for that purpose.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The number of specified fields is less than the number of columns.
            </exception>
        </member>
        <member name="T:Nohros.Concurrent.Uninterruptibles">
            <summary>
            Utilities for treating interruptibles operations as uninterruptible. In
            all cases, if a thread is interrupted during  such a call, the call
            continues to block until the result is available or the timeout elapses,
            and only then re-interrupts the thread.
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.Uninterruptibles.GetUninterruptibly``1(Nohros.Concurrent.IFuture{``0})">
            <summary>
            Invokes <see cref="M:Nohros.Concurrent.IFuture`1.Get"/> uninterruptibly.
            </summary>
            <param name="future">
            The future whose value should be get uninterruptibly.</param>
            <returns>The result of the future computation.</returns>
            <exception cref="T:Nohros.ExecutionException">
            if the computation threw an exception.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the current thread was interrupted while waiting.
            </exception>
            <seealso cref="T:Nohros.Concurrent.IFuture`1"/>
            <seealso cref="M:Nohros.Concurrent.IFuture`1.Get"/>
        </member>
        <member name="M:Nohros.Concurrent.Uninterruptibles.GetUninterruptibly``1(Nohros.Concurrent.IFuture{``0},System.Int64,Nohros.TimeUnit)">
            <summary>
            Invokes <see cref="M:Nohros.Concurrent.IFuture`1.Get(System.Int64,Nohros.TimeUnit)"/> uninterruptibly.
            </summary>
            <param name="future">
            The future whose value should be get uninterruptibly.
            </param>
            <param name="timeout">
            The maximum time to wait.
            </param>
            <param name="unit">
            The time unit of the timeout argument.
            </param>
            <returns>
            The result of the future computation.
            </returns>
            <exception cref="T:Nohros.ExecutionException">
            if the computation threw an exception.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the current thread was interrupted while waiting.
            </exception>
            <exception cref="T:System.TimeoutException">
            If the timer expires.
            </exception>
            <seealso cref="T:Nohros.Concurrent.IFuture`1"/>
            <seealso cref="M:Nohros.Concurrent.IFuture`1.Get(System.Int64,Nohros.TimeUnit)"/>
        </member>
        <member name="M:Nohros.Concurrent.Uninterruptibles.GetUninterruptibly``1(Nohros.Concurrent.IFuture{``0},System.Int64,Nohros.TimeUnit,``0@)">
            <summary>
            Invokes <see cref="M:Nohros.Concurrent.IFuture`1.TryGet(System.Int64,Nohros.TimeUnit,`0@)"/> uninterruptibly.
            </summary>
            <param name="future">The future whose value should be get
            uninterruptibly.</param>
            <param name="timeout">
            The maximum time to wait.
            </param>
            <param name="unit">
            The time unit of the timeout argument.
            </param>
            <param name="result">
            The result of the computation, or the default
            value for <typeparamref name="T"/> if the wait timed out.
            </param>
            <returns>
            The result of the future computation.
            </returns>
            <exception cref="T:Nohros.ExecutionException">
            if the computation threw an exception.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the current thread was interrupted while waiting.
            </exception>
            <seealso cref="T:Nohros.Concurrent.IFuture`1"/>
            <seealso cref="M:Nohros.Concurrent.IFuture`1.TryGet(System.Int64,Nohros.TimeUnit,`0@)"/>
        </member>
        <member name="T:Nohros.Collections.EventedSet`1">
            <summary>
            A decorator over the <see cref="T:System.Collections.Generic.ISet`1"/> that raise a event when
            a element is added.
            </summary>
            <typeparam name="T">
            The type of elements that the set contains.
            </typeparam>
        </member>
        <member name="M:Nohros.Collections.EventedSet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Collections.EventedSet`1"/> class
            by using the given <paramref name="set"/> of objects.
            </summary>
            <param name="set">
            A <see cref="T:System.Collections.Generic.ISet`1"/> that can be used to store objects of the type
            <typeparamref name="T"/>.
            </param>
        </member>
        <member name="E:Nohros.Collections.EventedSet`1.ItemAdded">
            <summary>
            Occurs when an item is added to the set.
            </summary>
        </member>
        <member name="T:Nohros.DateGranularityUnit">
            <summary>
            Defines the small unit of a date range.
            </summary>
        </member>
        <member name="F:Nohros.DateGranularityUnit.Day">
            <summary>
            Represents a day.
            </summary>
        </member>
        <member name="F:Nohros.DateGranularityUnit.Month">
            <summary>
            Represents a month.
            </summary>
        </member>
        <member name="F:Nohros.DateGranularityUnit.Year">
            <summary>
            Represents a year.
            </summary>
        </member>
        <member name="T:Nohros.DateRange">
            <summary>
            Represents a range of dates.
            </summary>
        </member>
        <member name="M:Nohros.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes the <see cref="T:Nohros.DateRange"/> by using the given first and
            last dates of the range.
            </summary>
            <param name="first_date">
            The first date of the range.
            </param>
            <param name="last_date">
            The last date if the range
            </param>
            <remarks>
            The dates of the range is enumerated using one unit of
            <see cref="!:GranularityUnit.Day"/>.
            </remarks>
        </member>
        <member name="M:Nohros.DateRange.#ctor(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes the <see cref="T:Nohros.DateRange"/> by using the given first and
            last dates of the range.
            </summary>
            <param name="first_date">
            The first date of the range.
            </param>
            <param name="last_date">
            The last date if the range
            </param>
            <param name="granularity">
            The granularity of the step. This represents the number of steps to
            advance per item enumerated while enumerating the dates of a range.
            </param>
            <remarks>
            The dates of the range is enumerated using
            <paramref name="granularity"/> units of
            <see cref="!:GranularityUnit.Day"/>.
            </remarks>
        </member>
        <member name="M:Nohros.DateRange.#ctor(System.DateTime,System.DateTime,System.Int32,Nohros.DateGranularityUnit)">
            <summary>
            Initializes the <see cref="T:Nohros.DateRange"/> by using the given first,
            step type and number of steps per unit.
            </summary>
            <param name="first_date">
            The first date of the range.
            </param>
            <param name="last_date">
            The last date if the range
            </param>
            <param name="granularity">
            The granularity of the step. This represents the number of steps to
            advance per item enumerated while enumerating the dates of a range.
            </param>
            <param name="granularity_unit">
            The type of the <paramref name="granularity"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="first_date"/> is greater than
            <paramref name="last_date"/> - or -
            <para>
            <paramref name="granularity"/> is negative - or -
            </para>
            </exception>
            <remarks>
            The dates of the range is enumerated using
            <paramref name="granularity"/> units of
            <paramref name="granularity_unit"/>.
            </remarks>
        </member>
        <member name="M:Nohros.DateRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a <see cref="T:System.Collections.IEnumerator"/> that enumerates the dates of a
            range.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IEnumerator"/> that enumerates the dates of a range.
            </returns>
            <remarks>
            The enumeration starts at <see cref="P:Nohros.DateRange.FirstDate"/> and increments one
            <see cref="!:Step"/> at each enumeration.
            </remarks>
        </member>
        <member name="M:Nohros.DateRange.GetEnumerator">
            <summary>
            Gets a <see cref="T:System.Collections.IEnumerator"/> that enumerates the dates of a
            range.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IEnumerator"/> that enumerates the dates of a range.
            </returns>
            <remarks>
            The enumeration starts at <see cref="P:Nohros.DateRange.FirstDate"/> and increments one
            <see cref="P:Nohros.DateRange.Granularity"/> at each enumeration.
            </remarks>
        </member>
        <member name="P:Nohros.DateRange.FirstDate">
            <summary>
            Gets the first date of the range.
            </summary>
        </member>
        <member name="P:Nohros.DateRange.LastDate">
            <summary>
            Gets the last date of the range.
            </summary>
        </member>
        <member name="P:Nohros.DateRange.GranularityUnit">
            <summary>
            Gets the unit of the granularity.
            </summary>
        </member>
        <member name="P:Nohros.DateRange.Granularity">
            <summary>
            Gets the granularity that is used to enumerate the dates of a range.
            </summary>
        </member>
        <member name="T:Nohros.Data.Json.JsonString">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that represents a
            json string token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonString.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Nohros.Data.Json.JsonString"/> class using
            the string <paramref name="value"/>.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonString.QuoteStringToken(System.String)">
            <summary>
            Returns the string <paramref name="str"/> suitably quoted to be used
            as a json string token.
            </summary>
            <param name="str">
            The string to be quoted.
            </param>
            <returns>
            The string <paramref name="str"/> suitably quoted to be used as a
            json string token.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonString.QuoteStringOrNullToken(System.String)">
            <summary>
            Returns the string <paramref name="str"/> suitably quoted to be used
            as a json string token or the json null token if <paramref name="str"/>
            is <c>null</c>.
            </summary>
            <param name="str">
            The string to be quoted.
            </param>
            <returns>
            The string <paramref name="str"/> suitably quoted to be used as a
            json string token.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonString.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class. The returned string is enclosed in double qutoes.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonString.op_Explicit(System.String)~Nohros.Data.Json.JsonString">
            <summary>
            Explicit converts an <see cref="T:System.String"/> object to a
            <see cref="T:Nohros.Data.Json.JsonString"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonString"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.Json.JsonInteger">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that maps a
            <see cref="T:System.Int32"/> type to a json number token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonInteger"/> class
            that uses the general number format("G") to convert this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonInteger.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonInteger"/> class
            that uses <paramref name="format"/> to converts this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            The format to use when converting this instance to a string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonInteger.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonInteger.op_Explicit(System.Int32)~Nohros.Data.Json.JsonInteger">
            <summary>
            Explicit converts an <see cref="T:System.Int32"/> object to a
            <see cref="T:Nohros.Data.Json.JsonInteger"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonInteger"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.Json.JsonFloat">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that maps a
            <see cref="T:System.Single"/> type to a json number token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonFloat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonFloat"/> class
            that uses the general number format("G") to convert this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonFloat.#ctor(System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonFloat"/> class
            that uses <paramref name="format"/> to converts this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            The format to use when converting this instance to a string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonFloat.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonFloat.op_Explicit(System.Single)~Nohros.Data.Json.JsonFloat">
            <summary>
            Explicit converts an <see cref="T:System.Single"/> object to a
            <see cref="T:Nohros.Data.Json.JsonFloat"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Single"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonFloat"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.ConnectionProviderLoader">
            <summary>
            A <see cref="T:Nohros.Caching.CacheLoader`1"/> that can be used to dynamically load
            instances of the <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> class using the
            provider name.
            </summary>
        </member>
        <member name="M:Nohros.Data.ConnectionProviderLoader.#ctor(System.Collections.Generic.IEnumerable{Nohros.Configuration.IProviderNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.ConnectionProviderLoader"/>
            class that contains the elements copied from the specified collection.
            </summary>
            <param name="providers">
            The collection whose elements are copied to the new
            <see cref="T:Nohros.Data.ConnectionProviderLoader"/> object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providers"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="providers"/> contains one or more null elements.
            </exception>
        </member>
        <member name="M:Nohros.Data.ConnectionProviderLoader.Load(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> class.
            <paramref name="key"/>.
            </summary>
            <param name="key">
            The name of the provider that should be created
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> object.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <remarks>
            This method used the <paramref name="key"/> as a index into the list
            of providers that was specified in constructor and them uses the found
            <see cref="T:Nohros.Configuration.IProviderNode"/> to construct an instance of the
            <see cref="T:Nohros.Data.Providers.IConnectionProvider"/> class, if a provider with name
            <paramref name="key"/> is not found, this method raises a
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/> exception.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.Sets.RemoveByType``1(System.Collections.Generic.ISet{``0},System.Type)">
            <summary>
            Removes all the ocurrences of the given type in the given
            <see cref="T:System.Collections.Generic.ISet`1"/>.
            </summary>
            <typeparam name="T">
            The type of oject that are stored in the set.
            </typeparam>
            <param name="set">
            The set to remove objects from.
            </param>
            <param name="type">
            The type of the object that should be removed from the set.
            </param>
        </member>
        <member name="T:Nohros.Data.ICriteria">
            <summary>
            Defines the criteria to be used while resolving a database query.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICriteria.GetFieldMap(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> class containing the
            custom maps between a object properties and a the returned fields
            set.
            </summary>
        </member>
        <member name="M:Nohros.Data.ICriteria.GetFilterMap(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> class containing the
            custom maps between a object properties and the filter set.
            </summary>
        </member>
        <member name="P:Nohros.Data.ICriteria.Fields">
            <summary>
            Gets the list of fields that should be selected from the database.
            </summary>
            <remarks>
            This represents the list of columns of the <c>SELECT</c> clause of
            the SQL-92 standard
            </remarks>
        </member>
        <member name="P:Nohros.Data.ICriteria.Filters">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the defined
            filtering.
            </summary>
            <remarks>
            This represents the clause of the <c>WHERE</c> clause of the 
            the SQL-92 standard
            </remarks>
        </member>
        <member name="T:Nohros.Concurrent.Future`1">
            <summary>
            A asynchronous computation.
            </summary>
            <typeparam name="T">
            The result type returned by this <see cref="M:Nohros.Concurrent.IFuture`1.Get"/> method.
            </typeparam>
            <remarks>
            This class provides a base implemetation of <see cref="T:Nohros.Concurrent.IFuture`1"/>,
            with methods to start and cancel a computation, query to see if the
            computation is complete, and retrieves the result of the computation. The
            result can only be retrieved when the computation has completed; the
            <see cref="!:Get"/> method will block if the computation has not yet
            completed. Once the computation has completed, the computation cannot
            be restarted or cancelled.
            <para>
            A <see cref="T:Nohros.Concurrent.Future`1"/> can be used to wrap a
            <see cref="T:Nohros.CallableDelegate`1"/> or <see cref="T:Nohros.RunnableDelegate"/>
            delegates.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Future`1.#ctor(Nohros.RunnableDelegate,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.Future`1"/> class that
            will, upon running, execute the given <see cref="T:Nohros.RunnableDelegate"/>,
            and arrange that <see cref="M:Nohros.Concurrent.AbstractFuture`1.Get"/> will return the
            given result on successful completion.
            </summary>
            <param name="runnable">
            The runnable task
            </param>
            <param name="result">
            The result to return on successful completion. If you don't need a
            particular result, consider using constructions of the form:
            <para>
            <code>
            Future{T} f = new Future(runnable, null).
            </code>
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="runnable"/> is null.
            </exception>
        </member>
        <member name="M:Nohros.Concurrent.Future`1.#ctor(Nohros.RunnableDelegate,`0,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.Future`1"/> class that
            will, upon running, execute the given <see cref="T:Nohros.RunnableDelegate"/>,
            and arrange that <see cref="M:Nohros.Concurrent.AbstractFuture`1.Get"/> will return the
            given result on successful completion.
            </summary>
            <param name="runnable">
            The runnable task
            </param>
            <param name="state">
            An object representing data to be used by the future.
            </param>
            <param name="result">
            The result to return on successful completion. If you don't need a
            particular result, consider using constructions of the form:
            <para>
            <code>
            Future{T} f = new Future(runnable, null).
            </code>
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="runnable"/> is null.
            </exception>
        </member>
        <member name="M:Nohros.Concurrent.Future`1.#ctor(Nohros.CallableDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.Future`1"/> class that
            will, upon running, execute the given <see cref="T:Nohros.CallableDelegate`1"/>.
            </summary>
            <param name="callable">
            The callable task.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callable"/> is null
            </exception>
        </member>
        <member name="M:Nohros.Concurrent.Future`1.#ctor(Nohros.CallableDelegate{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.Future`1"/> class that
            will, upon running, execute the given <see cref="T:Nohros.CallableDelegate`1"/>.
            </summary>
            <param name="callable">
            The callable task.
            </param>
            <param name="state">
            An object representing data to be used by the future.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callable"/> is null
            </exception>
        </member>
        <member name="M:Nohros.Concurrent.Future`1.Run">
            <summary>
            Sets this <see cref="T:Nohros.Concurrent.Future`1"/> to the result of its computation
            unless it has been cancelled.
            </summary>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.Future`1.Run(System.Boolean)">
            <summary>
            Sets this <see cref="T:Nohros.Concurrent.Future`1"/> to the result of its computation
            unless it has been cancelled.
            </summary>
            <param name="synchronously">
            A value indicating if the operation is running synchronously.
            </param>
            <remarks>
            A operation is considered synchronously when it runs in the same
            context(Thread) as its initiator.
            </remarks>
        </member>
        <member name="T:Nohros.Caching.LocalManualCache`1">
            <summary>
            A <see cref="T:Nohros.Caching.ICache`1"/> implementation that is populated manually by
            calling one of the Put(...) methods overloads.
            </summary>
            <typeparam name="T">The type of objects that the cache contains
            </typeparam>
        </member>
        <member name="M:Nohros.Caching.LocalManualCache`1.#ctor(Nohros.Caching.Providers.ICacheProvider,Nohros.Caching.CacheBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LocalManualCache`1"/> by
            using the specified cache provider and builder.
            </summary>
            <param name="provider">
            A <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> object that is used to store the cached
            items.
            </param>
            <param name="builder">
            A <see cref="T:Nohros.Caching.CacheBuilder`1"/> containing the configured options for
            this cache.
            </param>
        </member>
        <member name="M:Nohros.Caching.LocalManualCache`1.#ctor(Nohros.Caching.Providers.ICacheProvider,Nohros.Caching.CacheBuilder{`0},Nohros.Caching.CacheLoader{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Caching.LocalManualCache`1"/> by
            using the specified cache provider, builder and automatic loader.
            </summary>
            <param name="provider">
            A <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> object that is used to store the cached
            items.
            </param>
            <param name="builder">
            A <see cref="T:Nohros.Caching.CacheBuilder`1"/> containing the configured options for
            this cache.
            </param>
            <param name="loader">
            A <see cref="!:loader"/> that is used to automatically load values.
            </param>
        </member>
        <member name="T:Nohros.TimeUnit">
            <summary>
            A <see cref="T:Nohros.TimeUnit"/> represents the duration at a given unit of
            granularity. <see cref="T:Nohros.TimeUnit"/> helps organize and use time
            representations that may be maintened separately across various context.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Nanoseconds">
            <summary>
            A nanosecond is defined as one thousandth of a microsecond.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Microseconds">
            <summary>
            A microsecond is defined as thousandth of a millisecond.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Milliseconds">
            <summary>
            A millisecond is defined as thousandth of a second.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Seconds">
            <summary>
            The base unit of mensure.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Minutes">
            <summary>
            A minute is defined as sixty seconds.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Hours">
            <summary>
            A hour is defined as sixty minutes.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Days">
            <summary>
            A day is defined as twenty four hours.
            </summary>
        </member>
        <member name="F:Nohros.TimeUnit.Ticks">
            <summary>
            A tick is defines as 100 nanoseconds.
            </summary>
        </member>
        <member name="T:Nohros.Extensions.Time.TimeUnitHelper">
            <summary>
            Extensions for time based conversion.
            </summary>
        </member>
        <member name="F:Nohros.Extensions.Time.TimeUnitHelper.C0">
            <summary>
            Handy constants for conversion methods.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.x(System.Double,System.Double,System.Double)">
            <summary>
            Scale <paramref name="d"/> by <paramref name="m"/>, checking for
            overflow. This has a short name to make above code more readable.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToUnixTime(System.DateTime)">
            <summary>
            Converts the specified datetime to the unix time unit.
            </summary>
            <returns>
            The number of seconds since unix epoch.
            </returns>
            <remarks>
            If <see cref="P:System.DateTime.Kind"/> property of the given
            <see cref="!:duration"/> is <see cref="F:System.DateTimeKind.Unspecified"/>
            <paramref name="duration"/> is assumed to be a UTC time.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToUnixEpoch(System.DateTime)">
            <summary>
            Converts the specified datetime to the unix time unit.
            </summary>
            <returns>
            The number of seconds since unix epoch.
            </returns>
            <remarks>
            If <see cref="P:System.DateTime.Kind"/> property of the given
            <see cref="!:duration"/> is <see cref="F:System.DateTimeKind.Unspecified"/>
            <paramref name="duration"/> is assumed to be a UTC time.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.FromUnixEpoch(System.Int64)">
            <summary>
            Converts the specified epoch time to its corresponding local date
            and time.
            </summary>
            <param name="timestamp">
            A Unix epoch time.
            </param>
            <returns>
            The local time representation of the specified unix epoch
            time.
            </returns>
            <remarks>
            The returned date time represents a local time. To convert to a
            Coordinated Universal Time (UTC) use the
            <see cref="M:Nohros.Extensions.Time.TimeUnitHelper.FromUnixEpoch(System.Int64,System.DateTimeKind)"/> overload
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.FromUnixEpoch(System.Int64,System.DateTimeKind)">
            <summary>
            Converts the specified epoch time to its corresponding date and time
            using the given date time kind.
            </summary>
            <param name="timestamp">
            A Unix epoch time.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/> representation of the specified unix epoch
            time.
            </returns>
            <remarks>
            If <paramref name="kind"/> is set to
            <see cref="F:System.DateTimeKind.Unspecified"/> the
            <see cref="F:System.DateTimeKind.Local"/> will be used.
            </remarks>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMillis(System.Int64,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToTicks(System.Double,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToNanos(System.Double,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMilliseconds(System.Double,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToSeconds(System.Double,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMinutes(System.Double,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToTicks(System.Int64,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToNanos(System.Int64,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMilliseconds(System.Int64,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToSeconds(System.Int64,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMinutes(System.Int64,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToTicks(System.Int32,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToNanos(System.Int32,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMilliseconds(System.Int32,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToSeconds(System.Int32,Nohros.TimeUnit)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToTicks(Nohros.TimeUnit,System.Int32)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToNanos(Nohros.TimeUnit,System.Int32)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMilliseconds(Nohros.TimeUnit,System.Int32)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToSeconds(Nohros.TimeUnit,System.Int32)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToSeconds(Nohros.TimeUnit,System.Int64)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToTicks(Nohros.TimeUnit,System.Int64)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToNanos(Nohros.TimeUnit,System.Int64)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMilliseconds(Nohros.TimeUnit,System.Int64)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToSeconds(Nohros.TimeUnit,System.Double)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToTicks(Nohros.TimeUnit,System.Double)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToNanos(Nohros.TimeUnit,System.Double)">
            <summary>
            Convert the specified time duration in the given unit to the
            nanoseconds units.
            </summary>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToMilliseconds(Nohros.TimeUnit,System.Double)">
            <summary>
            Convert the specified time duration in the given unit to the
            seconds units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.Name(Nohros.TimeUnit)">
            <summary>
            Gets the name of the given <see cref="T:Nohros.TimeUnit"/>.
            </summary>
            <param name="unit">
            THe <see cref="T:Nohros.TimeUnit"/> to get the name.
            </param>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.Abbreviation(Nohros.TimeUnit)">
            <summary>
            Gets the abbreviation for the unit as defined by IEEE standard.
            </summary>
            <param name="unit">
            Th <see cref="T:Nohros.TimeUnit"/> to get abbreviation.
            </param>
            <returns>
            The abbreviation of the <paramref name="unit"/> as defined by IEEE
            standard or the name of the unit in lowercase if the abbreviation
            for the unit is not defined.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.ToUnit(System.TimeSpan,Nohros.TimeUnit)">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to the <paramref name="unit"/>.
            </summary>
            <param name="duration">
            The duration to be converted.
            </param>
            <param name="unit">
            The unit which <paramref name="duration"/> should be converted to.
            </param>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.Convert(System.TimeSpan,Nohros.TimeUnit)">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to the <paramref name="unit"/>.
            </summary>
            <param name="duration">
            The duration to be converted.
            </param>
            <param name="unit">
            The unit which <paramref name="duration"/> should be converted to.
            </param>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.Convert(Nohros.TimeUnit,System.Double,Nohros.TimeUnit)">
            <summary>
            Converts the <paramref name="duration"/> from the unit
            <paramref name="@from"/> to the unit <paramref name="to"/>.
            </summary>
            <param name="from">
            The unit of <paramref name="duration"/>.
            </param>
            <param name="duration">
            The duration to be converted.
            </param>
            <param name="to">
            The unit which <to name="duration"/> should be converted to.
            </param>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.IsBetween(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets a value indicating if <paramref name="time"/> is between the
            <paramref name="begin"/> and <paramref name="end"/>.
            </summary>
            <param name="time">
            The time to check.
            </param>
            <param name="begin">
            The start of the range.
            </param>
            <param name="end">
            The end of the range.
            </param>
            <returns>
            <c>true</c> if <paramref name="time"/> is between
            <paramref name="begin"/> and <paramref name="end"/>.
            </returns>
        </member>
        <member name="M:Nohros.Extensions.Time.TimeUnitHelper.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Gets a value indicating if <paramref name="time"/> is between the
            <paramref name="begin"/> and <paramref name="end"/>.
            </summary>
            <param name="time">
            The time to check.
            </param>
            <param name="begin">
            The start of the range.
            </param>
            <param name="end">
            The end of the range.
            </param>
            <returns>
            <c>true</c> if <paramref name="time"/> is between
            <paramref name="begin"/> and <paramref name="end"/>.
            </returns>
        </member>
        <member name="P:Nohros.Data.DataTransferObjectSet`1.SizeOf">
            <summary>
            Gets or set the size of the type T when it's serialized
            </summary>
        </member>
        <member name="T:Nohros.Collections.AndersonTreeNode`2">
            <summary>
            A container class, used for the AndersonTree
            </summary>
        </member>
        <member name="F:Nohros.Collections.AndersonTreeNode`2.childs">
            <summary>
            0:Left; 1:Right
            </summary>
        </member>
        <member name="M:Nohros.Collections.AndersonTreeNode`2.#ctor">
            <summary>
            Constructor used to initialize the sentinel nodes
            </summary>
        </member>
        <member name="M:Nohros.Collections.AndersonTreeNode`2.#ctor(`0,`1,Nohros.Collections.AndersonTreeNode{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Nohros.Collections.AndersonTreeNode`2"/> by using the specified key,
            value and sentinel node.
            </summary>
            <param name="key">The key of the node</param>
            <param name="value">The value of the node</param>
            <param name="sentinel">The sentinel node</param>
        </member>
        <member name="P:Nohros.Collections.AndersonTreeNode`2.Level">
            <summary>
            Gets or sets the level of the current node.
            </summary>
        </member>
        <member name="P:Nohros.Collections.AndersonTreeNode`2.Right">
            <summary>
            Gets or set the right node of the subtree.
            </summary>
        </member>
        <member name="P:Nohros.Collections.AndersonTreeNode`2.Left">
            <summary>
            Gets or sets the left subtree
            </summary>
        </member>
        <member name="P:Nohros.Collections.AndersonTreeNode`2.Value">
            <summary>
            Gets or sets the value of the current node.
            </summary>
        </member>
        <member name="P:Nohros.Collections.AndersonTreeNode`2.Key">
            <summary>
            Gets or sets the key of the current node.
            </summary>
        </member>
        <member name="T:Nohros.MemoizingSupplier`1">
            <summary>
            A supplier that caches the instance of the retrieved object during
            the first call to <see cref="M:Nohros.MemoizingSupplier`1.Supply"/> and returns that value on
            subsequent calls to <see cref="M:Nohros.MemoizingSupplier`1.Supply"/>.
            </summary>
            <typeparam name="T">The type of the object that this supplier returns.
            </typeparam>
            <remarks>The returned supplier is thread-safe.</remarks>
        </member>
        <member name="M:Nohros.MemoizingSupplier`1.#ctor(Nohros.ISupplier{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.MemoizingSupplier`1"/>
            by using the specified <paramref name="supplier"/>.
            </summary>
            <param name="supplier">A <see cref="T:Nohros.ISupplier`1"/> that is used to
            create the first instance of the type <typeparamref name="T"/></param>
        </member>
        <member name="M:Nohros.MemoizingSupplier`1.Supply">
            <summary>
            Gets an instance of the type <paramref name="T"/>.
            </summary>
            <remarks>
            The instance that is returned on the first call is cached and returned
            on the subsequent calls to this method.
            </remarks>
            <returns>An instance of the type <typeparamref name="T"/></returns>
        </member>
        <member name="T:Nohros.Caching.Providers.ICacheProviderFactory">
            <summary>
            Defines the methods and properties that is used to create instances of
            the <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> class.
            </summary>
            <remarks>
            This interface implies a constructor with no parameters.
            </remarks>
        </member>
        <member name="M:Nohros.Caching.Providers.ICacheProviderFactory.CreateCacheProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> using the
            specified provider options.
            </summary>
            <param name="options">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing a collection
            options configured for the provider.
            </param>
            <returns>
            An instance of the <see cref="T:Nohros.Caching.Providers.ICacheProvider"/> class.
            </returns>
        </member>
        <member name="T:Nohros.Logging.MustLogger">
            <summary>
            A implementation of the <see cref="T:Nohros.Logging.ILogger"/> used for internal library
            logging.
            </summary>
            <remarks>
            This class uses the nohros must framework and is the only point where
            this dependency exists. Clients should call the
            <see cref="P:Nohros.Logging.MustLogger.ForCurrentProcess"/> method to obtain an instance of the
            <see cref="T:Nohros.Logging.ILogger"/> class, and uses it to log messages.
            <para>
            By default the <see cref="T:Nohros.Logging.NOPLogger"/> is returned by the
            <see cref="P:Nohros.Logging.MustLogger.ForCurrentProcess"/> method. The client should configure
            the correct logger on the app initialization.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Logging.MustLogger.#ctor(Nohros.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Logging.MustLogger"/>
            class by using the specified <see cref="T:Nohros.Logging.ILogger"/> object.
            </summary>
        </member>
        <member name="P:Nohros.Logging.MustLogger.ForCurrentProcess">
            <summary>
            Gets the current configured application logger.
            </summary>
        </member>
        <member name="T:Nohros.RuntimeTypeFactory`1">
            <summary>
            A collection of factory methods used to dynamically create instances of
            other classes.
            </summary>
            <remarks>
            This class is basically a simplification of the <see cref="T:System.Activator"/>
            class.
            </remarks>
            <typeparam name="T">
            The type to be created. It is usually a interface or a derived class of
            the type defined by a <see cref="T:Nohros.IRuntimeType"/> object. The type that
            is loaded is the type defined by the <see cref="T:Nohros.IRuntimeType"/> object,
            which is casted to <typeparamref name="T"/> before it is loaded.
            </typeparam>
        </member>
        <member name="M:Nohros.RuntimeTypeFactory`1.CreateInstanceNoException(Nohros.IRuntimeType,System.Object[])">
            <summary>
            Creates a new instance of the type defined by the
            <paramref name="runtime_type"/> object.
            </summary>
            <param name="runtime_type">
            A <see cref="T:Nohros.IRuntimeType"/> object containing  information about
            the type to be instantiated.
            </param>
            <param name="args">
            An array of arguments that match the parameters of the constructor to
            invoke. If args is an empty array or null, the constructor that takes
            no parameters(the default constructor) is invoked.
            </param>
            <returns>
            An instance of the type defined by the <paramref name="runtime_type"/>
            object casted to <typeparamref name="T"/> or <c>null</c> if the class
            could not be loaded or casted to <typeparamref name="T"/>
            </returns>
            <remarks>
            A exception is never raised by this method. If a exception is raised
            by the object constructor it will be catched and <c>null</c> will be
            returned. If you need to know about the exception, use the method
            <see cref="M:Nohros.RuntimeTypeFactory`1.CreateInstance(Nohros.IRuntimeType,System.Object[])"/> instead.
            </remarks>
            <seealso cref="M:Nohros.RuntimeTypeFactory`1.CreateInstance(Nohros.IRuntimeType,System.Object[])"/>
            <seealso cref="T:Nohros.IRuntimeType"/>
        </member>
        <member name="M:Nohros.RuntimeTypeFactory`1.CreateInstanceNoException(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the type defined by the
            <paramref name="type"/> object.
            </summary>
            <param name="type">
            A <see cref="T:System.Type"/> object containing  information about
            the type to be instantiated.
            </param>
            <param name="args">
            An array of arguments that match the parameters of the constructor to
            invoke. If args is an empty array or null, the constructor that takes
            no parameters(the default constructor) is invoked.
            </param>
            <returns>
            An instance of the type defined by the <paramref name="type"/>
            object casted to <typeparamref name="T"/> or <c>null</c> if the class
            could not be loaded or casted to <typeparamref name="T"/>
            </returns>
            <remarks>
            A exception is never raised by this method. If a exception is raised
            by the object constructor it will be catched and <c>null</c> will be
            returned. If you need to know about the exception, use the method
            <see cref="M:Nohros.RuntimeTypeFactory`1.CreateInstance(Nohros.IRuntimeType,System.Object[])"/> instead.
            </remarks>
            <seealso cref="M:Nohros.RuntimeTypeFactory`1.CreateInstance(Nohros.IRuntimeType,System.Object[])"/>
            <seealso cref="T:Nohros.IRuntimeType"/>
        </member>
        <member name="M:Nohros.RuntimeTypeFactory`1.CreateInstanceFallback(Nohros.IRuntimeType,System.Object[])">
            <summary>
            Creates a new instance of the type defined by the
            <paramref name="runtime_type"/> object and the specified
            arguments, falling back to the default class constructor.
            </summary>
            <param name="runtime_type">
            A <see cref="T:Nohros.IRuntimeType"/> object containing  information about
            the type to be instantiated.
            </param>
            <param name="args">
            An array of arguments that match the parameters of the constructor to
            invoke. If args is an empty array or null, the constructor that takes
            no parameters(the default constructor) is invoked.
            </param>
            <returns>
            An instance of the type defined by the <paramref name="runtime_type"/>
            object casted to <typeparamref name="T"/>.
            </returns>
            <remarks>
            If a constructor that match the specified array of arguments is not
            found, this method try to create an instance of the type defined by
            the <paramref name="runtime_type"/> object using the constructor that
            takes no parameters(the default constructor).
            </remarks>
            <seealso cref="M:Nohros.RuntimeTypeFactory`1.CreateInstance(Nohros.IRuntimeType,System.Object[])"/>
            <seealso cref="T:Nohros.IRuntimeType"/>
        </member>
        <member name="M:Nohros.RuntimeTypeFactory`1.CreateInstanceFallback(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the type defined by the
            <paramref name="type"/> object and the specified
            arguments, falling back to the default class constructor.
            </summary>
            <param name="type">
            A <see cref="T:System.Type"/> object containing  information about
            the type to be instantiated.
            </param>
            <param name="args">
            An array of arguments that match the parameters of the constructor to
            invoke. If args is an empty array or null, the constructor that takes
            no parameters(the default constructor) is invoked.
            </param>
            <returns>
            An instance of the type defined by the <paramref name="type"/>
            object casted to <typeparamref name="T"/>.
            </returns>
            <remarks>
            If a constructor that match the specified array of arguments is not
            found, this method try to create an instance of the type defined by
            the <paramref name="type"/> object using the constructor that
            takes no parameters(the default constructor).
            </remarks>
            <seealso cref="M:Nohros.RuntimeTypeFactory`1.CreateInstance(System.Type,System.Object[])"/>
            <seealso cref="T:Nohros.IRuntimeType"/>
        </member>
        <member name="M:Nohros.RuntimeTypeFactory`1.CreateInstance(Nohros.IRuntimeType,System.Object[])">
            <summary>
            Creates a new instance of the type defined by the
            <paramref name="runtime_type"/> object and the specified arguments.
            </summary>
            <param name="runtime_type">
            A <see cref="T:Nohros.IRuntimeType"/> object containing  information about
            the type to be instantiated.
            </param>
            <param name="args">
            An array of arguments that match the parameters of the constructor to
            invoke. If args is an empty array or null, the constructor that takes
            no parameters(the default constructor) is invoked.
            </param>
            <returns>
            An instance of the type defined by the <paramref name="runtime_type"/>
            object casted to <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Nohros.RuntimeTypeFactory`1.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the type defined by the
            <paramref name="type"/> object and the specified arguments.
            </summary>
            <param name="type">
            A <see cref="T:System.Type"/> object containing  information about
            the type to be instantiated.
            </param>
            <param name="args">
            An array of arguments that match the parameters of the constructor to
            invoke. If args is an empty array or null, the constructor that takes
            no parameters(the default constructor) is invoked.
            </param>
            <returns>
            An instance of the type defined by the <paramref name="type"/>
            object casted to <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="T:Nohros.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:Nohros.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Nohros.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Gets the property represented by the lambda expression.        
            </summary>
            <param name="checkForSingleDot">If checkForSingleDot is true, then the property expression is checked to see that only a single dot is present.</param>
        </member>
        <member name="M:Nohros.Reflect`1.GetMemberInfo(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
            <param name="checkForSingleDot">Checks that the member expression doesn't have more than one dot like a.Prop.Val</param>
        </member>
        <member name="T:Nohros.Providers.IProviderFactory">
            <summary>
            A factory for providers.
            </summary>
        </member>
        <member name="M:Nohros.Providers.IProviderFactory.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Providers.IProviderFactory`1"/>
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Nohros.Data.Json.JsonArray">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that represents a
            json array token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonArray"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{Nohros.Data.Json.IJsonToken})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonArray"/> class using
            the specified collection of <paramref name="IJsonToken"/> objects.
            </summary>
            <param name="elements">
            An array of <see cref="T:Nohros.Data.Json.IJsonToken"/> containing the elements of the
            json array.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonArray.Add(Nohros.Data.Json.IJsonToken)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Json.JsonArray.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="P:Nohros.Data.Json.JsonArray.Count">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Data.Json.JsonArray.Value">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.DataFieldDecimal">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Decimal"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldDecimal.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldDecimal"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            THe name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldDecimal.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Decimal"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Decimal"/> at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldDecimal.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldDecimal"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldDecimal.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Decimal"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.Configuration.DataServersConfig">
            <summary>
            Represents the main section of the <see cref="T:Nohros.Configuration.DataServerConfig"/>
            configurations.
            </summary>
        </member>
        <member name="P:Nohros.Configuration.DataServersConfig.Servers">
            <summary>
            Gets or sets the collection of configured <see cref="T:Nohros.Configuration.DataServersConfig"/>
            </summary>
        </member>
        <member name="T:Nohros.Concurrent.BackgroundThreadFactory">
            <summary>
            A implementation of the <see cref="T:Nohros.Concurrent.IThreadFactory"/> class that create
            <see cref="T:System.Threading.Thread"/>s that runs in background(
            <see cref="P:System.Threading.Thread.IsBackground"/> equals to <c>true</c>).
            </summary>
        </member>
        <member name="M:Nohros.Concurrent.BackgroundThreadFactory.CreateThread(System.Threading.ThreadStart)">
            <summary>
            Creates a <see cref="T:System.Threading.Thread"/> that runs in bacjgroun and do not
            prevent a process from terminating.
            </summary>
            <param name="runnable"></param>
            <returns>
            A <see cref="T:System.Threading.Thread"/> that runs in background.
            </returns>
        </member>
        <member name="M:Nohros.Concurrent.BackgroundThreadFactory.CreateThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a <see cref="T:System.Threading.Thread"/> taht tuns in background and do not
            prevent a process from terminating.
            </summary>
            <param name="runnable"></param>
            <returns>
            A <see cref="T:System.Threading.Thread"/> that runs in background.
            </returns>
        </member>
        <member name="M:Nohros.Caching.Strength.ReferenceValue``1(Nohros.Caching.LoadingCache{``0}.CacheEntry{``0},``0,Nohros.Caching.StrengthType)">
            <summary>
            Creates a <see cref="T:Nohros.Caching.IValueReference`1"/> for the specified
            value according to the given strength type.
            </summary>
        </member>
        <member name="T:Nohros.Collections.DictionaryValue`1">
            <summary>
            A recursive data storage class optimized for the namely storing a hierarchical
            tree of simple <see cref="!:Values"/>.
            <remarks>
            This class specifies a recursive data storage class. So it is fairly expressive.
            However, the API is optimized for the common case, namely storing a hierarchical
            tree of simple values. Given a DictionaryValue root, you can easily do things like:
            <para>
            <code>
            root.SetString("global.pages.homepage", "http://sys.nohros.com");
            string homepage = "http://nohros.com";  // default/fallback value
            homepage = root.GetString("global.pages.homepage", out homepage);
            </code>
            </para>
            where "global" and "pages" are also DictionaryValues, and "homepage"
            is a string setting.  If some elements of the path didn't exist yet,
            the SetString() method would create the missing elements and attach them
            to root before attaching the homepage value.
            </remarks>
            </summary>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.#ctor">
            <summary>
            Initializes a new instance of the DictionaryValue class.
            </summary>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.Add(System.String,`0)">
            <summary>
            Adds the specified key and value to the DictionaryValue.
            </summary>
            <param name="path">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null.</param>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.HasKey(System.String)">
            <summary>
            Determines whether the <typeparamref name="Nohros.Data.DictionaryValue"/> contains
            the specified key.
            </summary>
            <param name="key">The key to locate in the<typeparamref name="Nohros.Data.DictionaryValue"/></param>
            <returns>true if the <typeparamref name="Nohros.Data.DictionaryValue"/> contains an element with the
            specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.GetValue(System.String)">
            <summary>
            Gets a <see cref="T:Nohros.IValue"/> object from dictionary, using the specified path.
            </summary>
            <param name="path">The path of the value to get.</param>
            <returns>An IValue instance with path <paramref name="path"/> or null if <paramref name="path"/> is
            not found.</returns>
            <remarks>
            This method is used internally to traverse the internal dictionary tree. The elements of the internal
            dictionary could be a <see cref="T:Nohros.Collections.DictionaryValue`1"/> or a <typeparamref name="T"/>. So, to traverse it
            recursivelly we need a method that returns a object of the type <see cref="T:Nohros.IValue"/> instead of an object of the
            type <paramref name="T"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.GetValue(System.String,Nohros.IValue@)">
            <summary>
            Gets a <see cref="T:Nohros.IValue"/> object from dictionary, using the specified path.
            </summary>
            <param name="path">The path of the value to get.</param>
            <param name="out_value">When this method returns contains an IValue object associated with the
            <paramref name="path"/> or null if <paramref name="path"/> is not found.</param>
            <returns>true if <paramref name="path"/> is foound; otherwise null.</returns>
            <remarks>
            This method is used internally to traverse the internal dictionary tree. The elements of the internal
            dictionary could be a <see cref="T:Nohros.Collections.DictionaryValue`1"/> or a <typeparamref name="T"/>. So, to traverse it
            recursivelly we need a method that returns a object of the type <see cref="T:Nohros.IValue"/> instead of an object of the
            type <paramref name="T"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.SetValue(System.String,Nohros.IValue)">
            <summary>
            Sets the <see cref="T:Nohros.IValue"/> object associated with the given path string.
            </summary>
            <param name="path">The path of the value to get.</param>
            <returns>An IValue instance with path <paramref name="path"/> or null if <paramref name="path"/> is
            not found.</returns>
            <remarks>
            This method is used internally to traverse the internal dictionary tree. The elements of the internal
            dictionary could be a <see cref="T:Nohros.Collections.DictionaryValue`1"/> or a <typeparamref name="T"/>. So, to traverse it
            recursivelly we need a method that returns a object of the type <see cref="T:Nohros.IValue"/> instead of an object of the
            type <paramref name="T"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nohros.Collections.DictionaryValue`1.Get(System.String,`0@)" -->
        <member name="M:Nohros.Collections.DictionaryValue`1.Remove(System.String,`0@)">
            <summary>
            Removes the <typeparamref name="T"/> object with the specified path
            from this dictionary(or one of its child dictionaries, if the path is more that just
            a local key).
            </summary>
            <param name="path">The path of the item to remove</param>
            <param name="out_value">When this method returns <paramref name="out_value"/> will contain a
            reference to the removed value or null if the specified path is not found.</param>
            <returns>true if the specified path is found and successfully removed; otherwise, false</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.Remove(System.String)">
            <summary>
            Removes the <typeparamref name="T"/> object with the specified path
            from this dictionary(or one of its child dictionaries, if the path is more that just
            a local key).
            </summary>
            <param name="path">The path of the item to remove</param>
            <returns>A reference to the removed value or null if the specified path is not found.</returns>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Nohros.Collections.DictionaryValue"/> to a new array.
            </summary>
            <typeparam name="T">The type of elements to copy.</typeparam>
            <returns>An array containing copies of the elements of the <see cref="T:Nohros.Collections.DictionaryValue"/></returns>
            <remarks>Only the elements of the type <typeparamref name="T"/> are copied.
            <para>
            This method is an O(n) operation, where n is <see cref="P:Nohros.Collections.DictionaryValue`1.Size"/>
            </para>
            <para>
            ToArray&lt;T&gt; will never return a null reference; however, the returned array
            will contain zero elements if the dictionary contains no elements.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Collections.DictionaryValue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Nohros.Collections.DictionaryValue`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nohros.Collections.DictionaryValue`1.Item(System.String)">
            <summary>
            Gets or sets the <typeparamref name="T"/> associated with the given path starting
            from this object.
            </summary>
            <param name="path">The path of the value to get or set</param>
            <returns>The value of the last key in the path if it can be resolved successfully; otherwise,
            it will return a null reference.
            </returns>
            <remarks>A path has the form "&lt;key&gt;" or "&lt;key&gt;.&lt;key&gt;.[...]", where "." indexes
            into the next <typeparamref name="Nohros.Data.DictionaryValue"/> down. Obviously,
            "." can't be used within a key, but there are no other restrictions on keys.
            <para>
            If the key at any step of the way doesn't exist, or exists but isn't
            a <typeparamref name="DictionaryValue&lt;T&gt;"/>, a new <typeparamref name="DictionaryValue&lt;T&gt;"/>
            instance will be created and attached to the path in that location.
            </para>
            </remarks>
        </member>
        <member name="P:Nohros.Collections.DictionaryValue`1.Size">
            <summary>
            Gets the number of elements in this dictionary.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.Configuration">
            <summary>
            A basic implementation of the <see cref="T:Nohros.Configuration.IConfiguration"/> used to
            parse the configuration files that follows the nohros schema.
            </summary>
            <remarks>
            The nohros shcema is defined by the
            http://nohros.com/schemas/nohros/nohros.xsd file.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IConfiguration.Repositories">
            <summary>
            Gets the repositories that was configured for this application.
            </summary>
            <remarks>
            If this application has no repositories configured, this property will
            returns a empty <see cref="T:Nohros.Configuration.RepositoriesNode"/>, that is a
            <see cref="T:Nohros.Configuration.RepositoriesNode"/> object that has no repository.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IConfiguration.Providers">
            <summary>
            Gets the providers that was configured for this application.
            </summary>
            <remarks>
            If this application has no providers configured, this property will
            returns a empty <see cref="T:Nohros.Configuration.ProvidersNode"/>, that is a
            <see cref="T:Nohros.Configuration.ProvidersNode"/> object that has no repository.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IConfiguration.XmlElements">
            <summary>
            Gets the xml elements that was configured for this application.
            </summary>
            <remarks>
            If this application has no xml elements configured, this property will
            returns an empty <see cref="T:Nohros.Configuration.IXmlElementsNode"/>, that is a
            <see cref="T:Nohros.Configuration.IXmlElementsNode"/> object that contains no xml elements.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.IConfiguration.LogLevel">
            <summary>
            Gets the logging level that was configured for this application.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.Configuration"/> class
            that is empty.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.Configuration.#ctor(Nohros.Configuration.IConfigurationBuilder{Nohros.Configuration.IConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.Configuration"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.Configuration.GetLocalConfigurationFilePath(System.String)">
            <summary>
            Gets the the path to the configuration file named
            <paramref name="name"/> using the running assembly path.
            </summary>
            <param name="name">
            The name of the configuration file to get the path.
            </param>
        </member>
        <member name="M:Nohros.Configuration.Configuration.CopyFrom(Nohros.Configuration.Configuration)">
            <summary>
            Copies the configuration data from the specified
            <see cref="T:Nohros.Configuration.Configuration"/> object.
            </summary>
            <param name="configuration">
            A <see cref="T:Nohros.Configuration.Configuration"/> object that contains the
            configuration data to be copied.
            </param>
        </member>
        <member name="M:Nohros.Configuration.Configuration.PropertyKey(System.String,System.String)">
            <summary>
            Gets the value of a dynamic property by using the specified property namespace and name.
            </summary>
            <param name="ns">The namespace of the property</param>
            <param name="property">The name of the property</param>
            <returns>The value of the property within a given namespace or null if the property could not
            be found.</returns>
        </member>
        <member name="M:Nohros.Configuration.Configuration.GetProperties(System.Xml.XmlNode,System.String)">
            <summary>
            Recursively gets the dynamic properties.
            </summary>
            <param name="node">
            A XML node containing the dynamic properties.
            </param>
            <param name="path">
            The path to the node value.
            </param>
            <remarks>
            If the namespace of the property is not defined it will be assigned to
            the default namespace.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.Configuration.GetProperty(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get</param>
            <returns>An string associated with the specified key.</returns>
            <seealso cref="!:this(string)"/>
        </member>
        <member name="M:Nohros.Configuration.Configuration.SetProperty(System.String,Nohros.IValue)">
            <summary>
            Sets the value associated with the specified key within the default
            namespace.
            </summary>
            <param name="key">The key whose value to set</param>
            <param name="value">An string associated with the specified key within
            the given namespace</param>
        </member>
        <member name="P:Nohros.Configuration.Configuration.Repositories">
            <summary>
            Gets the repositories that was configured for this application.
            </summary>
            <remarks>
            If this application has no repositories configured, this property will
            returns a empty <see cref="T:Nohros.Configuration.RepositoriesNode"/>, that is a
            <see cref="T:Nohros.Configuration.RepositoriesNode"/> object that has no repository.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.Configuration.Providers">
            <summary>
            Gets the providers that was configured for this application.
            </summary>
            <remarks>
            If this application has no providers configured, this property will
            returns a empty <see cref="T:Nohros.Configuration.ProvidersNode"/>, that is a
            <see cref="T:Nohros.Configuration.ProvidersNode"/> object that has no repository.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.Configuration.XmlElements">
            <summary>
            Gets the xml elements that was configured for this application.
            </summary>
            <remarks>
            If this application has no xml elements configured, this property will
            returns an empty <see cref="T:Nohros.Configuration.XmlElementsNode"/>, that is a
            <see cref="T:Nohros.Configuration.XmlElementsNode"/> object that contains no xml elements.
            </remarks>
        </member>
        <member name="P:Nohros.Configuration.Configuration.LogLevel">
            <summary>
            Gets the logging level that was configured for this application.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.RepositoryNode">
            <summary>
            Provides a basic implementation of the <see cref="T:Nohros.Configuration.IRepositoriesNode"/>
            interface.
            </summary>
            <summary>
            A parser for the repository configuration node.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.RepositoryNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.RepositoryNode"/> class by
            using the specified repository name.
            </summary>
            <param name="name">
            The name of the repository.
            </param>
            <remarks>
            By using this constructor the path of the repository will be resolved
            to the configured repositories base path, that is the application base
            directory by default.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.RepositoryNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.RepositoryNode"/> by
            using the specified repository name and path.
            </summary>
            <param name="name">
            A string that uniquely identifies the repository within an application.
            </param>
            <param name="path">
            The repository's directory. This value should be relative to the
            configured repositories base path, that is the application base
            directory by default.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> or <paramref name="path"/> is <c>null</c>.
            </exception>
            <remarks>
            The physical existence of the path is not checked.
            </remarks>
        </member>
        <member name="M:Nohros.Configuration.RepositoryNode.Parse(System.Xml.XmlElement,System.String)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlElement"/> element into a
            <see cref="T:Nohros.Configuration.RepositoryNode"/> object.
            </summary>
            <param name="element">
            A Xml element that contains the repository configuration data.
            </param>
            <param name="base_directory">
            The path of the directory to use as base directory. This directory
            should be relative to the application base directory.
            </param>
            <exception cref="T:Nohros.Configuration.ConfigurationException">
            The <paramref name="element"/> contains invalid configuration data.
            </exception>
        </member>
        <member name="P:Nohros.Configuration.RepositoryNode.RelativeDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Nohros.Configuration.RepositoryNode.AbsoluteDirectory">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.Data.IStateRepositoryFactory">
            <summary>
            A factory for <see cref="T:Nohros.Data.IAppState"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.IStateRepositoryFactory.CreateStateRepository(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a instance of the <see cref="T:Nohros.Data.IAppState"/> class using
            the given <see cref="!:options"/>.
            </summary>
            <param name="options">
            A collection of key/value pairs containing the configured options for
            the repository.
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Data.IAppState"/> object.
            </returns>
        </member>
        <member name="M:Nohros.Dynamics.Dynamics_.DynamicTypeExists(System.String,System.Type)">
            <summary>
            Checks if a dynamic type exists for the type <paramref name="type"/>
            and prefix <paramref name="prefix"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nohros.Dynamics.Dynamics_.GetDynamicTypeName(System.Type)">
            <summary>
            Gets the name of the dynamic type for the <typeparamref name="type"/>.
            </summary>
            <param name="type">
            The type which dynamic type name should be retrieved.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Dynamics.Dynamics_.GetDynamicTypeName(System.String,System.Type,System.String)">
            <summary>
            Gets the name of the dynamic type for the <typeparamref name="type"/>.
            </summary>
            <param name="prefix">
            The preffix to be prepended on the type name.
            </param>
            <param name="type">
            The type which dynamic type name should be retrieved.
            </param>
            <param name="suffix">
            The suffix to be appended to the type name.
            </param>
            <returns></returns>
        </member>
        <member name="T:Nohros.Concurrent.NoStateExecutorState`1">
            <summary>
            A <see cref="T:Nohros.Concurrent.ExecutorState`1"/> that has no state associated.
            </summary>
            <typeparam name="T">The type of the state.s</typeparam>
            <remarks>
            The state of this class will be set to the default value of the type
            <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Nohros.Concurrent.NoStateExecutorState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Concurrent.ExecutorState`1"/>
            class with no state associated.
            </summary>
        </member>
        <member name="T:Nohros.Caching.InvalidCacheLoadException">
            <summary>
            Throw to indicate that an invalid response was returned from a call to
            <see cref="T:Nohros.Caching.CacheLoader`1"/>
            </summary>
        </member>
        <member name="M:Nohros.Caching.InvalidCacheLoadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.Caching.InvalidCacheLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/>
            class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Nohros.Caching.InvalidCacheLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/>
            class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="inner_exception">The exception that is the cause of the
            current exception, or a null reference (Nothing in Visual Basic) if no
            inner exception is specified.
            </param>
        </member>
        <member name="M:Nohros.Caching.InvalidCacheLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/>
            class with serialized data.
            </summary>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            contains contextual information about the source or destination.
            </param>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that
            holds the serialized object data about the exception being thrown.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is
            zero (0).
            </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is
            null.
            </exception>
        </member>
        <member name="T:Nohros.Providers.IProviderFactory`1">
            <summary>
            A generic factory for providers.
            </summary>
        </member>
        <member name="M:Nohros.Providers.IProviderFactory`1.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Providers.IProviderFactory`1"/>
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Nohros.Data.Json.JsonCollectionFactory">
            <summary>
            The default implementation of the <see cref="T:Nohros.Data.Json.IJsonCollectionFactory"/>
            interface. A <see cref="T:Nohros.Data.Json.JsonCollectionFactory"/> should be used to
            create instances of built-in json collections.
            </summary>
        </member>
        <member name="F:Nohros.Data.Json.JsonCollectionFactory.kJsonTableCollection">
            <summary>
            The name of the <see cref="T:Nohros.Data.Json.JsonTable"/> collection.
            </summary>
        </member>
        <member name="F:Nohros.Data.Json.JsonCollectionFactory.kJsonObjectCollection">
            <summary>
            The name of the <see cref="T:Nohros.Data.Json.JsonObject"/> collection.
            </summary>
        </member>
        <member name="F:Nohros.Data.Json.JsonCollectionFactory.kJsonArrayCollection">
            <summary>
            The name of the <see cref="T:Nohros.Data.Json.JsonArray"/> collection.
            </summary>
        </member>
        <member name="F:Nohros.Data.Json.JsonCollectionFactory.kJsonArrayOfObjectsCollection">
            <summary>
            The name of the aray of <see cref="T:Nohros.Data.Json.JsonObject"/> collection.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonCollectionFactory.CreateJsonCollection(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Json.JsonCollectionFactory.CreateJsonCollection(System.String,System.Data.IDataReader)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Data.Json.JsonCollectionFactory.CreateJsonObject(System.Data.IDataReader)">
            <summary>
            Creates a <see cref="T:Nohros.Data.Json.JsonObject"/> containing the data readed from
            <paramref name="reader"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> object that contains the data that will be
            used to populate a <see cref="T:Nohros.Data.Json.JsonObject"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonObject"/> object that contains the data readed from
            the <paramref name="reader"/>.
            </returns>
            <remarks>
            This method reads only the first line of th <paramref name="reader"/>
            and discards the rest.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonCollectionFactory.CreateJsonArray(System.Data.IDataReader)">
            <summary>
            Creates a <see cref="T:Nohros.Data.Json.JsonArray"/> containing the data readed from
            <paramref name="reader"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> object that contains the data that will be
            used to populate a <see cref="T:Nohros.Data.Json.JsonArray"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonArray"/> object that contains the data readed from
            the <paramref name="reader"/>.
            </returns>
            <remarks>
            This method reads only the first line of th <paramref name="reader"/>
            and discards the rest.
            </remarks>
        </member>
        <member name="M:Nohros.Data.Json.JsonCollectionFactory.CreateJsonTable(System.Data.IDataReader)">
            <summary>
            Creates a <see cref="T:Nohros.Data.Json.JsonTable"/> containing the data readed from
            <paramref name="reader"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> object that contains the data that will be
            used to populate a <see cref="T:Nohros.Data.Json.JsonTable"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonTable"/> object that contains the data readed from
            the <paramref name="reader"/>.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonCollectionFactory.CreateJsonArrayOfObject(System.Data.IDataReader)">
            <summary>
            Creates a <see cref="T:Nohros.Data.Json.JsonArray"/> containing the data readed from
            <paramref name="reader"/>.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> object that contains the data that will be
            used to populate a <see cref="T:Nohros.Data.Json.JsonArray"/>.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonArray"/> object that contains the data readed from
            the <paramref name="reader"/>.
            </returns>
            <remarks>
            Each line readed from the <paramref name="reader"/> is mapped to a
            <see cref="T:Nohros.Data.Json.JsonObject"/> object.
            </remarks>
        </member>
        <member name="T:Nohros.Data.Json.JsonDataFields">
            <summary>
            A factory classes used to create instances of the
            <see cref="T:Nohros.Data.Json.IJsonDataField"/> interface.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFields.CreateDataField(System.String,System.Int32,System.Type)">
            <summary>
            Creates an instance of the <see cref="T:Nohros.Data.Json.IJsonDataField"/> class that is
            related with the specified type.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based ordinal position of the field within a
            <see cref="T:System.Data.IDataReader"/>.
            </param>
            <param name="type">
            The type that is related with the <see cref="T:Nohros.Data.Json.IJsonDataField"/> to be
            created.
            </param>
            <returns>
            The newly created <see cref="T:Nohros.Data.Json.IJsonDataField"/>
            </returns>
            <exception cref="T:System.NotSupportedException">
            A <see cref="T:Nohros.Data.Json.IJsonDataField"/> that is related with the
            <paramref name="type"/> object could not be found.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> or <paramref name="name"/> are <c>null</c>.
            </exception>
            <remarks>
            This method recognizes the following types: <see cref="T:System.String"/>,
            <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>,
            <see cref="T:System.Decimal"/>, <see cref="T:System.Single"/>.
            </remarks>
        </member>
        <member name="T:Nohros.Logging.ConsoleLogger">
            <summary>
            A implementation of the <see cref="T:Nohros.Logging.ILogger"/> that log all messages
            using the attached <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.#ctor(Nohros.Logging.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Logging.ConsoleLogger"/> class
            using the specified <see cref="T:Nohros.Logging.LogLevel"/>.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Debug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Debug(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Error(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Error(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Fatal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Fatal(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Info(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Info(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Warn(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Nohros.Logging.ConsoleLogger.Warn(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Nohros.IO.Path">
            <summary>
            A collection of methods that extends the .NET <see cref="T:Nohros.IO.Path"/> built-in
            class.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetCallingAssemblyDirectory">
            <summary>
            Gets the directory where the calling assembly is stored.
            </summary>
            <returns>
            The directory where the calling assembly is stored.
            </returns>
        </member>
        <member name="M:Nohros.IO.Path.AbsoluteForCallingAssembly(System.String)">
            <summary>
            Convert provided relative <paramref name="path"/> into an absolute
            path using the calling assembly location as base directory.
            </summary>
            <param name="path">
            The relative path to be converted.
            </param>
            <returns>
            Teh absolute path for <paramref name="path"/>.
            </returns>
            <remarks>
            If <paramref name="path"/> is not relative this method simple returns
            the provided path.
            </remarks>
        </member>
        <member name="M:Nohros.IO.Path.AbsoluteForApplication(System.String)">
            <summary>
            Convert provided relative <paramref name="path"/> into an absolute path
            using the <see cref="P:System.AppDomain.BaseDirectory"/> as base directory.
            </summary>
            <param name="path">
            The relative path to be converted.
            </param>
            <returns>
            Teh absolute path for <paramref name="path"/>.
            </returns>
            <remarks>
            If <paramref name="path"/> is not relative this method simple returns
            the provided path.
            </remarks>
        </member>
        <member name="M:Nohros.IO.Path.IsPathRooted(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.IsPathRooted(System.String)"/> and exists to allow users
            to use the <see cref="M:System.IO.Path.IsPathRooted(System.String)"/> without including
            the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.Combine(System.String,System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> and exists to allow users
            to use the <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> without including
            the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetDirectoryName(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/> and exists to allow users
            to use the <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/> without including
            the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetFullPath(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.GetFullPath(System.String)"/> and exists to allow users
            to use the <see cref="M:System.IO.Path.GetFullPath(System.String)"/> without including
            the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetExtension(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.GetExtension(System.String)"/> and exists to allow users
            to use the <see cref="M:System.IO.Path.GetExtension(System.String)"/> without including
            the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetFileName(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.GetFileName(System.String)"/> and exists to allow users
            to use the <see cref="M:System.IO.Path.GetFileName(System.String)"/> without including
            the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/> and exists to
            allow users to use the
            <see cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/> without
            including the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="M:Nohros.IO.Path.GetPathRoot(System.String)">
            <summary>
            This method has the same functionality of the method
            <see cref="M:System.IO.Path.GetPathRoot(System.String)"/> and exists to
            allow users to use the
            <see cref="M:System.IO.Path.GetPathRoot(System.String)"/> without
            including the <see cref="N:System.IO"/> namespace.
            </summary>
        </member>
        <member name="T:Nohros.NotReachedException">
            <summary>
            An exception that is throwed when a portion of code that should be not
            reached is reached.
            </summary>
        </member>
        <member name="M:Nohros.NotReachedException.#ctor">
            <summary>
            Creates a new instance_ of the <see cref="T:Nohros.NotReachedException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.NotReachedException.#ctor(System.String)">
            <summary>
            Creates a new instance_ of the <see cref="T:Nohros.NotReachedException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NotReachedException"/>was throw</param>
        </member>
        <member name="M:Nohros.NotReachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance_ if the <see cref="T:Nohros.NotReachedException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.NotReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NotReachedException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NotReachedException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.NotReachedException"/>to be throw.</param>
        </member>
        <member name="M:Nohros.NotReachedException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NotReachedException"/> class
            using the specified inner exception.
            </summary>
            <param name="inner_exception">A <see cref="T:System.Exception"/> that causes
            this exception to be raised.</param>
        </member>
        <member name="T:Nohros.NoResultException">
            <summary>
            Thrown by a data provider when a query that expects results is executed
            and there is no result to return.
            </summary>
        </member>
        <member name="M:Nohros.NoResultException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoResultException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.NoResultException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoResultException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NoResultException"/>was throw</param>
        </member>
        <member name="M:Nohros.NoResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the <see cref="T:Nohros.NoResultException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.NoResultException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoResultException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this <see cref="T:Nohros.NoResultException"/> to be
            throw.
            </param>
        </member>
        <member name="M:Nohros.NoResultException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoResultException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NoResultException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.NoResultException"/>to be throw.</param>
        </member>
        <member name="T:Nohros.Data.CriteriaResolver">
            <summary>
            Resolve <see cref="T:Nohros.Data.ICriteria"/> to other related objects.
            </summary>
        </member>
        <member name="M:Nohros.Data.CriteriaResolver.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.CriteriaResolver"/> class.
            </summary>
        </member>
        <member name="M:Nohros.Data.CriteriaResolver.Resolve(Nohros.Data.ICriteria,System.String,System.Data.IDbConnection)">
            <summary>
            Resolve the given <paramref name="criteria"/> into a
            <see cref="T:Nohros.Data.CommandBuilder"/> object.
            </summary>
            <param name="from_clause"></param>
            <param name="connection"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Nohros.Data.CriteriaResolver.Resolve(Nohros.Data.ICriteria,System.String,System.Data.IDbCommand)">
            <summary>
            Resolve the given <paramref name="criteria"/> into a
            <see cref="T:Nohros.Data.CommandBuilder"/> object.
            </summary>
            <remarks>
            The <see cref="P:System.Data.SqlClient.SqlCommand.CommandText"/>,
            <see cref="P:System.Data.SqlClient.SqlCommand.CommandType"/> properties of the
            <paramref name="cmd"/> will be modified. The parameters
            that is already present in the <see cref="P:System.Data.IDbCommand.Parameters"/>
            will not be removed, but new parameters will be added.
            </remarks>
        </member>
        <member name="M:Nohros.Data.CriteriaResolver.Resolve(Nohros.Data.ICriteria,System.String,Nohros.Data.CommandBuilder)">
            <summary>
            Resolve the given <paramref name="criteria"/> into a
            <see cref="T:Nohros.Data.CommandBuilder"/> object.
            </summary>
        </member>
        <member name="M:Nohros.Data.CriteriaResolver.Resolve``1(Nohros.Data.ICriteria,System.String)">
            <summary>
            Resolve the given <paramref name="criteria"/> into a
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> object.
            </summary>
        </member>
        <member name="T:Nohros.Data.DataReaderReader">
            <summary>
            Represents a reader that can read data from a <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataReaderReader.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataReaderReader"/> class
            using the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">
            The <see cref="T:System.Data.IDataReader"/> to be readed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Nohros.Data.DataReaderReader.Read">
            <summary>
            Advances the reader to the next record.
            </summary>
            <returns>
            <c>true</c> if there ae more rows; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The default position of the reader is prior the first record. Therefore
            you must call <see cref="M:Nohros.Data.DataReaderReader.Read"/> to begin accessing any data.
            </remarks>
        </member>
        <member name="M:Nohros.Data.DataReaderReader.NextResult">
            <summary>
            Advances the reader to the next result, when reading the results of
            a <see cref="T:System.Data.IDataReader"/> associated with a batch of statements.
            </summary>
            <returns>
            <c>true</c> if there are more rows; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nohros.Data.DataReaderReader.GetOrdinals(System.String[])">
            <summary>
            Gets the columns indexes(ordinals), given the name of the columns.
            </summary>
            <param name="columns">
            An array containing the column names to get the ordinals.
            </param>
            <returns>
            An array containing the indexes of the specified column
            names within a <see cref="T:System.Data.IDataReader"/>. The indexes is
            returned in the same order they appear on column names array.
            </returns>
            <exception cref="T:System.ArgumentException">
            The number of fields of the associated <see cref="T:System.Data.IDataReader"/> is
            less than the number of columns in <paramref name="columns"/>.
            </exception>
            <remarks>
            Ordinal-based lookups are more efficient than name lookups, it
            is inefficient to call <see cref="!:IDataReader.GetOrdinal"/> within a
            loop. This method provides a convenient way to call the
            <see cref="!:IDataReader.GetOrdinal"/> method for a set of columns
            defined within a <see cref="T:System.Data.IDataReader"/> and reduce the
            code len used for that purpose.
            </remarks>
        </member>
        <member name="T:Nohros.Data.ShortMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.ShortMapType.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.ShortMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Data.Mappers">
            <summary>
            Factory class for implementations of the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> interface that maps to value types.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Boolean">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Byte">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Char">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.DateTime">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="M:Nohros.Data.Mappers.DateTime"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Decimal">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Double">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Float">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Guid">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="M:Nohros.Data.Mappers.Guid"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Int16">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Int32">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.Long">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Nohros.Data.Mappers.String">
            <summary>
            Creates an instance of a class that implements the
            <see cref="T:Nohros.Data.IDataReaderMapper`1"/> where T is <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Nohros.Data.FloatMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Single"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.FloatMapType.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.FloatMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Collections.IVisitable`1">
            <summary>
            Defines methods and properties that allows a <see cref="!:IVisitor&gt;T&lt;"/> to visit every
            element contained within the structure.
            </summary>
        </member>
        <member name="M:Nohros.Collections.IVisitable`1.Accept(Nohros.Collections.IVisitor{`0},System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor to accepts.</param>
            <param name="state">A user-defined object that qualifies or contains information about the visitor's
            current state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference</exception>
        </member>
        <member name="T:Nohros.Collections.IVisitable`2">
            <summary>
            Defines methods and properties that allows a <see cref="!:IVisitor&gt;T1&lt;,&gt;T2&lt;"/> to visit every
            element contained within the structure.
            </summary>
        </member>
        <member name="M:Nohros.Collections.IVisitable`2.Accept(Nohros.Collections.IVisitor{`0,`1},System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor to accepts.</param>
            <param name="state">A user-defined object that qualifies or contains information about the visitor's
            current state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference</exception>
        </member>
        <member name="T:Nohros.Suppliers">
            <summary>
            A collection of useful suppliers.
            </summary>
        </member>
        <member name="M:Nohros.Suppliers.Memoize``1(Nohros.ISupplier{``0})">
            <summary>
            Gets a supplier which caches the instance retrieved during the first
            call to <see cref="M:Nohros.ISupplier`1.Supply"/> and returns that value on
            subsequent calls to <see cref="M:Nohros.ISupplier`1.Supply"/>.
            </summary>
            <typeparam name="T">The type of the objects returned by the supplier.
            </typeparam>
            <param name="supplier">A <see cref="M:Nohros.ISupplier`1.Supply"/> that is
            used to create the first instance of the type <typeparamref name="T"/>
            </param>
            <returns>A supplier which caches the instance of retrieved during the
            first call the <see cref="M:Nohros.ISupplier`1.Supply"/>.</returns>
            <remarks>If <see cref="!:supplier"/> is an instance created by an earlier
            call to <see cref="M:Nohros.Suppliers.Memoize``1(Nohros.ISupplier{``0})"/></remarks>
        </member>
        <member name="M:Nohros.Suppliers.MemoizeWithExpiration``1(Nohros.ISupplier{``0},System.Int64,Nohros.TimeUnit)">
            <summary>
            Gets a supplier that caches the instance of supplied by the supplier
            and removes the cached value after the specified time has passed.
            </summary>
            <param name="supplier">A <see cref="M:Nohros.ISupplier`1.Supply"/> that is
            used to create the first instance of the type <typeparamref name="T"/>
            </param>
            <param name="duration">The length of time after a value is created
            that it should be stop beign returned by subsequent
            <see cref="M:Nohros.ISupplier`1.Supply"/> calls.</param>
            <param name="unit">The unit that duration is expressed in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> is not positive.</exception>
            <returns></returns>
            <remarks>
            Subsequent calls to <see cref="M:Nohros.ISupplier`1.Supply"/> return the
            cached vale if the expiration time has not passed. After the expiration
            time, a new value is retrieved, cached, and returned.
            <para>
            The returned supplier is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Nohros.Suppliers.OfInstance``1(``0)">
            <summary>
            Gets a supplier that always supplies <param name="instance">.</param>
            </summary>
            <typeparam name="T">The type of <param name="instance"></param></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Nohros.ComparisonComparer`1">
            <summary>
            A comparer using a comparison delegate for comparison between items.
            </summary>
        </member>
        <member name="M:Nohros.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:ComparisonComparer"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">comparison is null</exception>
        </member>
        <member name="M:Nohros.ComparisonComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="P:Nohros.ComparisonComparer`1.Comparison">
            <summary>
             Gets or sets the comparison used in this comparer
            </summary>
            <exception cref="T:System.ArgumentNullException">The value assigned is a null reference</exception>
        </member>
        <member name="T:Nohros.ExecutionException">
            <summary>
            Exception thrown when attempting to retrieve the result of a task that
            aborted by throwing an exception.
            </summary>
        </member>
        <member name="M:Nohros.ExecutionException.#ctor">
            <summary>
            Creates a new instance_ of the <see cref="T:Nohros.ExecutionException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.ExecutionException.#ctor(System.String)">
            <summary>
            Creates a new instance_ of the <see cref="T:Nohros.ExecutionException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ExecutionException"/>was throw</param>
        </member>
        <member name="M:Nohros.ExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance_ if the <see cref="T:Nohros.ExecutionException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.ExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ExecutionException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.ExecutionException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.ExecutionException"/>to be throw.</param>
        </member>
        <member name="M:Nohros.ExecutionException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.ExecutionException"/> class
            using the specified inner exception.
            </summary>
            <param name="inner_exception">A <see cref="T:System.Exception"/> that causes
            this exception to be raised.</param>
        </member>
        <member name="T:Nohros.Configuration.ConfigurationException">
            <summary>
            The exception that is thrown when a configuration error has occured.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ConfigurationException"/>
            class.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ConfigurationException"/>
            class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ConfigurationException"/>
            class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="inner_exception">
            The exception that is the cause of the current exception, or a null
            reference if no inner exception is specified.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ConfigurationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ConfigurationException"/>
            class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="inner_exception">
            The exception that is the cause of the current exception, or a null
            reference if no inner exception is specified.
            </param>
        </member>
        <member name="M:Nohros.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Configuration.ConfigurationException"/>
            class with serialized data.
            </summary>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.
            </param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or
            <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The info parameter is null.
            </exception>
        </member>
        <member name="T:Nohros.Data.Json.JsonDecimal">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/> that maps a
            <see cref="T:System.Decimal"/> type to a json number token.
            </summary>
        </member>
        <member name="M:Nohros.Data.Json.JsonDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDecimal"/> class
            that uses the general number format("G") to convert this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDecimal.#ctor(System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDecimal"/> class
            that uses <paramref name="format"/> to converts this instance to
            a string.
            </summary>
            <param name="value">
            The value to be associated with this class.
            </param>
            <param name="format">
            The format to use when converting this instance to a string.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDecimal.AsJson">
            <summary>
            Gets the json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </summary>
            <returns>
            The json string representation of the <see cref="T:Nohros.Data.Json.IJsonToken`1"/>
            class.
            </returns>
        </member>
        <member name="M:Nohros.Data.Json.JsonDecimal.op_Explicit(System.Decimal)~Nohros.Data.Json.JsonDecimal">
            <summary>
            Explicit converts an <see cref="T:System.Decimal"/> object to a
            <see cref="T:Nohros.Data.Json.JsonDecimal"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Decimal"/> object to be converted.
            </param>
            <returns>
            A <see cref="T:Nohros.Data.Json.JsonDecimal"/> that represents the value
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Nohros.Data.DataFieldBoolean">
            <summary>
            An implementation of the <see cref="T:Nohros.Data.IDataField`1"/> that maps a
            <see cref="T:System.Boolean"/> data type to a concrete <see cref="T:Nohros.Data.IDataField`1"/>
            object.
            </summary>
        </member>
        <member name="M:Nohros.Data.DataFieldBoolean.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.DataFieldBoolean"/> class by
            using the specified field name and position.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero based ordinal position of the field within an
            <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.DataFieldBoolean.GetValue(System.Data.IDataReader)">
            <summary>
            Gets the value of the field as a <see cref="T:System.Boolean"/>
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Boolean"/> at the field position.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldBoolean.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.Json.JsonDataFieldBoolean"/>
            class using the specified field <paramref name="name"/> and
            ordianl <paramref name="position"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="position">
            The zero-based positon of the field within a <see cref="T:System.Data.IDataReader"/>.
            </param>
        </member>
        <member name="M:Nohros.Data.Json.JsonDataFieldBoolean.Nohros#Data#IDataField{Nohros#Data#Json#IJsonToken}#GetValue(System.Data.IDataReader)">
            <summary>
            Gets the a <see cref="T:Nohros.Data.Json.IJsonToken`1"/> object that represents the
            the field's value.
            </summary>
            <param name="reader">
            A <see cref="T:System.Data.IDataReader"/> that can be used to extract a
            <see cref="T:System.Boolean"/> at the field position.
            </param>
        </member>
        <member name="T:Nohros.NoUniqueResultException">
            <summary>
            Thrown by a data provider when a query that expects a single results is
            executed and there is more than one result from the query.
            </summary>
        </member>
        <member name="M:Nohros.NoUniqueResultException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoUniqueResultException"/> class.
            </summary>
        </member>
        <member name="M:Nohros.NoUniqueResultException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoUniqueResultException"/> class.
            </summary>
            <param name="message">
            A message describing why this <see cref="T:Nohros.NoUniqueResultException"/>was
            throw.
            </param>
        </member>
        <member name="M:Nohros.NoUniqueResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance if the <see cref="T:Nohros.NoUniqueResultException"/> class.
            </summary>
            <param name="info">The object that holds the information to
            deserialize.</param>
            <param name="context">Contextual information about the source or
            destination.</param>
        </member>
        <member name="M:Nohros.NoUniqueResultException.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoUniqueResultException"/> class.
            </summary>
            <param name="inner_exception">
            The exception that caused this <see cref="T:Nohros.NoUniqueResultException"/> to be
            throw.
            </param>
        </member>
        <member name="M:Nohros.NoUniqueResultException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Nohros.NoUniqueResultException"/> class.
            </summary>
            <param name="message">A message describing why this
            <see cref="T:Nohros.NoUniqueResultException"/>was throw.</param>
            <param name="inner_exception">The exception that caused this
            <see cref="T:Nohros.NoUniqueResultException"/>to be throw.</param>
        </member>
        <member name="T:Nohros.Data.ICriteria`1">
            <summary>
            Defines the criteria to be used while resolving a database query.
            </summary>
            <typeparam name="TField">
            The type of object(s) that will be returned by the query.
            </typeparam>
        </member>
        <member name="M:Nohros.Data.ICriteria`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Add the given property to the list of properties to be returned from
            the database.
            </summary>
            <remarks>
            For SQL-92 compatible repositories, this represents the list of columns
            of the <c>SELECT</c> clause.
            </remarks>
        </member>
        <member name="M:Nohros.Data.ICriteria`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Add the given property/value as a filter.
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <remarks>
            For SQL-92 compatible repositories, this represents the clause of the
            <c>WHERE</c> clause.
            </remarks>
        </member>
        <member name="T:Nohros.Data.ICriteria`2">
            <summary>
            Defines the criteria to be used while resolving a database query.
            </summary>
            <typeparam name="TField">
            The type of object(s) that will be returned by the query.
            </typeparam>
        </member>
        <member name="M:Nohros.Data.ICriteria`2.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Add the given property to the list of properties to be returned from
            the database.
            </summary>
            <remarks>
            For SQL-92 compatible repositories, this represents the list of columns
            of the <c>SELECT</c> clause.
            </remarks>
        </member>
        <member name="M:Nohros.Data.ICriteria`2.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Add the given property/value as a filter.
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <remarks>
            For SQL-92 compatible repositories, this represents the clause of the
            <c>WHERE</c> clause.
            </remarks>
        </member>
        <member name="M:Nohros.Data.ICriteria`2.Where``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Object)">
            <summary>
            Add the given property/value as a filter.
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <remarks>
            For SQL-92 compatible repositories, this represents the clause of the
            <c>WHERE</c> clause.
            </remarks>
        </member>
        <member name="T:Nohros.Data.BooleanMapType">
            <summary>
            Maps a class property to constant <see cref="T:System.Boolean"/>.
            </summary>s
        </member>
        <member name="M:Nohros.Data.BooleanMapType.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.BooleanMapType"/> class
            using the specified column name.
            </summary>
            <param name="value">
            The constant value to be mapped.
            </param>
        </member>
        <member name="T:Nohros.Data.ThreadSafeHiLoGenerator">
            <summary>
            A class that is used to generate integer identity values using the High/Lo
            algorithm.
            </summary>
        </member>
        <member name="M:Nohros.Data.ThreadSafeHiLoGenerator.#ctor(Nohros.Data.NextHighDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Nohros.Data.HiLoGenerator"/> class
            by using the given next hi delegate and max lo value.
            </summary>
            <param name="next_high">
            A <see cref="T:Nohros.CallableDelegate`1"/> that is used to get the next High
            value.
            </param>
        </member>
        <member name="M:Nohros.Data.ThreadSafeHiLoGenerator.Generate">
            <summary>
            Generate the next available identity.
            </summary>
            <returns>
            The next available identity value.
            </returns>
        </member>
        <member name="T:Nohros.Configuration.ConfigurationLoader">
            <summary>
            An implementation of <see cref="T:Nohros.Configuration.ConfigurationLoader"/> that loads
            configuration data into a <see cref="T:Nohros.Configuration.Configuration"/> object.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ConfigurationLoader.#ctor">
            <summary>
            Initializes a new instance of hte <see cref="T:Nohros.Configuration.ConfigurationLoader"/>
            class.
            </summary>
        </member>
        <member name="T:Nohros.Configuration.ConfigSection">
            <summary>
            A helper class for <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
        </member>
        <member name="M:Nohros.Configuration.ConfigSection.GetConfiguration``1">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationSection"/> based on the given type.
            </summary>
        </member>
    </members>
</doc>
